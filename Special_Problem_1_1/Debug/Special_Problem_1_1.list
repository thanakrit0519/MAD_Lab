
Special_Problem_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f3c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d0  080041d0  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d8  080041d8  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  080041e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000170  08004350  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004350  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002019e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a094  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c6  00000000  00000000  0002a275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a3  00000000  00000000  0002c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266bd  00000000  00000000  0002c83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6a3  00000000  00000000  00052ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0455  00000000  00000000  0005d59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d0c  00000000  00000000  0014d9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000170 	.word	0x20000170
 8000214:	00000000 	.word	0x00000000
 8000218:	0800411c 	.word	0x0800411c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000174 	.word	0x20000174
 8000234:	0800411c 	.word	0x0800411c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800054a:	f000 fcdc 	bl	8000f06 <HAL_Init>

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 800054e:	f000 fb6b 	bl	8000c28 <MPU_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000552:	f000 f94f 	bl	80007f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000556:	f000 fa09 	bl	800096c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800055a:	f000 f9a7 	bl	80008ac <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800055e:	f000 f9d5 	bl	800090c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	/*-----------------------------------------------RX---------------------------------------------------------------*/
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &ch, 1);
 8000562:	2201      	movs	r2, #1
 8000564:	4997      	ldr	r1, [pc, #604]	; (80007c4 <main+0x280>)
 8000566:	4898      	ldr	r0, [pc, #608]	; (80007c8 <main+0x284>)
 8000568:	f002 fb6b 	bl	8002c42 <HAL_UART_Receive_IT>
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800056c:	bf00      	nop
 800056e:	4b97      	ldr	r3, [pc, #604]	; (80007cc <main+0x288>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000578:	2b40      	cmp	r3, #64	; 0x40
 800057a:	d1f8      	bne.n	800056e <main+0x2a>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) "Man from U.A.R.T.2!\nQuit PRESS q\n",
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	2221      	movs	r2, #33	; 0x21
 8000580:	4993      	ldr	r1, [pc, #588]	; (80007d0 <main+0x28c>)
 8000582:	4892      	ldr	r0, [pc, #584]	; (80007cc <main+0x288>)
 8000584:	f002 fa16 	bl	80029b4 <HAL_UART_Transmit>
			strlen("Man from U.A.R.T.2!\nQuit PRESS q\n"), 100);

	while (!isReady) {
 8000588:	bf00      	nop
 800058a:	4b92      	ldr	r3, [pc, #584]	; (80007d4 <main+0x290>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0fb      	beq.n	800058a <main+0x46>
//		HAL_UART_Transmit(&huart3, (uint8_t*) "is ready\n", 10, 1000);
//
//	}

	/*--------------------------------------------------------TX-------------------------------------------------------*/
	int index = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
	if (state == 1) {
 8000596:	4b90      	ldr	r3, [pc, #576]	; (80007d8 <main+0x294>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d172      	bne.n	8000684 <main+0x140>
		while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800059e:	bf00      	nop
 80005a0:	4b8a      	ldr	r3, [pc, #552]	; (80007cc <main+0x288>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	2b40      	cmp	r3, #64	; 0x40
 80005ac:	d1f8      	bne.n	80005a0 <main+0x5c>
		}
		HAL_UART_Transmit(&huart3, (uint8_t*) "\tName: ", 7, 100);
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2207      	movs	r2, #7
 80005b2:	498a      	ldr	r1, [pc, #552]	; (80007dc <main+0x298>)
 80005b4:	4885      	ldr	r0, [pc, #532]	; (80007cc <main+0x288>)
 80005b6:	f002 f9fd 	bl	80029b4 <HAL_UART_Transmit>
		ch1 = ' ';
 80005ba:	4b89      	ldr	r3, [pc, #548]	; (80007e0 <main+0x29c>)
 80005bc:	2220      	movs	r2, #32
 80005be:	701a      	strb	r2, [r3, #0]
		while (ch1 != '\n') {
 80005c0:	e028      	b.n	8000614 <main+0xd0>

			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE) == RESET) {
 80005c2:	bf00      	nop
 80005c4:	4b81      	ldr	r3, [pc, #516]	; (80007cc <main+0x288>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	2b20      	cmp	r3, #32
 80005d0:	d1f8      	bne.n	80005c4 <main+0x80>
			}
			if (HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 100) == HAL_OK) {
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	4982      	ldr	r1, [pc, #520]	; (80007e0 <main+0x29c>)
 80005d8:	487c      	ldr	r0, [pc, #496]	; (80007cc <main+0x288>)
 80005da:	f002 fa6e 	bl	8002aba <HAL_UART_Receive>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d117      	bne.n	8000614 <main+0xd0>
				while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80005e4:	bf00      	nop
 80005e6:	4b79      	ldr	r3, [pc, #484]	; (80007cc <main+0x288>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f0:	2b40      	cmp	r3, #64	; 0x40
 80005f2:	d1f8      	bne.n	80005e6 <main+0xa2>
				}
				HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	2201      	movs	r2, #1
 80005f8:	4979      	ldr	r1, [pc, #484]	; (80007e0 <main+0x29c>)
 80005fa:	4874      	ldr	r0, [pc, #464]	; (80007cc <main+0x288>)
 80005fc:	f002 f9da 	bl	80029b4 <HAL_UART_Transmit>
				name[index] = ch1;
 8000600:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <main+0x29c>)
 8000602:	7819      	ldrb	r1, [r3, #0]
 8000604:	4a77      	ldr	r2, [pc, #476]	; (80007e4 <main+0x2a0>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	460a      	mov	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
				index++;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
		while (ch1 != '\n') {
 8000614:	4b72      	ldr	r3, [pc, #456]	; (80007e0 <main+0x29c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d1d2      	bne.n	80005c2 <main+0x7e>
			}
		}
		ch1 = ' ';
 800061c:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <main+0x29c>)
 800061e:	2220      	movs	r2, #32
 8000620:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name), 1000);
		for (int i = 0; i < index; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	e015      	b.n	8000654 <main+0x110>
			while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 8000628:	bf00      	nop
 800062a:	4b67      	ldr	r3, [pc, #412]	; (80007c8 <main+0x284>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000634:	2b40      	cmp	r3, #64	; 0x40
 8000636:	d1f8      	bne.n	800062a <main+0xe6>
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) &name + i, 1, 100);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4a6a      	ldr	r2, [pc, #424]	; (80007e4 <main+0x2a0>)
 800063c:	1899      	adds	r1, r3, r2
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	2201      	movs	r2, #1
 8000642:	4861      	ldr	r0, [pc, #388]	; (80007c8 <main+0x284>)
 8000644:	f002 f9b6 	bl	80029b4 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f000 fcb9 	bl	8000fc0 <HAL_Delay>
		for (int i = 0; i < index; i++) {
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	3301      	adds	r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbe5      	blt.n	8000628 <main+0xe4>
		}
//		while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
//					}
//		HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 1000);
		name[index - 1] = ' ';
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3b01      	subs	r3, #1
 8000660:	4a60      	ldr	r2, [pc, #384]	; (80007e4 <main+0x2a0>)
 8000662:	2120      	movs	r1, #32
 8000664:	54d1      	strb	r1, [r2, r3]
		name[index] = '=';
 8000666:	4a5f      	ldr	r2, [pc, #380]	; (80007e4 <main+0x2a0>)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	223d      	movs	r2, #61	; 0x3d
 800066e:	701a      	strb	r2, [r3, #0]
		name[index + 1] = '>';
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	4a5b      	ldr	r2, [pc, #364]	; (80007e4 <main+0x2a0>)
 8000676:	213e      	movs	r1, #62	; 0x3e
 8000678:	54d1      	strb	r1, [r2, r3]
		name[index + 2] = ' ';
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3302      	adds	r3, #2
 800067e:	4a59      	ldr	r2, [pc, #356]	; (80007e4 <main+0x2a0>)
 8000680:	2120      	movs	r1, #32
 8000682:	54d1      	strb	r1, [r2, r3]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (state != 2) {
 8000684:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <main+0x294>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d0fb      	beq.n	8000684 <main+0x140>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800068c:	bf00      	nop
 800068e:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <main+0x288>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000698:	2b40      	cmp	r3, #64	; 0x40
 800069a:	d1f8      	bne.n	800068e <main+0x14a>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) "\t", 1, 100);
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	2201      	movs	r2, #1
 80006a0:	4951      	ldr	r1, [pc, #324]	; (80007e8 <main+0x2a4>)
 80006a2:	484a      	ldr	r0, [pc, #296]	; (80007cc <main+0x288>)
 80006a4:	f002 f986 	bl	80029b4 <HAL_UART_Transmit>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80006a8:	bf00      	nop
 80006aa:	4b48      	ldr	r3, [pc, #288]	; (80007cc <main+0x288>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b4:	2b40      	cmp	r3, #64	; 0x40
 80006b6:	d1f8      	bne.n	80006aa <main+0x166>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name), 100);
 80006b8:	484a      	ldr	r0, [pc, #296]	; (80007e4 <main+0x2a0>)
 80006ba:	f7ff fdbd 	bl	8000238 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	4947      	ldr	r1, [pc, #284]	; (80007e4 <main+0x2a0>)
 80006c6:	4841      	ldr	r0, [pc, #260]	; (80007cc <main+0x288>)
 80006c8:	f002 f974 	bl	80029b4 <HAL_UART_Transmit>
			index = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
			while (ch1 != '\n') {
 80006d0:	e02d      	b.n	800072e <main+0x1ea>
				while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE) == RESET) {
 80006d2:	bf00      	nop
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <main+0x288>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	2b20      	cmp	r3, #32
 80006e0:	d1f8      	bne.n	80006d4 <main+0x190>
				}
				if (HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 100)
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	493e      	ldr	r1, [pc, #248]	; (80007e0 <main+0x29c>)
 80006e8:	4838      	ldr	r0, [pc, #224]	; (80007cc <main+0x288>)
 80006ea:	f002 f9e6 	bl	8002aba <HAL_UART_Receive>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d11c      	bne.n	800072e <main+0x1ea>
						== HAL_OK) {
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80006f4:	bf00      	nop
 80006f6:	4b35      	ldr	r3, [pc, #212]	; (80007cc <main+0x288>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000700:	2b40      	cmp	r3, #64	; 0x40
 8000702:	d1f8      	bne.n	80006f6 <main+0x1b2>
					}
					if (state == 2) {
 8000704:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <main+0x294>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d100      	bne.n	800070e <main+0x1ca>
						while (1) {
 800070c:	e7fe      	b.n	800070c <main+0x1c8>
						}
					}
					HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4933      	ldr	r1, [pc, #204]	; (80007e0 <main+0x29c>)
 8000714:	482d      	ldr	r0, [pc, #180]	; (80007cc <main+0x288>)
 8000716:	f002 f94d 	bl	80029b4 <HAL_UART_Transmit>
					fromUART3[index] = ch1;
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <main+0x29c>)
 800071c:	7819      	ldrb	r1, [r3, #0]
 800071e:	4a33      	ldr	r2, [pc, #204]	; (80007ec <main+0x2a8>)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	460a      	mov	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
					index++;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
			while (ch1 != '\n') {
 800072e:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <main+0x29c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b0a      	cmp	r3, #10
 8000734:	d1cd      	bne.n	80006d2 <main+0x18e>
				}
			}
			ch1 = ' ';
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <main+0x29c>)
 8000738:	2220      	movs	r2, #32
 800073a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < index; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e015      	b.n	800076e <main+0x22a>
				while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 8000742:	bf00      	nop
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <main+0x284>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d1f8      	bne.n	8000744 <main+0x200>
				}
				HAL_UART_Transmit(&huart2, (uint8_t*) &fromUART3 + i, 1, 100);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <main+0x2a8>)
 8000756:	1899      	adds	r1, r3, r2
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	2201      	movs	r2, #1
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <main+0x284>)
 800075e:	f002 f929 	bl	80029b4 <HAL_UART_Transmit>
				HAL_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f000 fc2c 	bl	8000fc0 <HAL_Delay>
			for (int i = 0; i < index; i++) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbe5      	blt.n	8000742 <main+0x1fe>
			}
			if (fromUART3[0] == 'q' && fromUART3[1] == '\n') {
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <main+0x2a8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b71      	cmp	r3, #113	; 0x71
 800077c:	d117      	bne.n	80007ae <main+0x26a>
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <main+0x2a8>)
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d113      	bne.n	80007ae <main+0x26a>
				state = 2;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <main+0x294>)
 8000788:	2202      	movs	r2, #2
 800078a:	601a      	str	r2, [r3, #0]
				while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800078c:	bf00      	nop
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <main+0x288>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000798:	2b40      	cmp	r3, #64	; 0x40
 800079a:	d1f8      	bne.n	800078e <main+0x24a>
				}
				HAL_UART_Transmit(&huart3,
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	221c      	movs	r2, #28
 80007a2:	4913      	ldr	r1, [pc, #76]	; (80007f0 <main+0x2ac>)
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <main+0x288>)
 80007a6:	f002 f905 	bl	80029b4 <HAL_UART_Transmit>
						(uint8_t*) "Program ended from U.A.R.T.2",
						strlen("Program ended from U.A.R.T.2"), 1000);
				return 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e006      	b.n	80007bc <main+0x278>
			}

			memset(fromUART3, 0, index);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	461a      	mov	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <main+0x2a8>)
 80007b6:	f003 fc85 	bl	80040c4 <memset>
		if (state != 2) {
 80007ba:	e763      	b.n	8000684 <main+0x140>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000065 	.word	0x20000065
 80007c8:	2000018c 	.word	0x2000018c
 80007cc:	20000214 	.word	0x20000214
 80007d0:	08004134 	.word	0x08004134
 80007d4:	2000029c 	.word	0x2000029c
 80007d8:	200002a0 	.word	0x200002a0
 80007dc:	08004158 	.word	0x08004158
 80007e0:	20000064 	.word	0x20000064
 80007e4:	20000000 	.word	0x20000000
 80007e8:	08004160 	.word	0x08004160
 80007ec:	20000130 	.word	0x20000130
 80007f0:	08004164 	.word	0x08004164

080007f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fc5e 	bl	80040c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xb0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xb0>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xb0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <SystemClock_Config+0xb4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <SystemClock_Config+0xb4>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <SystemClock_Config+0xb4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4618      	mov	r0, r3
 8000862:	f000 ff9d 	bl	80017a0 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x7c>
		Error_Handler();
 800086c:	f000 fa08 	bl	8000c80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fa36 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xa6>
		Error_Handler();
 8000896:	f000 f9f3 	bl	8000c80 <Error_Handler>
	}
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART2_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008f0:	f002 f812 	bl	8002918 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80008fa:	f000 f9c1 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000018c 	.word	0x2000018c
 8000908:	40004400 	.word	0x40004400

0800090c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_USART3_UART_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000950:	f001 ffe2 	bl	8002918 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800095a:	f000 f991 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000214 	.word	0x20000214
 8000968:	40004800 	.word	0x40004800

0800096c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_GPIO_Init+0x2c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <MX_GPIO_Init+0x2c>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_GPIO_Init+0x2c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
	if (huart == &huart2) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a91      	ldr	r2, [pc, #580]	; (8000bec <HAL_UART_RxCpltCallback+0x250>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	f040 811a 	bne.w	8000be2 <HAL_UART_RxCpltCallback+0x246>
		//k = 0;
		//ch = ' ';

		HAL_UART_Receive_IT(&huart2, (uint8_t*) &ch, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	498f      	ldr	r1, [pc, #572]	; (8000bf0 <HAL_UART_RxCpltCallback+0x254>)
 80009b2:	488e      	ldr	r0, [pc, #568]	; (8000bec <HAL_UART_RxCpltCallback+0x250>)
 80009b4:	f002 f945 	bl	8002c42 <HAL_UART_Receive_IT>
		if (ch != '\n') {
 80009b8:	4b8d      	ldr	r3, [pc, #564]	; (8000bf0 <HAL_UART_RxCpltCallback+0x254>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	d00b      	beq.n	80009d8 <HAL_UART_RxCpltCallback+0x3c>
//			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
//			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 100);
			fromUART2[k] = ch;
 80009c0:	4b8c      	ldr	r3, [pc, #560]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a8a      	ldr	r2, [pc, #552]	; (8000bf0 <HAL_UART_RxCpltCallback+0x254>)
 80009c6:	7811      	ldrb	r1, [r2, #0]
 80009c8:	4a8b      	ldr	r2, [pc, #556]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 80009ca:	54d1      	strb	r1, [r2, r3]
			k++;
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	4a88      	ldr	r2, [pc, #544]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 80009d4:	6013      	str	r3, [r2, #0]
						(uint8_t*) "\rProgram ended from U.A.R.T.1",
						strlen("\rProgram ended from U.A.R.T.1"), 1000);
			}
		}
	}
}
 80009d6:	e104      	b.n	8000be2 <HAL_UART_RxCpltCallback+0x246>
			if (fromUART2[0] == 'q' && k == 1) {
 80009d8:	4b87      	ldr	r3, [pc, #540]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b71      	cmp	r3, #113	; 0x71
 80009de:	d106      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x52>
 80009e0:	4b84      	ldr	r3, [pc, #528]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d102      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x52>
				state = 2;
 80009e8:	4b84      	ldr	r3, [pc, #528]	; (8000bfc <HAL_UART_RxCpltCallback+0x260>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	601a      	str	r2, [r3, #0]
			if (state != 2) {
 80009ee:	4b83      	ldr	r3, [pc, #524]	; (8000bfc <HAL_UART_RxCpltCallback+0x260>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	f000 80e6 	beq.w	8000bc4 <HAL_UART_RxCpltCallback+0x228>
				if (isReady) {
 80009f8:	4b81      	ldr	r3, [pc, #516]	; (8000c00 <HAL_UART_RxCpltCallback+0x264>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8085 	beq.w	8000b0c <HAL_UART_RxCpltCallback+0x170>
					ch = ' ';
 8000a02:	4b7b      	ldr	r3, [pc, #492]	; (8000bf0 <HAL_UART_RxCpltCallback+0x254>)
 8000a04:	2220      	movs	r2, #32
 8000a06:	701a      	strb	r2, [r3, #0]
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000a08:	bf00      	nop
 8000a0a:	4b7e      	ldr	r3, [pc, #504]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a14:	2b40      	cmp	r3, #64	; 0x40
 8000a16:	d1f8      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0x6e>
					HAL_UART_Transmit(&huart3, (uint8_t*) "\r", 1, 100);
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	497a      	ldr	r1, [pc, #488]	; (8000c08 <HAL_UART_RxCpltCallback+0x26c>)
 8000a1e:	4879      	ldr	r0, [pc, #484]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a20:	f001 ffc8 	bl	80029b4 <HAL_UART_Transmit>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000a24:	bf00      	nop
 8000a26:	4b77      	ldr	r3, [pc, #476]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	2b40      	cmp	r3, #64	; 0x40
 8000a32:	d1f8      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x8a>
					HAL_UART_Transmit(&huart3, (uint8_t*) name2, strlen(name2),
 8000a34:	4875      	ldr	r0, [pc, #468]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000a36:	f7ff fbff 	bl	8000238 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a42:	4972      	ldr	r1, [pc, #456]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000a44:	486f      	ldr	r0, [pc, #444]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a46:	f001 ffb5 	bl	80029b4 <HAL_UART_Transmit>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000a4a:	bf00      	nop
 8000a4c:	4b6d      	ldr	r3, [pc, #436]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a56:	2b40      	cmp	r3, #64	; 0x40
 8000a58:	d1f8      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0xb0>
					HAL_UART_Transmit(&huart3, (uint8_t*) fromUART2, k, 1000);
 8000a5a:	4b66      	ldr	r3, [pc, #408]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	4964      	ldr	r1, [pc, #400]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000a66:	4867      	ldr	r0, [pc, #412]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a68:	f001 ffa4 	bl	80029b4 <HAL_UART_Transmit>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000a6c:	bf00      	nop
 8000a6e:	4b65      	ldr	r3, [pc, #404]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a78:	2b40      	cmp	r3, #64	; 0x40
 8000a7a:	d1f8      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0xd2>
					HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1, 100);
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4963      	ldr	r1, [pc, #396]	; (8000c10 <HAL_UART_RxCpltCallback+0x274>)
 8000a82:	4860      	ldr	r0, [pc, #384]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000a84:	f001 ff96 	bl	80029b4 <HAL_UART_Transmit>
					memset(fromUART2, 0, strlen(fromUART2));
 8000a88:	485b      	ldr	r0, [pc, #364]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000a8a:	f7ff fbd5 	bl	8000238 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	4858      	ldr	r0, [pc, #352]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000a96:	f003 fb15 	bl	80040c4 <memset>
					k = 0;
 8000a9a:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000aa0:	bf00      	nop
 8000aa2:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aac:	2b40      	cmp	r3, #64	; 0x40
 8000aae:	d1f8      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x106>
					HAL_UART_Transmit(&huart3, (uint8_t*) "\t", 1, 100);
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4957      	ldr	r1, [pc, #348]	; (8000c14 <HAL_UART_RxCpltCallback+0x278>)
 8000ab6:	4853      	ldr	r0, [pc, #332]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000ab8:	f001 ff7c 	bl	80029b4 <HAL_UART_Transmit>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000abc:	bf00      	nop
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac8:	2b40      	cmp	r3, #64	; 0x40
 8000aca:	d1f8      	bne.n	8000abe <HAL_UART_RxCpltCallback+0x122>
					HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name),
 8000acc:	4852      	ldr	r0, [pc, #328]	; (8000c18 <HAL_UART_RxCpltCallback+0x27c>)
 8000ace:	f7ff fbb3 	bl	8000238 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	494f      	ldr	r1, [pc, #316]	; (8000c18 <HAL_UART_RxCpltCallback+0x27c>)
 8000ada:	484a      	ldr	r0, [pc, #296]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000adc:	f001 ff6a 	bl	80029b4 <HAL_UART_Transmit>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000ae0:	bf00      	nop
 8000ae2:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aec:	2b40      	cmp	r3, #64	; 0x40
 8000aee:	d1f8      	bne.n	8000ae2 <HAL_UART_RxCpltCallback+0x146>
							strlen(fromUART3), 100);
 8000af0:	484a      	ldr	r0, [pc, #296]	; (8000c1c <HAL_UART_RxCpltCallback+0x280>)
 8000af2:	f7ff fba1 	bl	8000238 <strlen>
 8000af6:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart3, (uint8_t*) fromUART3,
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	2364      	movs	r3, #100	; 0x64
 8000afc:	4947      	ldr	r1, [pc, #284]	; (8000c1c <HAL_UART_RxCpltCallback+0x280>)
 8000afe:	4841      	ldr	r0, [pc, #260]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000b00:	f001 ff58 	bl	80029b4 <HAL_UART_Transmit>
					state = 1;
 8000b04:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <HAL_UART_RxCpltCallback+0x260>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
}
 8000b0a:	e06a      	b.n	8000be2 <HAL_UART_RxCpltCallback+0x246>
					for (int i = 0; i < strlen(fromUART2); i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e00a      	b.n	8000b28 <HAL_UART_RxCpltCallback+0x18c>
						name2[i + 1] = fromUART2[i];
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4938      	ldr	r1, [pc, #224]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	440a      	add	r2, r1
 8000b1c:	7811      	ldrb	r1, [r2, #0]
 8000b1e:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000b20:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < strlen(fromUART2); i++) {
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000b2a:	f7ff fb85 	bl	8000238 <strlen>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d8ed      	bhi.n	8000b12 <HAL_UART_RxCpltCallback+0x176>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000b36:	bf00      	nop
 8000b38:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	2b40      	cmp	r3, #64	; 0x40
 8000b44:	d1f8      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x19c>
					HAL_UART_Transmit(&huart3, (uint8_t*) name2, strlen(name2),
 8000b46:	4831      	ldr	r0, [pc, #196]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000b48:	f7ff fb76 	bl	8000238 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b54:	492d      	ldr	r1, [pc, #180]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000b58:	f001 ff2c 	bl	80029b4 <HAL_UART_Transmit>
					while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000b5c:	bf00      	nop
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b68:	2b40      	cmp	r3, #64	; 0x40
 8000b6a:	d1f8      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x1c2>
					HAL_UART_Transmit(&huart3, (uint8_t*) " is ready\n", 11,
 8000b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b70:	220b      	movs	r2, #11
 8000b72:	492b      	ldr	r1, [pc, #172]	; (8000c20 <HAL_UART_RxCpltCallback+0x284>)
 8000b74:	4823      	ldr	r0, [pc, #140]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000b76:	f001 ff1d 	bl	80029b4 <HAL_UART_Transmit>
					memset(fromUART2, 0, strlen(fromUART2));
 8000b7a:	481f      	ldr	r0, [pc, #124]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000b7c:	f7ff fb5c 	bl	8000238 <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <HAL_UART_RxCpltCallback+0x25c>)
 8000b88:	f003 fa9c 	bl	80040c4 <memset>
					name2[k + 1] = ' ';
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000b94:	2120      	movs	r1, #32
 8000b96:	54d1      	strb	r1, [r2, r3]
					name2[k + 2] = ':';
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000ba0:	213a      	movs	r1, #58	; 0x3a
 8000ba2:	54d1      	strb	r1, [r2, r3]
					name2[k + 3] = ' ';
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3303      	adds	r3, #3
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_UART_RxCpltCallback+0x270>)
 8000bac:	2120      	movs	r1, #32
 8000bae:	54d1      	strb	r1, [r2, r3]
					isReady = 1;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_UART_RxCpltCallback+0x264>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
					state = 1;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_UART_RxCpltCallback+0x260>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
					k = 0;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_UART_RxCpltCallback+0x258>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	e00e      	b.n	8000be2 <HAL_UART_RxCpltCallback+0x246>
				while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000bc4:	bf00      	nop
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd0:	2b40      	cmp	r3, #64	; 0x40
 8000bd2:	d1f8      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0x22a>
				HAL_UART_Transmit(&huart3,
 8000bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd8:	221d      	movs	r2, #29
 8000bda:	4912      	ldr	r1, [pc, #72]	; (8000c24 <HAL_UART_RxCpltCallback+0x288>)
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_UART_RxCpltCallback+0x268>)
 8000bde:	f001 fee9 	bl	80029b4 <HAL_UART_Transmit>
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000018c 	.word	0x2000018c
 8000bf0:	20000065 	.word	0x20000065
 8000bf4:	200002a4 	.word	0x200002a4
 8000bf8:	200000cc 	.word	0x200000cc
 8000bfc:	200002a0 	.word	0x200002a0
 8000c00:	2000029c 	.word	0x2000029c
 8000c04:	20000214 	.word	0x20000214
 8000c08:	08004184 	.word	0x08004184
 8000c0c:	20000068 	.word	0x20000068
 8000c10:	08004188 	.word	0x08004188
 8000c14:	08004160 	.word	0x08004160
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000130 	.word	0x20000130
 8000c20:	0800418c 	.word	0x0800418c
 8000c24:	08004198 	.word	0x08004198

08000c28 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000c3a:	f000 faf7 	bl	800122c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000c4e:	2387      	movs	r3, #135	; 0x87
 8000c50:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c56:	2300      	movs	r3, #0
 8000c58:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fb15 	bl	800129c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c72:	2004      	movs	r0, #4
 8000c74:	f000 faf2 	bl	800125c <HAL_MPU_Enable>

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f000 fa70 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b0      	sub	sp, #192	; 0xc0
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cdc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2290      	movs	r2, #144	; 0x90
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 f9e5 	bl	80040c4 <memset>
	if (huart->Instance == USART2) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <HAL_UART_MspInit+0x144>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d143      	bne.n	8000d8c <HAL_UART_MspInit+0xb8>

		/* USER CODE END USART2_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	61fb      	str	r3, [r7, #28]
		PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	667b      	str	r3, [r7, #100]	; 0x64
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 f9d9 	bl	80020c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 8000d1c:	f7ff ffb0 	bl	8000c80 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a3d      	ldr	r2, [pc, #244]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a37      	ldr	r2, [pc, #220]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
		/**USART2 GPIO Configuration
		 PD5     ------> USART2_TX
		 PD6     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000d50:	2360      	movs	r3, #96	; 0x60
 8000d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d72:	4619      	mov	r1, r3
 8000d74:	482a      	ldr	r0, [pc, #168]	; (8000e20 <HAL_UART_MspInit+0x14c>)
 8000d76:	f000 fb67 	bl	8001448 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	2026      	movs	r0, #38	; 0x26
 8000d80:	f000 fa1d 	bl	80011be <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d84:	2026      	movs	r0, #38	; 0x26
 8000d86:	f000 fa36 	bl	80011f6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8000d8a:	e041      	b.n	8000e10 <HAL_UART_MspInit+0x13c>
	} else if (huart->Instance == USART3) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <HAL_UART_MspInit+0x150>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d13c      	bne.n	8000e10 <HAL_UART_MspInit+0x13c>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	61fb      	str	r3, [r7, #28]
		PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66bb      	str	r3, [r7, #104]	; 0x68
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 f98f 	bl	80020c8 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0xe0>
			Error_Handler();
 8000db0:	f7ff ff66 	bl	8000c80 <Error_Handler>
		__HAL_RCC_USART3_CLK_ENABLE();
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_UART_MspInit+0x148>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_UART_MspInit+0x14c>)
 8000e0c:	f000 fb1c 	bl	8001448 <HAL_GPIO_Init>
}
 8000e10:	bf00      	nop
 8000e12:	37c0      	adds	r7, #192	; 0xc0
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40004800 	.word	0x40004800

08000e28 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000e74:	f000 f884 	bl	8000f80 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <USART2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <USART2_IRQHandler+0x10>)
 8000e82:	f001 ff23 	bl	8002ccc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000018c 	.word	0x2000018c

08000e90 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f003 f8f7 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb2d 	bl	8000544 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000ef8:	080041e0 	.word	0x080041e0
  ldr r2, =_sbss
 8000efc:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000f00:	200002ac 	.word	0x200002ac

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>

08000f06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f000 f94c 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f805 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f16:	f7ff feb9 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f967 	bl	8001212 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f92f 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000164 	.word	0x20000164
 8000f78:	2000016c 	.word	0x2000016c
 8000f7c:	20000168 	.word	0x20000168

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2000016c 	.word	0x2000016c
 8000fa4:	200002a8 	.word	0x200002a8

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200002a8 	.word	0x200002a8

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000016c 	.word	0x2000016c

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <__NVIC_SetPriorityGrouping+0x40>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	4313      	orrs	r3, r2
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x40>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	05fa0000 	.word	0x05fa0000

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001230:	f3bf 8f5f 	dmb	sy
}
 8001234:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_MPU_Disable+0x28>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_MPU_Disable+0x28>)
 800123c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001240:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_MPU_Disable+0x2c>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	e000ed90 	.word	0xe000ed90

0800125c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001264:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <HAL_MPU_Enable+0x38>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_MPU_Enable+0x3c>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_MPU_Enable+0x3c>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800127a:	f3bf 8f4f 	dsb	sy
}
 800127e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001280:	f3bf 8f6f 	isb	sy
}
 8001284:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed90 	.word	0xe000ed90
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	785a      	ldrb	r2, [r3, #1]
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_MPU_ConfigRegion+0x84>)
 80012aa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d029      	beq.n	8001308 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80012b4:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_MPU_ConfigRegion+0x84>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7b1b      	ldrb	r3, [r3, #12]
 80012c0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7adb      	ldrb	r3, [r3, #11]
 80012c6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7a9b      	ldrb	r3, [r3, #10]
 80012ce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7b5b      	ldrb	r3, [r3, #13]
 80012d6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7b9b      	ldrb	r3, [r3, #14]
 80012de:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7bdb      	ldrb	r3, [r3, #15]
 80012e6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7a5b      	ldrb	r3, [r3, #9]
 80012ee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7a1b      	ldrb	r3, [r3, #8]
 80012f6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012f8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001302:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001304:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001306:	e005      	b.n	8001314 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_MPU_ConfigRegion+0x84>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_MPU_ConfigRegion+0x84>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed90 	.word	0xe000ed90

08001324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001332:	f7ff fe39 	bl	8000fa8 <HAL_GetTick>
 8001336:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e052      	b.n	80013fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0216 	bic.w	r2, r2, #22
 8001364:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695a      	ldr	r2, [r3, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001374:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <HAL_DMA_Abort+0x62>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0208 	bic.w	r2, r2, #8
 8001394:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a6:	e013      	b.n	80013d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a8:	f7ff fdfe 	bl	8000fa8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d90c      	bls.n	80013d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e015      	b.n	80013fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e4      	bne.n	80013a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e2:	223f      	movs	r2, #63	; 0x3f
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d004      	beq.n	8001422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00c      	b.n	800143c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e175      	b.n	8001754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8164 	bne.w	800174e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d005      	beq.n	800149e <HAL_GPIO_Init+0x56>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d130      	bne.n	8001500 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b03      	cmp	r3, #3
 800150a:	d017      	beq.n	800153c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80be 	beq.w	800174e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_GPIO_Init+0x324>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_GPIO_Init+0x324>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_GPIO_Init+0x324>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015ea:	4a61      	ldr	r2, [pc, #388]	; (8001770 <HAL_GPIO_Init+0x328>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_GPIO_Init+0x32c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d037      	beq.n	8001686 <HAL_GPIO_Init+0x23e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x330>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d031      	beq.n	8001682 <HAL_GPIO_Init+0x23a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_GPIO_Init+0x334>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x236>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x338>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x232>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x33c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a53      	ldr	r2, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x340>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x22a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_GPIO_Init+0x344>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x226>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_GPIO_Init+0x348>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x222>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_GPIO_Init+0x34c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x21e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <HAL_GPIO_Init+0x350>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x21a>
 800165e:	2309      	movs	r3, #9
 8001660:	e012      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001662:	230a      	movs	r3, #10
 8001664:	e010      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001666:	2308      	movs	r3, #8
 8001668:	e00e      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166a:	2307      	movs	r3, #7
 800166c:	e00c      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166e:	2306      	movs	r3, #6
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001672:	2305      	movs	r3, #5
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	; (8001770 <HAL_GPIO_Init+0x328>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_GPIO_Init+0x354>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <HAL_GPIO_Init+0x354>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_GPIO_Init+0x354>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <HAL_GPIO_Init+0x354>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_GPIO_Init+0x354>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_GPIO_Init+0x354>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_GPIO_Init+0x354>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_GPIO_Init+0x354>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f ae86 	bls.w	8001468 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40022400 	.word	0x40022400
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e29b      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d0:	4b93      	ldr	r3, [pc, #588]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
 80017dc:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b8d      	ldr	r3, [pc, #564]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x130>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d168      	bne.n	80018d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e275      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x7a>
 800180c:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a83      	ldr	r2, [pc, #524]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x9c>
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7b      	ldr	r2, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xc0>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6b      	ldr	r2, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fb92 	bl	8000fa8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fb8e 	bl	8000fa8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e229      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb7e 	bl	8000fa8 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fb7a 	bl	8000fa8 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e215      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x110>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d069      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x190>
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1e9      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	493d      	ldr	r1, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e040      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb30 	bl	8000fa8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fb2c 	bl	8000fa8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1c7      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4929      	ldr	r1, [pc, #164]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
 800197e:	e018      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb0c 	bl	8000fa8 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fb08 	bl	8000fa8 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1a3      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d038      	beq.n	8001a30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff fae9 	bl	8000fa8 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fae5 	bl	8000fa8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e180      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x23a>
 80019f8:	e01a      	b.n	8001a30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff facf 	bl	8000fa8 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff facb 	bl	8000fa8 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d903      	bls.n	8001a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e166      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
 8001a20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a4 	beq.w	8001b86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a88      	ldr	r2, [pc, #544]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b86      	ldr	r3, [pc, #536]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a66:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a72:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fa93 	bl	8000fa8 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff fa8f 	bl	8000fa8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e12a      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a98:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x31a>
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a6f      	ldr	r2, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x33c>
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a67      	ldr	r2, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x35e>
 8001ae4:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a61      	ldr	r2, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a5e      	ldr	r2, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a5b      	ldr	r2, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fa43 	bl	8000fa8 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff fa3f 	bl	8000fa8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0d8      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ee      	beq.n	8001b26 <HAL_RCC_OscConfig+0x386>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa2d 	bl	8000fa8 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fa29 	bl	8000fa8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0c2      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a3c      	ldr	r2, [pc, #240]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80ae 	beq.w	8001cec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d06d      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d14b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a31      	ldr	r2, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f9fa 	bl	8000fa8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f9f6 	bl	8000fa8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e091      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	071b      	lsls	r3, r3, #28
 8001c02:	491b      	ldr	r1, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f9c8 	bl	8000fa8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f9c4 	bl	8000fa8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e05f      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x47c>
 8001c3a:	e057      	b.n	8001cec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f9ae 	bl	8000fa8 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f9aa 	bl	8000fa8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e045      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4b0>
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x54c>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <HAL_RCC_OscConfig+0x558>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d030      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d129      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d122      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d119      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	4965      	ldr	r1, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d040      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e073      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06b      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4936      	ldr	r1, [pc, #216]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df0:	f7ff f8da 	bl	8000fa8 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff f8d6 	bl	8000fa8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e053      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 020f 	bic.w	r2, r3, #15
 8001e36:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1d0>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f836 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	080041b8 	.word	0x080041b8
 8001ecc:	20000164 	.word	0x20000164
 8001ed0:	20000168 	.word	0x20000168

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed8:	b090      	sub	sp, #64	; 0x40
 8001eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d00d      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	f200 80a1 	bhi.w	8002040 <HAL_RCC_GetSysClockFreq+0x16c>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x34>
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f06:	e09b      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f0c:	e09b      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0e:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f12:	e098      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d028      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	2200      	movs	r2, #0
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	627a      	str	r2, [r7, #36]	; 0x24
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f40:	fb03 f201 	mul.w	r2, r3, r1
 8001f44:	2300      	movs	r3, #0
 8001f46:	fb00 f303 	mul.w	r3, r0, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a43      	ldr	r2, [pc, #268]	; (800205c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f54:	460a      	mov	r2, r1
 8001f56:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5a:	4413      	add	r3, r2
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	2200      	movs	r2, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	61fa      	str	r2, [r7, #28]
 8001f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f6e:	f7fe f96b 	bl	8000248 <__aeabi_uldivmod>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4613      	mov	r3, r2
 8001f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7a:	e053      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	2200      	movs	r2, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	617a      	str	r2, [r7, #20]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f8e:	f04f 0b00 	mov.w	fp, #0
 8001f92:	4652      	mov	r2, sl
 8001f94:	465b      	mov	r3, fp
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	f04f 0100 	mov.w	r1, #0
 8001f9e:	0159      	lsls	r1, r3, #5
 8001fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa4:	0150      	lsls	r0, r2, #5
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	ebb2 080a 	subs.w	r8, r2, sl
 8001fae:	eb63 090b 	sbc.w	r9, r3, fp
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fc6:	ebb2 0408 	subs.w	r4, r2, r8
 8001fca:	eb63 0509 	sbc.w	r5, r3, r9
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	00eb      	lsls	r3, r5, #3
 8001fd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fdc:	00e2      	lsls	r2, r4, #3
 8001fde:	4614      	mov	r4, r2
 8001fe0:	461d      	mov	r5, r3
 8001fe2:	eb14 030a 	adds.w	r3, r4, sl
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	eb45 030b 	adc.w	r3, r5, fp
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	028b      	lsls	r3, r1, #10
 8001ffe:	4621      	mov	r1, r4
 8002000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002004:	4621      	mov	r1, r4
 8002006:	028a      	lsls	r2, r1, #10
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200e:	2200      	movs	r2, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	60fa      	str	r2, [r7, #12]
 8002014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002018:	f7fe f916 	bl	8000248 <__aeabi_uldivmod>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4613      	mov	r3, r2
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_GetSysClockFreq+0x180>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800203e:	e002      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetSysClockFreq+0x184>)
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002048:	4618      	mov	r0, r3
 800204a:	3740      	adds	r7, #64	; 0x40
 800204c:	46bd      	mov	sp, r7
 800204e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	00f42400 	.word	0x00f42400
 800205c:	017d7840 	.word	0x017d7840

08002060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_GetHCLKFreq+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000164 	.word	0x20000164

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800207c:	f7ff fff0 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	080041c8 	.word	0x080041c8

080020a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a4:	f7ff ffdc 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0b5b      	lsrs	r3, r3, #13
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	080041c8 	.word	0x080041c8

080020c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d012      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f0:	4b69      	ldr	r3, [pc, #420]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a68      	ldr	r2, [pc, #416]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	4964      	ldr	r1, [pc, #400]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d017      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	4959      	ldr	r1, [pc, #356]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d017      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800215e:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	494a      	ldr	r1, [pc, #296]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 808b 	beq.w	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	4a39      	ldr	r2, [pc, #228]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	; 0x40
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a34      	ldr	r2, [pc, #208]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe feea 	bl	8000fa8 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7fe fee6 	bl	8000fa8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e38f      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d035      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d02e      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d114      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe feae 	bl	8000fa8 <HAL_GetTick>
 800224c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7fe feaa 	bl	8000fa8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e351      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ee      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800227e:	d111      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800228e:	400b      	ands	r3, r1
 8002290:	4901      	ldr	r1, [pc, #4]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
 8002296:	e00b      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	0ffffcff 	.word	0x0ffffcff
 80022a4:	4bac      	ldr	r3, [pc, #688]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4aab      	ldr	r2, [pc, #684]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	4ba9      	ldr	r3, [pc, #676]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	49a6      	ldr	r1, [pc, #664]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ce:	4ba2      	ldr	r3, [pc, #648]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d4:	4aa0      	ldr	r2, [pc, #640]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022de:	4b9e      	ldr	r3, [pc, #632]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	499b      	ldr	r1, [pc, #620]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fc:	4b96      	ldr	r3, [pc, #600]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230a:	4993      	ldr	r1, [pc, #588]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800231e:	4b8e      	ldr	r3, [pc, #568]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800232c:	498a      	ldr	r1, [pc, #552]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002340:	4b85      	ldr	r3, [pc, #532]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234e:	4982      	ldr	r1, [pc, #520]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	4979      	ldr	r1, [pc, #484]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4971      	ldr	r1, [pc, #452]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f023 020c 	bic.w	r2, r3, #12
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	4968      	ldr	r1, [pc, #416]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c8:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	4960      	ldr	r1, [pc, #384]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ea:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f8:	4957      	ldr	r1, [pc, #348]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800240c:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	494f      	ldr	r1, [pc, #316]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	4946      	ldr	r1, [pc, #280]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	493e      	ldr	r1, [pc, #248]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	4935      	ldr	r1, [pc, #212]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a2:	492d      	ldr	r1, [pc, #180]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d011      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c4:	4924      	ldr	r1, [pc, #144]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	4914      	ldr	r1, [pc, #80]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002528:	490b      	ldr	r1, [pc, #44]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254c:	4902      	ldr	r1, [pc, #8]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002554:	e002      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002568:	4b8a      	ldr	r3, [pc, #552]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	4986      	ldr	r1, [pc, #536]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800258c:	4b81      	ldr	r3, [pc, #516]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002592:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800259c:	497d      	ldr	r1, [pc, #500]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d006      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80d6 	beq.w	8002764 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025b8:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a75      	ldr	r2, [pc, #468]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fcf0 	bl	8000fa8 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025cc:	f7fe fcec 	bl	8000fa8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e195      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025de:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d021      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11d      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800260c:	4b61      	ldr	r3, [pc, #388]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002612:	0e1b      	lsrs	r3, r3, #24
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	019a      	lsls	r2, r3, #6
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	4958      	ldr	r1, [pc, #352]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02e      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002664:	d129      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002666:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267a:	0f1b      	lsrs	r3, r3, #28
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	019a      	lsls	r2, r3, #6
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	493e      	ldr	r1, [pc, #248]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026a2:	4b3c      	ldr	r3, [pc, #240]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a8:	f023 021f 	bic.w	r2, r3, #31
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	3b01      	subs	r3, #1
 80026b2:	4938      	ldr	r1, [pc, #224]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01d      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c6:	4b33      	ldr	r3, [pc, #204]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026da:	0f1b      	lsrs	r3, r3, #28
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	4926      	ldr	r1, [pc, #152]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d011      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	071b      	lsls	r3, r3, #28
 800272a:	491a      	ldr	r1, [pc, #104]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273e:	f7fe fc33 	bl	8000fa8 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002746:	f7fe fc2f 	bl	8000fa8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	; 0x64
 8002752:	d901      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0d8      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 80ce 	bne.w	8002908 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe fc16 	bl	8000fa8 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800277e:	e00b      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002780:	f7fe fc12 	bl	8000fa8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d904      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0bb      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002798:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a4:	d0ec      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02e      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d12a      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	0f1b      	lsrs	r3, r3, #28
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	019a      	lsls	r2, r3, #6
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	4944      	ldr	r1, [pc, #272]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	493d      	ldr	r1, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d022      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002838:	d11d      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	0e1b      	lsrs	r3, r3, #24
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	0f1b      	lsrs	r3, r3, #28
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	019a      	lsls	r2, r3, #6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	4929      	ldr	r1, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d028      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	0e1b      	lsrs	r3, r3, #24
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	019a      	lsls	r2, r3, #6
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	4917      	ldr	r1, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4911      	ldr	r1, [pc, #68]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7fe fb62 	bl	8000fa8 <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028e8:	f7fe fb5e 	bl	8000fa8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e007      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002906:	d1ef      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e040      	b.n	80029ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f9ca 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fcca 	bl	80032f0 <UART_SetConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 ff22 	bl	80037b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 ffa9 	bl	80038fc <UART_CheckIdleState>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d171      	bne.n	8002ab0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_UART_Transmit+0x24>
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e06a      	b.n	8002ab2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	; 0x21
 80029e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ea:	f7fe fadd 	bl	8000fa8 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d108      	bne.n	8002a1c <HAL_UART_Transmit+0x68>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e003      	b.n	8002a24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a24:	e02c      	b.n	8002a80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 ffb0 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e038      	b.n	8002ab2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e007      	b.n	8002a6e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1cc      	bne.n	8002a26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 ff7d 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e005      	b.n	8002ab2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b08a      	sub	sp, #40	; 0x28
 8002abe:	af02      	add	r7, sp, #8
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	f040 80b1 	bne.w	8002c38 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_UART_Receive+0x28>
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0a9      	b.n	8002c3a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2222      	movs	r2, #34	; 0x22
 8002af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fa54 	bl	8000fa8 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	d10e      	bne.n	8002b3a <HAL_UART_Receive+0x80>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_UART_Receive+0x76>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b2e:	e02d      	b.n	8002b8c <HAL_UART_Receive+0xd2>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	22ff      	movs	r2, #255	; 0xff
 8002b34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b38:	e028      	b.n	8002b8c <HAL_UART_Receive+0xd2>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_UART_Receive+0xa4>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <HAL_UART_Receive+0x9a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	; 0xff
 8002b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b52:	e01b      	b.n	8002b8c <HAL_UART_Receive+0xd2>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	227f      	movs	r2, #127	; 0x7f
 8002b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b5c:	e016      	b.n	8002b8c <HAL_UART_Receive+0xd2>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b66:	d10d      	bne.n	8002b84 <HAL_UART_Receive+0xca>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_UART_Receive+0xc0>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	227f      	movs	r2, #127	; 0x7f
 8002b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b78:	e008      	b.n	8002b8c <HAL_UART_Receive+0xd2>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b82:	e003      	b.n	8002b8c <HAL_UART_Receive+0xd2>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d108      	bne.n	8002bb0 <HAL_UART_Receive+0xf6>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e003      	b.n	8002bb8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bb8:	e032      	b.n	8002c20 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fee6 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e032      	b.n	8002c3a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	8a7b      	ldrh	r3, [r7, #18]
 8002be4:	4013      	ands	r3, r2
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e00c      	b.n	8002c0e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8a7b      	ldrh	r3, [r7, #18]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4013      	ands	r3, r2
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c6      	bne.n	8002bba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b08a      	sub	sp, #40	; 0x28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d132      	bne.n	8002cc0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_Receive_IT+0x24>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02b      	b.n	8002cc2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	69f9      	ldr	r1, [r7, #28]
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	e841 2300 	strex	r3, r2, [r1]
 8002ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e6      	bne.n	8002c7e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 ff34 	bl	8003b24 <UART_Start_Receive_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3728      	adds	r7, #40	; 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ba      	sub	sp, #232	; 0xe8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d115      	bne.n	8002d34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00f      	beq.n	8002d34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 82ac 	beq.w	8003282 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
      }
      return;
 8002d32:	e2a6      	b.n	8003282 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8117 	beq.w	8002f6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d4e:	4b85      	ldr	r3, [pc, #532]	; (8002f64 <HAL_UART_IRQHandler+0x298>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 810a 	beq.w	8002f6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <HAL_UART_IRQHandler+0xbc>
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_UART_IRQHandler+0xec>
 8002d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2202      	movs	r2, #2
 8002da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dae:	f043 0204 	orr.w	r2, r3, #4
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d011      	beq.n	8002de8 <HAL_UART_IRQHandler+0x11c>
 8002dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1a:	f043 0208 	orr.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <HAL_UART_IRQHandler+0x18a>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8212 	beq.w	8003286 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04f      	beq.n	8002f4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fefe 	bl	8003cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d141      	bne.n	8002f46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002efa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1d9      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d013      	beq.n	8002f3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_UART_IRQHandler+0x29c>)
 8002f1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fa6e 	bl	8001404 <HAL_DMA_Abort_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d017      	beq.n	8002f5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e00f      	b.n	8002f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9b6 	bl	80032b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	e00b      	b.n	8002f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9b2 	bl	80032b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9ae 	bl	80032b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f5c:	e193      	b.n	8003286 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5e:	bf00      	nop
    return;
 8002f60:	e191      	b.n	8003286 <HAL_UART_IRQHandler+0x5ba>
 8002f62:	bf00      	nop
 8002f64:	04000120 	.word	0x04000120
 8002f68:	08003d79 	.word	0x08003d79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 814c 	bne.w	800320e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8145 	beq.w	800320e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 813e 	beq.w	800320e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2210      	movs	r2, #16
 8002f98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	f040 80b6 	bne.w	8003116 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8165 	beq.w	800328a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f080 815d 	bcs.w	800328a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	f000 8086 	beq.w	80030f4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003016:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800301e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1da      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3308      	adds	r3, #8
 8003038:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003056:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800305a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800305e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e1      	bne.n	8003032 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3308      	adds	r3, #8
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800307e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003092:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003094:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e3      	bne.n	800306e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c4:	f023 0310 	bic.w	r3, r3, #16
 80030c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80030d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e4      	bne.n	80030b4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f918 	bl	8001324 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003106:	b29b      	uxth	r3, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8d8 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003114:	e0b9      	b.n	800328a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003122:	b29b      	uxth	r3, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80ab 	beq.w	800328e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a6 	beq.w	800328e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
 8003166:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800316a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e4      	bne.n	8003142 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3308      	adds	r3, #8
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	623b      	str	r3, [r7, #32]
   return(result);
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3308      	adds	r3, #8
 8003198:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800319c:	633a      	str	r2, [r7, #48]	; 0x30
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e3      	bne.n	8003178 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f023 0310 	bic.w	r3, r3, #16
 80031d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	69b9      	ldr	r1, [r7, #24]
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	617b      	str	r3, [r7, #20]
   return(result);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e4      	bne.n	80031c4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f85c 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800320c:	e03f      	b.n	800328e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <HAL_UART_IRQHandler+0x56c>
 800321a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800322e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f853 	bl	80032dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003236:	e02d      	b.n	8003294 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
    }
    return;
 8003260:	e017      	b.n	8003292 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <HAL_UART_IRQHandler+0x5c8>
 800326e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fd92 	bl	8003da4 <UART_EndTransmit_IT>
    return;
 8003280:	e008      	b.n	8003294 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003282:	bf00      	nop
 8003284:	e006      	b.n	8003294 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <HAL_UART_IRQHandler+0x5c8>
      return;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_UART_IRQHandler+0x5c8>
      return;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003292:	bf00      	nop
  }

}
 8003294:	37e8      	adds	r7, #232	; 0xe8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop

0800329c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4ba6      	ldr	r3, [pc, #664]	; (80035b4 <UART_SetConfig+0x2c4>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	430b      	orrs	r3, r1
 8003326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a94      	ldr	r2, [pc, #592]	; (80035b8 <UART_SetConfig+0x2c8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d120      	bne.n	80033ae <UART_SetConfig+0xbe>
 800336c:	4b93      	ldr	r3, [pc, #588]	; (80035bc <UART_SetConfig+0x2cc>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d816      	bhi.n	80033a8 <UART_SetConfig+0xb8>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x90>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	0800339d 	.word	0x0800339d
 8003388:	08003397 	.word	0x08003397
 800338c:	080033a3 	.word	0x080033a3
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e150      	b.n	8003638 <UART_SetConfig+0x348>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e14d      	b.n	8003638 <UART_SetConfig+0x348>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e14a      	b.n	8003638 <UART_SetConfig+0x348>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e147      	b.n	8003638 <UART_SetConfig+0x348>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e144      	b.n	8003638 <UART_SetConfig+0x348>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a83      	ldr	r2, [pc, #524]	; (80035c0 <UART_SetConfig+0x2d0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d132      	bne.n	800341e <UART_SetConfig+0x12e>
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <UART_SetConfig+0x2cc>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d828      	bhi.n	8003418 <UART_SetConfig+0x128>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0xdc>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003419 	.word	0x08003419
 80033d4:	08003419 	.word	0x08003419
 80033d8:	08003419 	.word	0x08003419
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003407 	.word	0x08003407
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003419 	.word	0x08003419
 80033fc:	08003413 	.word	0x08003413
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e118      	b.n	8003638 <UART_SetConfig+0x348>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e115      	b.n	8003638 <UART_SetConfig+0x348>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e112      	b.n	8003638 <UART_SetConfig+0x348>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e10f      	b.n	8003638 <UART_SetConfig+0x348>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e10c      	b.n	8003638 <UART_SetConfig+0x348>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a68      	ldr	r2, [pc, #416]	; (80035c4 <UART_SetConfig+0x2d4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d120      	bne.n	800346a <UART_SetConfig+0x17a>
 8003428:	4b64      	ldr	r3, [pc, #400]	; (80035bc <UART_SetConfig+0x2cc>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d013      	beq.n	800345e <UART_SetConfig+0x16e>
 8003436:	2b30      	cmp	r3, #48	; 0x30
 8003438:	d814      	bhi.n	8003464 <UART_SetConfig+0x174>
 800343a:	2b20      	cmp	r3, #32
 800343c:	d009      	beq.n	8003452 <UART_SetConfig+0x162>
 800343e:	2b20      	cmp	r3, #32
 8003440:	d810      	bhi.n	8003464 <UART_SetConfig+0x174>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <UART_SetConfig+0x15c>
 8003446:	2b10      	cmp	r3, #16
 8003448:	d006      	beq.n	8003458 <UART_SetConfig+0x168>
 800344a:	e00b      	b.n	8003464 <UART_SetConfig+0x174>
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e0f2      	b.n	8003638 <UART_SetConfig+0x348>
 8003452:	2302      	movs	r3, #2
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e0ef      	b.n	8003638 <UART_SetConfig+0x348>
 8003458:	2304      	movs	r3, #4
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e0ec      	b.n	8003638 <UART_SetConfig+0x348>
 800345e:	2308      	movs	r3, #8
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e0e9      	b.n	8003638 <UART_SetConfig+0x348>
 8003464:	2310      	movs	r3, #16
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e0e6      	b.n	8003638 <UART_SetConfig+0x348>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a56      	ldr	r2, [pc, #344]	; (80035c8 <UART_SetConfig+0x2d8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d120      	bne.n	80034b6 <UART_SetConfig+0x1c6>
 8003474:	4b51      	ldr	r3, [pc, #324]	; (80035bc <UART_SetConfig+0x2cc>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800347e:	2bc0      	cmp	r3, #192	; 0xc0
 8003480:	d013      	beq.n	80034aa <UART_SetConfig+0x1ba>
 8003482:	2bc0      	cmp	r3, #192	; 0xc0
 8003484:	d814      	bhi.n	80034b0 <UART_SetConfig+0x1c0>
 8003486:	2b80      	cmp	r3, #128	; 0x80
 8003488:	d009      	beq.n	800349e <UART_SetConfig+0x1ae>
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d810      	bhi.n	80034b0 <UART_SetConfig+0x1c0>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <UART_SetConfig+0x1a8>
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d006      	beq.n	80034a4 <UART_SetConfig+0x1b4>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x1c0>
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e0cc      	b.n	8003638 <UART_SetConfig+0x348>
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e0c9      	b.n	8003638 <UART_SetConfig+0x348>
 80034a4:	2304      	movs	r3, #4
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e0c6      	b.n	8003638 <UART_SetConfig+0x348>
 80034aa:	2308      	movs	r3, #8
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e0c3      	b.n	8003638 <UART_SetConfig+0x348>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0c0      	b.n	8003638 <UART_SetConfig+0x348>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a44      	ldr	r2, [pc, #272]	; (80035cc <UART_SetConfig+0x2dc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <UART_SetConfig+0x21c>
 80034c0:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <UART_SetConfig+0x2cc>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d017      	beq.n	8003500 <UART_SetConfig+0x210>
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d817      	bhi.n	8003506 <UART_SetConfig+0x216>
 80034d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034da:	d00b      	beq.n	80034f4 <UART_SetConfig+0x204>
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d811      	bhi.n	8003506 <UART_SetConfig+0x216>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <UART_SetConfig+0x1fe>
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d006      	beq.n	80034fa <UART_SetConfig+0x20a>
 80034ec:	e00b      	b.n	8003506 <UART_SetConfig+0x216>
 80034ee:	2300      	movs	r3, #0
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e0a1      	b.n	8003638 <UART_SetConfig+0x348>
 80034f4:	2302      	movs	r3, #2
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e09e      	b.n	8003638 <UART_SetConfig+0x348>
 80034fa:	2304      	movs	r3, #4
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e09b      	b.n	8003638 <UART_SetConfig+0x348>
 8003500:	2308      	movs	r3, #8
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e098      	b.n	8003638 <UART_SetConfig+0x348>
 8003506:	2310      	movs	r3, #16
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e095      	b.n	8003638 <UART_SetConfig+0x348>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <UART_SetConfig+0x2e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d125      	bne.n	8003562 <UART_SetConfig+0x272>
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <UART_SetConfig+0x2cc>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003524:	d017      	beq.n	8003556 <UART_SetConfig+0x266>
 8003526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352a:	d817      	bhi.n	800355c <UART_SetConfig+0x26c>
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d00b      	beq.n	800354a <UART_SetConfig+0x25a>
 8003532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003536:	d811      	bhi.n	800355c <UART_SetConfig+0x26c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <UART_SetConfig+0x254>
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d006      	beq.n	8003550 <UART_SetConfig+0x260>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x26c>
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e076      	b.n	8003638 <UART_SetConfig+0x348>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e073      	b.n	8003638 <UART_SetConfig+0x348>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e070      	b.n	8003638 <UART_SetConfig+0x348>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e06d      	b.n	8003638 <UART_SetConfig+0x348>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e06a      	b.n	8003638 <UART_SetConfig+0x348>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <UART_SetConfig+0x2e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d138      	bne.n	80035de <UART_SetConfig+0x2ee>
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <UART_SetConfig+0x2cc>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800357a:	d017      	beq.n	80035ac <UART_SetConfig+0x2bc>
 800357c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003580:	d82a      	bhi.n	80035d8 <UART_SetConfig+0x2e8>
 8003582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003586:	d00b      	beq.n	80035a0 <UART_SetConfig+0x2b0>
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358c:	d824      	bhi.n	80035d8 <UART_SetConfig+0x2e8>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <UART_SetConfig+0x2aa>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	d006      	beq.n	80035a6 <UART_SetConfig+0x2b6>
 8003598:	e01e      	b.n	80035d8 <UART_SetConfig+0x2e8>
 800359a:	2300      	movs	r3, #0
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e04b      	b.n	8003638 <UART_SetConfig+0x348>
 80035a0:	2302      	movs	r3, #2
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e048      	b.n	8003638 <UART_SetConfig+0x348>
 80035a6:	2304      	movs	r3, #4
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e045      	b.n	8003638 <UART_SetConfig+0x348>
 80035ac:	2308      	movs	r3, #8
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e042      	b.n	8003638 <UART_SetConfig+0x348>
 80035b2:	bf00      	nop
 80035b4:	efff69f3 	.word	0xefff69f3
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40004800 	.word	0x40004800
 80035c8:	40004c00 	.word	0x40004c00
 80035cc:	40005000 	.word	0x40005000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40007800 	.word	0x40007800
 80035d8:	2310      	movs	r3, #16
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e02c      	b.n	8003638 <UART_SetConfig+0x348>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a72      	ldr	r2, [pc, #456]	; (80037ac <UART_SetConfig+0x4bc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d125      	bne.n	8003634 <UART_SetConfig+0x344>
 80035e8:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <UART_SetConfig+0x4c0>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f6:	d017      	beq.n	8003628 <UART_SetConfig+0x338>
 80035f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035fc:	d817      	bhi.n	800362e <UART_SetConfig+0x33e>
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d00b      	beq.n	800361c <UART_SetConfig+0x32c>
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003608:	d811      	bhi.n	800362e <UART_SetConfig+0x33e>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <UART_SetConfig+0x326>
 800360e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003612:	d006      	beq.n	8003622 <UART_SetConfig+0x332>
 8003614:	e00b      	b.n	800362e <UART_SetConfig+0x33e>
 8003616:	2300      	movs	r3, #0
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e00d      	b.n	8003638 <UART_SetConfig+0x348>
 800361c:	2302      	movs	r3, #2
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e00a      	b.n	8003638 <UART_SetConfig+0x348>
 8003622:	2304      	movs	r3, #4
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e007      	b.n	8003638 <UART_SetConfig+0x348>
 8003628:	2308      	movs	r3, #8
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e004      	b.n	8003638 <UART_SetConfig+0x348>
 800362e:	2310      	movs	r3, #16
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e001      	b.n	8003638 <UART_SetConfig+0x348>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003640:	d15b      	bne.n	80036fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003642:	7ffb      	ldrb	r3, [r7, #31]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d828      	bhi.n	800369a <UART_SetConfig+0x3aa>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0x360>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003675 	.word	0x08003675
 8003654:	0800367d 	.word	0x0800367d
 8003658:	08003685 	.word	0x08003685
 800365c:	0800369b 	.word	0x0800369b
 8003660:	0800368b 	.word	0x0800368b
 8003664:	0800369b 	.word	0x0800369b
 8003668:	0800369b 	.word	0x0800369b
 800366c:	0800369b 	.word	0x0800369b
 8003670:	08003693 	.word	0x08003693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003674:	f7fe fd00 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003678:	61b8      	str	r0, [r7, #24]
        break;
 800367a:	e013      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7fe fd10 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 8003680:	61b8      	str	r0, [r7, #24]
        break;
 8003682:	e00f      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <UART_SetConfig+0x4c4>)
 8003686:	61bb      	str	r3, [r7, #24]
        break;
 8003688:	e00c      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368a:	f7fe fc23 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 800368e:	61b8      	str	r0, [r7, #24]
        break;
 8003690:	e008      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003696:	61bb      	str	r3, [r7, #24]
        break;
 8003698:	e004      	b.n	80036a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	77bb      	strb	r3, [r7, #30]
        break;
 80036a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d074      	beq.n	8003794 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d916      	bls.n	80036f4 <UART_SetConfig+0x404>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d212      	bcs.n	80036f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	89fa      	ldrh	r2, [r7, #14]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e04f      	b.n	8003794 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77bb      	strb	r3, [r7, #30]
 80036f8:	e04c      	b.n	8003794 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d828      	bhi.n	8003752 <UART_SetConfig+0x462>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <UART_SetConfig+0x418>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe fca4 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003730:	61b8      	str	r0, [r7, #24]
        break;
 8003732:	e013      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7fe fcb4 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 8003738:	61b8      	str	r0, [r7, #24]
        break;
 800373a:	e00f      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <UART_SetConfig+0x4c4>)
 800373e:	61bb      	str	r3, [r7, #24]
        break;
 8003740:	e00c      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7fe fbc7 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8003746:	61b8      	str	r0, [r7, #24]
        break;
 8003748:	e008      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374e:	61bb      	str	r3, [r7, #24]
        break;
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	77bb      	strb	r3, [r7, #30]
        break;
 800375a:	bf00      	nop
    }

    if (pclk != 0U)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	085a      	lsrs	r2, r3, #1
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d909      	bls.n	8003790 <UART_SetConfig+0x4a0>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003782:	d205      	bcs.n	8003790 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	e001      	b.n	8003794 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40007c00 	.word	0x40007c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	00f42400 	.word	0x00f42400

080037b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01a      	beq.n	80038ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d10a      	bne.n	80038ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800390c:	f7fd fb4c 	bl	8000fa8 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d10e      	bne.n	800393e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f831 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e027      	b.n	800398e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d10e      	bne.n	800396a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f81b 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e011      	b.n	800398e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b09c      	sub	sp, #112	; 0x70
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	e0a7      	b.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	f000 80a3 	beq.w	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd faf9 	bl	8000fa8 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80039c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d13f      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039dc:	667b      	str	r3, [r7, #100]	; 0x64
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e6      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3308      	adds	r3, #8
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	663b      	str	r3, [r7, #96]	; 0x60
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e068      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d050      	beq.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a64:	d148      	bne.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e6      	bne.n	8003a70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e010      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	f43f af48 	beq.w	80039a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3770      	adds	r7, #112	; 0x70
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b097      	sub	sp, #92	; 0x5c
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d10e      	bne.n	8003b76 <UART_Start_Receive_IT+0x52>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <UART_Start_Receive_IT+0x48>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b6a:	e02d      	b.n	8003bc8 <UART_Start_Receive_IT+0xa4>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b74:	e028      	b.n	8003bc8 <UART_Start_Receive_IT+0xa4>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10d      	bne.n	8003b9a <UART_Start_Receive_IT+0x76>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <UART_Start_Receive_IT+0x6c>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b8e:	e01b      	b.n	8003bc8 <UART_Start_Receive_IT+0xa4>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	227f      	movs	r2, #127	; 0x7f
 8003b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b98:	e016      	b.n	8003bc8 <UART_Start_Receive_IT+0xa4>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba2:	d10d      	bne.n	8003bc0 <UART_Start_Receive_IT+0x9c>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <UART_Start_Receive_IT+0x92>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	227f      	movs	r2, #127	; 0x7f
 8003bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb4:	e008      	b.n	8003bc8 <UART_Start_Receive_IT+0xa4>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	223f      	movs	r2, #63	; 0x3f
 8003bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bbe:	e003      	b.n	8003bc8 <UART_Start_Receive_IT+0xa4>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2222      	movs	r2, #34	; 0x22
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d107      	bne.n	8003c26 <UART_Start_Receive_IT+0x102>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <UART_Start_Receive_IT+0x184>)
 8003c22:	669a      	str	r2, [r3, #104]	; 0x68
 8003c24:	e002      	b.n	8003c2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <UART_Start_Receive_IT+0x188>)
 8003c2a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d019      	beq.n	8003c68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
 8003c54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e6      	bne.n	8003c34 <UART_Start_Receive_IT+0x110>
 8003c66:	e018      	b.n	8003c9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	613b      	str	r3, [r7, #16]
   return(result);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f043 0320 	orr.w	r3, r3, #32
 8003c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	69f9      	ldr	r1, [r7, #28]
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e6      	bne.n	8003c68 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	375c      	adds	r7, #92	; 0x5c
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	08003f5f 	.word	0x08003f5f
 8003cac:	08003df9 	.word	0x08003df9

08003cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b095      	sub	sp, #84	; 0x54
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3308      	adds	r3, #8
 8003d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d118      	bne.n	8003d58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f023 0310 	bic.w	r3, r3, #16
 8003d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	613b      	str	r3, [r7, #16]
   return(result);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e6      	bne.n	8003d26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d6c:	bf00      	nop
 8003d6e:	3754      	adds	r7, #84	; 0x54
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff fa8a 	bl	80032b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6979      	ldr	r1, [r7, #20]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fa56 	bl	800329c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df0:	bf00      	nop
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b096      	sub	sp, #88	; 0x58
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e10:	2b22      	cmp	r3, #34	; 0x22
 8003e12:	f040 8098 	bne.w	8003f46 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e20:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e24:	b2d9      	uxtb	r1, r3
 8003e26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	400a      	ands	r2, r1
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d17b      	bne.n	8003f56 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e72:	653b      	str	r3, [r7, #80]	; 0x50
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e6      	bne.n	8003e5e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb0:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d12e      	bne.n	8003f3e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0310 	bic.w	r3, r3, #16
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	69b9      	ldr	r1, [r7, #24]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	617b      	str	r3, [r7, #20]
   return(result);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d103      	bne.n	8003f2e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff f9c4 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f3c:	e00b      	b.n	8003f56 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fd2c 	bl	800099c <HAL_UART_RxCpltCallback>
}
 8003f44:	e007      	b.n	8003f56 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0208 	orr.w	r2, r2, #8
 8003f54:	619a      	str	r2, [r3, #24]
}
 8003f56:	bf00      	nop
 8003f58:	3758      	adds	r7, #88	; 0x58
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b096      	sub	sp, #88	; 0x58
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f76:	2b22      	cmp	r3, #34	; 0x22
 8003f78:	f040 8098 	bne.w	80040ac <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003f90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d17b      	bne.n	80040bc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e6      	bne.n	8003fc4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	61fb      	str	r3, [r7, #28]
   return(result);
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	2b01      	cmp	r3, #1
 8004044:	d12e      	bne.n	80040a4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	60bb      	str	r3, [r7, #8]
   return(result);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6979      	ldr	r1, [r7, #20]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	613b      	str	r3, [r7, #16]
   return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e6      	bne.n	800404c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d103      	bne.n	8004094 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2210      	movs	r2, #16
 8004092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff f911 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040a2:	e00b      	b.n	80040bc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fc fc79 	bl	800099c <HAL_UART_RxCpltCallback>
}
 80040aa:	e007      	b.n	80040bc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]
}
 80040bc:	bf00      	nop
 80040be:	3758      	adds	r7, #88	; 0x58
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <memset>:
 80040c4:	4402      	add	r2, r0
 80040c6:	4603      	mov	r3, r0
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d100      	bne.n	80040ce <memset+0xa>
 80040cc:	4770      	bx	lr
 80040ce:	f803 1b01 	strb.w	r1, [r3], #1
 80040d2:	e7f9      	b.n	80040c8 <memset+0x4>

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	4d0d      	ldr	r5, [pc, #52]	; (800410c <__libc_init_array+0x38>)
 80040d8:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040da:	1b64      	subs	r4, r4, r5
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	2600      	movs	r6, #0
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	4d0b      	ldr	r5, [pc, #44]	; (8004114 <__libc_init_array+0x40>)
 80040e6:	4c0c      	ldr	r4, [pc, #48]	; (8004118 <__libc_init_array+0x44>)
 80040e8:	f000 f818 	bl	800411c <_init>
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	2600      	movs	r6, #0
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f855 3b04 	ldr.w	r3, [r5], #4
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	080041d8 	.word	0x080041d8
 8004110:	080041d8 	.word	0x080041d8
 8004114:	080041d8 	.word	0x080041d8
 8004118:	080041dc 	.word	0x080041dc

0800411c <_init>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr

08004128 <_fini>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr
