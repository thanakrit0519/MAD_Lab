/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
static char name[100] = "\t";
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
	int state = 0;
	HAL_UART_Transmit(&huart3, (uint8_t*) "Man from U.A.R.T.2!\nQuit PRESS q\n",
			33, 100);
	static char ch1;
	static char name2[100] = "\t";
	char fromUART2[100] = " ";
	int k = 0;
	if (state == 0) {
		while (ch1 != '\n') {
			if (HAL_UART_Receive(&huart2, (uint8_t*) &ch1, 1, 1000) == HAL_OK) {
				//HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
				//strcat(fromUART2,ch1);
				fromUART2[k] = ch1;
				k++;
			}
		}
		ch1 = ' ';
		state = 1;
		for (int i = 0; i < strlen(fromUART2) - 1; i++) {
			name2[i + 1] = fromUART2[i];
		}
		name2[k] = ' ';
		name2[k+1] = ':';
		name2[k+2] = ' ';
		fromUART2[strlen(fromUART2) - 1] = ' ';
		HAL_UART_Transmit(&huart3, (uint8_t*) "\t", 1,1000);
		HAL_UART_Transmit(&huart3, (uint8_t*) fromUART2, strlen(fromUART2),1000);
		HAL_UART_Transmit(&huart3, (uint8_t*) "is ready\n", 10, 1000);

	}
	int index = 0;
	if (state == 1) {
		HAL_UART_Transmit(&huart3, (uint8_t*) "\tName: ", 7, 100);
		while (ch1 != '\n') {
			if (HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000) == HAL_OK) {
				HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
				name[index] = ch1;
				index++;
			}
		}
		ch1 = ' ';
		//HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name), 1000);
		for (int i = 0; i < strlen(name); i++) {
			HAL_UART_Transmit(&huart2, (uint8_t*) &name+i, 1, 1000);
		}
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 1000);
		name[strlen(name)] = ' ';
		name[strlen(name)+1] = '=';
		name[strlen(name)+2] = '>';
		name[strlen(name)+3] = ' ';
		state = 0;
	}
	char fromUART3[50];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (state == 0) {
			k = 0;
			while (ch1 != '\n') {
				if (HAL_UART_Receive(&huart2, (uint8_t*) &ch1, 1, 1000) == HAL_OK) {
					//HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
					//strcat(fromUART2,ch1);
					fromUART2[k] = ch1;
					k++;
				}
			}
			ch1 = ' ';
			state = 1;
			fromUART2[strlen(fromUART2) - 1] = ' ';
			HAL_UART_Transmit(&huart3, (uint8_t*) name2,strlen(name2) , 1000);
			HAL_UART_Transmit(&huart3, (uint8_t*) fromUART2, strlen(fromUART2),1000);
		}
		if (state == 1) {
			index = 0;
			HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name), 100);
			while (ch1 != '\n') {
				if (HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000)
						== HAL_OK) {
					HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
					fromUART3[index] = ch1;
					index++;
				}
			}
			ch1 = ' ';
			//HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name), 1000);
			for (int i = 0; i < index; i++) {
				HAL_UART_Transmit(&huart2, (uint8_t*) fromUART3[i], 1, 1000);
			}
			state = 0;
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
