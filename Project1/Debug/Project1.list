
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f94  08008f94  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f9c  08008f9c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa0  08008fa0  00018fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000009dc  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a5c  20000a5c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ca95  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004146  00000000  00000000  0003cb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001888  00000000  00000000  00040cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001324  00000000  00000000  00042558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002482c  00000000  00000000  0004387c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000200dd  00000000  00000000  000680a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5b47  00000000  00000000  00088185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c10  00000000  00000000  0015dccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001648dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f60 	.word	0x08008f60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08008f60 	.word	0x08008f60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fe0d 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f853 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9c5 	bl	8000860 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d6:	f000 f8b9 	bl	800064c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004da:	f000 f8e5 	bl	80006a8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004de:	f000 f913 	bl	8000708 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e2:	f008 f8e9 	bl	80086b8 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80004e6:	f000 f991 	bl	800080c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80004ea:	f000 f943 	bl	8000774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	int sw1, sw2;
	HAL_TIM_Base_Start_IT(&htim2);
 80004ee:	481e      	ldr	r0, [pc, #120]	; (8000568 <main+0xa4>)
 80004f0:	f004 fa0e 	bl	8004910 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		sw1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 80004f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f8:	481c      	ldr	r0, [pc, #112]	; (800056c <main+0xa8>)
 80004fa:	f001 f939 	bl	8001770 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	607b      	str	r3, [r7, #4]
		sw2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <main+0xa8>)
 8000508:	f001 f932 	bl	8001770 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	603b      	str	r3, [r7, #0]
		if (sw1 == 0) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d109      	bne.n	800052a <main+0x66>
			stepTo = 5;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <main+0xac>)
 8000518:	2205      	movs	r2, #5
 800051a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <main+0xb0>)
 8000524:	f001 f93c 	bl	80017a0 <HAL_GPIO_WritePin>
 8000528:	e019      	b.n	800055e <main+0x9a>
		} else if (sw2 == 0) {
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10a      	bne.n	8000546 <main+0x82>
			stepTo = -5;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0xac>)
 8000532:	f06f 0204 	mvn.w	r2, #4
 8000536:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <main+0xb0>)
 8000540:	f001 f92e 	bl	80017a0 <HAL_GPIO_WritePin>
 8000544:	e00b      	b.n	800055e <main+0x9a>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0xb0>)
 800054e:	f001 f927 	bl	80017a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0xb0>)
 800055a:	f001 f921 	bl	80017a0 <HAL_GPIO_WritePin>
		}
		motor();
 800055e:	f000 fa8b 	bl	8000a78 <motor>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000562:	f008 f8cf 	bl	8008704 <MX_USB_HOST_Process>
	while (1) {
 8000566:	e7c5      	b.n	80004f4 <main+0x30>
 8000568:	20000190 	.word	0x20000190
 800056c:	40021000 	.word	0x40021000
 8000570:	20000220 	.word	0x20000220
 8000574:	40020c00 	.word	0x40020c00

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f008 fc5a 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fad6 	bl	8003bb0 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060a:	f000 fb0b 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2105      	movs	r1, #5
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fd37 	bl	80040a0 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000638:	f000 faf4 	bl	8000c24 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C1_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_I2C1_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C1_Init+0x50>)
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x58>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_I2C1_Init+0x50>)
 800066a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_I2C1_Init+0x50>)
 800068a:	f002 fcad 	bl	8002fe8 <HAL_I2C_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 fac6 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	40005400 	.word	0x40005400
 80006a4:	000186a0 	.word	0x000186a0

080006a8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_I2S3_Init+0x54>)
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <MX_I2S3_Init+0x58>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2S3_Init+0x54>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_I2S3_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_I2S3_Init+0x54>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_I2S3_Init+0x54>)
 80006d0:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <MX_I2S3_Init+0x5c>)
 80006d2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_I2S3_Init+0x54>)
 80006e8:	f002 fdc2 	bl	8003270 <HAL_I2S_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006f2:	f000 fa97 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000f0 	.word	0x200000f0
 8000700:	40003c00 	.word	0x40003c00
 8000704:	00017700 	.word	0x00017700

08000708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_SPI1_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_SPI1_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SPI1_Init+0x64>)
 8000754:	220a      	movs	r2, #10
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_SPI1_Init+0x64>)
 800075a:	f004 f801 	bl	8004760 <HAL_SPI_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 fa5e 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000138 	.word	0x20000138
 8000770:	40013000 	.word	0x40013000

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_TIM2_Init+0x94>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_TIM2_Init+0x94>)
 800079a:	22a7      	movs	r2, #167	; 0xa7
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_TIM2_Init+0x94>)
 80007a6:	2209      	movs	r2, #9
 80007a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_TIM2_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_TIM2_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_TIM2_Init+0x94>)
 80007b8:	f004 f85b 	bl	8004872 <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 fa2f 	bl	8000c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_TIM2_Init+0x94>)
 80007d4:	f004 fa14 	bl	8004c00 <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fa21 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_TIM2_Init+0x94>)
 80007f0:	f004 fc3a 	bl	8005068 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007fa:	f000 fa13 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000190 	.word	0x20000190

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART3_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000844:	f004 fca0 	bl	8005188 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f9e9 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001d8 	.word	0x200001d8
 800085c:	40004800 	.word	0x40004800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <MX_GPIO_Init+0x200>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a78      	ldr	r2, [pc, #480]	; (8000a60 <MX_GPIO_Init+0x200>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <MX_GPIO_Init+0x200>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <MX_GPIO_Init+0x200>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a71      	ldr	r2, [pc, #452]	; (8000a60 <MX_GPIO_Init+0x200>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b6b      	ldr	r3, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a6a      	ldr	r2, [pc, #424]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a63      	ldr	r2, [pc, #396]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b61      	ldr	r3, [pc, #388]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a5c      	ldr	r2, [pc, #368]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b5a      	ldr	r3, [pc, #360]	; (8000a60 <MX_GPIO_Init+0x200>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x200>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a55      	ldr	r2, [pc, #340]	; (8000a60 <MX_GPIO_Init+0x200>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <MX_GPIO_Init+0x200>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8000924:	484f      	ldr	r0, [pc, #316]	; (8000a64 <MX_GPIO_Init+0x204>)
 8000926:	f000 ff3b 	bl	80017a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2101      	movs	r1, #1
 800092e:	484e      	ldr	r0, [pc, #312]	; (8000a68 <MX_GPIO_Init+0x208>)
 8000930:	f000 ff36 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000934:	2200      	movs	r2, #0
 8000936:	f24f 0110 	movw	r1, #61456	; 0xf010
 800093a:	484c      	ldr	r0, [pc, #304]	; (8000a6c <MX_GPIO_Init+0x20c>)
 800093c:	f000 ff30 	bl	80017a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE8 PE9
                           PE10 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000940:	f44f 63f1 	mov.w	r3, #1928	; 0x788
 8000944:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4842      	ldr	r0, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x204>)
 800095a:	f000 fd6d 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	483c      	ldr	r0, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x208>)
 8000976:	f000 fd5f 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800097a:	2308      	movs	r3, #8
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4834      	ldr	r0, [pc, #208]	; (8000a68 <MX_GPIO_Init+0x208>)
 8000996:	f000 fd4f 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4830      	ldr	r0, [pc, #192]	; (8000a70 <MX_GPIO_Init+0x210>)
 80009b0:	f000 fd42 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	482b      	ldr	r0, [pc, #172]	; (8000a74 <MX_GPIO_Init+0x214>)
 80009c8:	f000 fd36 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <MX_GPIO_Init+0x204>)
 80009e2:	f000 fd29 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f8:	2305      	movs	r3, #5
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <MX_GPIO_Init+0x214>)
 8000a04:	f000 fd18 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a08:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a0c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x20c>)
 8000a22:	f000 fd09 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a26:	2320      	movs	r3, #32
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x20c>)
 8000a3a:	f000 fcfd 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0x204>)
 8000a54:	f000 fcf0 	bl	8001438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400

08000a78 <motor>:

/* USER CODE BEGIN 4 */
void motor() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (count - lastTime > motorSpeed) {
 8000a7c:	4b63      	ldr	r3, [pc, #396]	; (8000c0c <motor+0x194>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b63      	ldr	r3, [pc, #396]	; (8000c10 <motor+0x198>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	4a63      	ldr	r2, [pc, #396]	; (8000c14 <motor+0x19c>)
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f240 80bb 	bls.w	8000c06 <motor+0x18e>
		if (stepTo != 0) {
 8000a90:	4b61      	ldr	r3, [pc, #388]	; (8000c18 <motor+0x1a0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 809b 	beq.w	8000bd0 <motor+0x158>
			switch (nowStep) {
 8000a9a:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <motor+0x1a4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d86a      	bhi.n	8000b78 <motor+0x100>
 8000aa2:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <motor+0x30>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000ab9 	.word	0x08000ab9
 8000aac:	08000ae9 	.word	0x08000ae9
 8000ab0:	08000b19 	.word	0x08000b19
 8000ab4:	08000b49 	.word	0x08000b49
			case 0:
				//GPIOE->BSRR = 0x00000280;
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	4858      	ldr	r0, [pc, #352]	; (8000c20 <motor+0x1a8>)
 8000abe:	f000 fe6f 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4855      	ldr	r0, [pc, #340]	; (8000c20 <motor+0x1a8>)
 8000aca:	f000 fe69 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad4:	4852      	ldr	r0, [pc, #328]	; (8000c20 <motor+0x1a8>)
 8000ad6:	f000 fe63 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae0:	484f      	ldr	r0, [pc, #316]	; (8000c20 <motor+0x1a8>)
 8000ae2:	f000 fe5d 	bl	80017a0 <HAL_GPIO_WritePin>
//          digitalWrite(motorPin1, HIGH);
//          digitalWrite(motorPin2, LOW);
//          digitalWrite(motorPin3, HIGH);
//          digitalWrite(motorPin4, LOW);
				//delay(motorSpeed);
				break;
 8000ae6:	e047      	b.n	8000b78 <motor+0x100>
			case 1:
				//GPIOE->BSRR = 0x00000300;
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	484c      	ldr	r0, [pc, #304]	; (8000c20 <motor+0x1a8>)
 8000aee:	f000 fe57 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af8:	4849      	ldr	r0, [pc, #292]	; (8000c20 <motor+0x1a8>)
 8000afa:	f000 fe51 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	4846      	ldr	r0, [pc, #280]	; (8000c20 <motor+0x1a8>)
 8000b06:	f000 fe4b 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4843      	ldr	r0, [pc, #268]	; (8000c20 <motor+0x1a8>)
 8000b12:	f000 fe45 	bl	80017a0 <HAL_GPIO_WritePin>
//          digitalWrite(motorPin1, LOW);
//          digitalWrite(motorPin2, HIGH);
//          digitalWrite(motorPin3, HIGH);
//          digitalWrite(motorPin4, LOW);
				//delay (motorSpeed);
				break;
 8000b16:	e02f      	b.n	8000b78 <motor+0x100>
			case 2:
				//GPIOE->BSRR = 0x00000500;
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	4840      	ldr	r0, [pc, #256]	; (8000c20 <motor+0x1a8>)
 8000b1e:	f000 fe3f 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b28:	483d      	ldr	r0, [pc, #244]	; (8000c20 <motor+0x1a8>)
 8000b2a:	f000 fe39 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	483a      	ldr	r0, [pc, #232]	; (8000c20 <motor+0x1a8>)
 8000b36:	f000 fe33 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b40:	4837      	ldr	r0, [pc, #220]	; (8000c20 <motor+0x1a8>)
 8000b42:	f000 fe2d 	bl	80017a0 <HAL_GPIO_WritePin>
//          digitalWrite(motorPin1, LOW);
//          digitalWrite(motorPin2, HIGH);
//          digitalWrite(motorPin3, LOW);
//          digitalWrite(motorPin4, HIGH);
				//delay(motorSpeed);
				break;
 8000b46:	e017      	b.n	8000b78 <motor+0x100>
			case 3:
				//GPIOE->BSRR = 0x00000480;
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2180      	movs	r1, #128	; 0x80
 8000b4c:	4834      	ldr	r0, [pc, #208]	; (8000c20 <motor+0x1a8>)
 8000b4e:	f000 fe27 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	4831      	ldr	r0, [pc, #196]	; (8000c20 <motor+0x1a8>)
 8000b5a:	f000 fe21 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	482e      	ldr	r0, [pc, #184]	; (8000c20 <motor+0x1a8>)
 8000b66:	f000 fe1b 	bl	80017a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	482b      	ldr	r0, [pc, #172]	; (8000c20 <motor+0x1a8>)
 8000b72:	f000 fe15 	bl	80017a0 <HAL_GPIO_WritePin>
//          digitalWrite(motorPin1, HIGH);
//          digitalWrite(motorPin2, LOW);
//          digitalWrite(motorPin3, LOW);
//          digitalWrite(motorPin4, HIGH);
				//delay(motorSpeed);
				break;
 8000b76:	bf00      	nop
			}
			if (stepTo > 0) {
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <motor+0x1a0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	dd11      	ble.n	8000ba4 <motor+0x12c>
				nowStep++;
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <motor+0x1a4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a25      	ldr	r2, [pc, #148]	; (8000c1c <motor+0x1a4>)
 8000b88:	6013      	str	r3, [r2, #0]
				stepTo--;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <motor+0x1a0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <motor+0x1a0>)
 8000b92:	6013      	str	r3, [r2, #0]
				if (nowStep > 3) {
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <motor+0x1a4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	dd30      	ble.n	8000bfe <motor+0x186>
					nowStep = 0;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <motor+0x1a4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e02c      	b.n	8000bfe <motor+0x186>
				}
			} else if (stepTo < 0) {
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <motor+0x1a0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	da28      	bge.n	8000bfe <motor+0x186>
				nowStep--;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <motor+0x1a4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <motor+0x1a4>)
 8000bb4:	6013      	str	r3, [r2, #0]
				stepTo++;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <motor+0x1a0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <motor+0x1a0>)
 8000bbe:	6013      	str	r3, [r2, #0]
				if (nowStep < 0) {
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <motor+0x1a4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da1a      	bge.n	8000bfe <motor+0x186>
					nowStep = 3;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <motor+0x1a4>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e016      	b.n	8000bfe <motor+0x186>
				}
			}
		} else {
			//GPIOE->BSRR = 0x07800000;
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <motor+0x1a8>)
 8000bd6:	f000 fde3 	bl	80017a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <motor+0x1a8>)
 8000be2:	f000 fddd 	bl	80017a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <motor+0x1a8>)
 8000bee:	f000 fdd7 	bl	80017a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <motor+0x1a8>)
 8000bfa:	f000 fdd1 	bl	80017a0 <HAL_GPIO_WritePin>
//      digitalWrite(motorPin1, LOW);
//      digitalWrite(motorPin2, LOW);
//      digitalWrite(motorPin3, LOW);
//      digitalWrite(motorPin4, LOW);
		}
		lastTime = count;
 8000bfe:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <motor+0x194>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <motor+0x198>)
 8000c04:	6013      	str	r3, [r2, #0]
	}
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000228 	.word	0x20000228
 8000c10:	2000021c 	.word	0x2000021c
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000220 	.word	0x20000220
 8000c1c:	20000224 	.word	0x20000224
 8000c20:	40021000 	.word	0x40021000

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c6e:	2005      	movs	r0, #5
 8000c70:	f000 fba0 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_I2C_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12c      	bne.n	8000cfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cbe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <HAL_I2C_MspInit+0x8c>)
 8000cdc:	f000 fbac 	bl	8001438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <HAL_I2S_MspInit+0xf0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d15a      	bne.n	8000df6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d44:	23c0      	movs	r3, #192	; 0xc0
 8000d46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fbc5 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d5c:	f7ff ff62 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_I2S_MspInit+0xf4>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000db4:	2310      	movs	r3, #16
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <HAL_I2S_MspInit+0xf8>)
 8000dd0:	f000 fb32 	bl	8001438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dd4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de6:	2306      	movs	r3, #6
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_I2S_MspInit+0xfc>)
 8000df2:	f000 fb21 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3738      	adds	r7, #56	; 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40003c00 	.word	0x40003c00
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020800 	.word	0x40020800

08000e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_SPI_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12b      	bne.n	8000e8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_SPI_MspInit+0x88>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_SPI_MspInit+0x88>)
 8000e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_SPI_MspInit+0x88>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_SPI_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <HAL_SPI_MspInit+0x88>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_SPI_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e6a:	23e0      	movs	r3, #224	; 0xe0
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_SPI_MspInit+0x8c>)
 8000e86:	f000 fad7 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40013000 	.word	0x40013000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d115      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	201c      	movs	r0, #28
 8000ed4:	f000 fa79 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed8:	201c      	movs	r0, #28
 8000eda:	f000 fa92 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_UART_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12c      	bne.n	8000f68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_UART_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_UART_MspInit+0x88>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_UART_MspInit+0x88>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_UART_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_UART_MspInit+0x88>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_UART_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f64:	f000 fa68 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40004800 	.word	0x40004800
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8e0 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	count++;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <TIM2_IRQHandler+0x18>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <TIM2_IRQHandler+0x18>)
 8000fdc:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <TIM2_IRQHandler+0x1c>)
 8000fe0:	f003 fd06 	bl	80049f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000228 	.word	0x20000228
 8000fec:	20000190 	.word	0x20000190

08000ff0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <OTG_FS_IRQHandler+0x10>)
 8000ff6:	f000 fe57 	bl	8001ca8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000610 	.word	0x20000610

08001004 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
		errno = ENOMEM;
 8001034:	f007 ff1c 	bl	8008e70 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20020000 	.word	0x20020000
 8001064:	00000400 	.word	0x00000400
 8001068:	2000022c 	.word	0x2000022c
 800106c:	20000a60 	.word	0x20000a60

08001070 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b0:	4c0b      	ldr	r4, [pc, #44]	; (80010e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010be:	f7ff ffd7 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f007 fedb 	bl	8008e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff f9fd 	bl	80004c4 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010d8:	08008fa4 	.word	0x08008fa4
  ldr r2, =_sbss
 80010dc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010e0:	20000a5c 	.word	0x20000a5c

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_Init+0x40>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_Init+0x40>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x40>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f94f 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fd88 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f967 	bl	800141e <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f92f 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000004 	.word	0x20000004
 8001184:	2000000c 	.word	0x2000000c
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	20000230 	.word	0x20000230

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000230 	.word	0x20000230

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000000c 	.word	0x2000000c

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff29 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff3e 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff31 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e16b      	b.n	800172c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 815a 	bne.w	8001726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d005      	beq.n	800148a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	2b02      	cmp	r3, #2
 8001488:	d130      	bne.n	80014ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d017      	beq.n	8001528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80b4 	beq.w	8001726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b60      	ldr	r3, [pc, #384]	; (8001744 <HAL_GPIO_Init+0x30c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a5f      	ldr	r2, [pc, #380]	; (8001744 <HAL_GPIO_Init+0x30c>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_GPIO_Init+0x30c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015da:	4a5b      	ldr	r2, [pc, #364]	; (8001748 <HAL_GPIO_Init+0x310>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_GPIO_Init+0x314>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d02b      	beq.n	800165e <HAL_GPIO_Init+0x226>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_GPIO_Init+0x318>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d025      	beq.n	800165a <HAL_GPIO_Init+0x222>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a50      	ldr	r2, [pc, #320]	; (8001754 <HAL_GPIO_Init+0x31c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01f      	beq.n	8001656 <HAL_GPIO_Init+0x21e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x320>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d019      	beq.n	8001652 <HAL_GPIO_Init+0x21a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4e      	ldr	r2, [pc, #312]	; (800175c <HAL_GPIO_Init+0x324>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x216>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_GPIO_Init+0x328>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x212>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <HAL_GPIO_Init+0x32c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4b      	ldr	r2, [pc, #300]	; (8001768 <HAL_GPIO_Init+0x330>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x20a>
 800163e:	2307      	movs	r3, #7
 8001640:	e00e      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001642:	2308      	movs	r3, #8
 8001644:	e00c      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001646:	2306      	movs	r3, #6
 8001648:	e00a      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800164a:	2305      	movs	r3, #5
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800164e:	2304      	movs	r3, #4
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800165e:	2300      	movs	r3, #0
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	; (8001748 <HAL_GPIO_Init+0x310>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_GPIO_Init+0x334>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a2:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_GPIO_Init+0x334>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_GPIO_Init+0x334>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016cc:	4a27      	ldr	r2, [pc, #156]	; (800176c <HAL_GPIO_Init+0x334>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_GPIO_Init+0x334>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f6:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_GPIO_Init+0x334>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_GPIO_Init+0x334>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_GPIO_Init+0x334>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	f67f ae90 	bls.w	8001454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021000 	.word	0x40021000
 8001760:	40021400 	.word	0x40021400
 8001764:	40021800 	.word	0x40021800
 8001768:	40021c00 	.word	0x40021c00
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d4:	b08f      	sub	sp, #60	; 0x3c
 80017d6:	af0a      	add	r7, sp, #40	; 0x28
 80017d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e054      	b.n	800188e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f006 ffb8 	bl	8008774 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 ffe4 	bl	80057f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	687e      	ldr	r6, [r7, #4]
 8001830:	466d      	mov	r5, sp
 8001832:	f106 0410 	add.w	r4, r6, #16
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001842:	e885 0003 	stmia.w	r5, {r0, r1}
 8001846:	1d33      	adds	r3, r6, #4
 8001848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f003 ff5e 	bl	800570c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f003 ffdb 	bl	8005812 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	687e      	ldr	r6, [r7, #4]
 8001864:	466d      	mov	r5, sp
 8001866:	f106 0410 	add.w	r4, r6, #16
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001876:	e885 0003 	stmia.w	r5, {r0, r1}
 800187a:	1d33      	adds	r3, r6, #4
 800187c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f004 f964 	bl	8005b4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001896 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	b089      	sub	sp, #36	; 0x24
 800189a:	af04      	add	r7, sp, #16
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	4608      	mov	r0, r1
 80018a0:	4611      	mov	r1, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	70fb      	strb	r3, [r7, #3]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70bb      	strb	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_HCD_HC_Init+0x28>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e076      	b.n	80019ac <HAL_HCD_HC_Init+0x116>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	333d      	adds	r3, #61	; 0x3d
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3338      	adds	r3, #56	; 0x38
 80018e6:	787a      	ldrb	r2, [r7, #1]
 80018e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3340      	adds	r3, #64	; 0x40
 80018f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3339      	adds	r3, #57	; 0x39
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	333f      	adds	r3, #63	; 0x3f
 800191c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001920:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	78ba      	ldrb	r2, [r7, #2]
 8001926:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800192a:	b2d0      	uxtb	r0, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333a      	adds	r3, #58	; 0x3a
 8001938:	4602      	mov	r2, r0
 800193a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800193c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da09      	bge.n	8001958 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	333b      	adds	r3, #59	; 0x3b
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e008      	b.n	800196a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	333b      	adds	r3, #59	; 0x3b
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	333c      	adds	r3, #60	; 0x3c
 8001978:	f897 2020 	ldrb.w	r2, [r7, #32]
 800197c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	787c      	ldrb	r4, [r7, #1]
 8001984:	78ba      	ldrb	r2, [r7, #2]
 8001986:	78f9      	ldrb	r1, [r7, #3]
 8001988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4623      	mov	r3, r4
 800199a:	f004 fa5d 	bl	8005e58 <USB_HC_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_HCD_HC_Halt+0x1e>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00f      	b.n	80019f2 <HAL_HCD_HC_Halt+0x3e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 fcad 	bl	8006342 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	70fb      	strb	r3, [r7, #3]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	70bb      	strb	r3, [r7, #2]
 8001a12:	4613      	mov	r3, r2
 8001a14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	333b      	adds	r3, #59	; 0x3b
 8001a24:	78ba      	ldrb	r2, [r7, #2]
 8001a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	333f      	adds	r3, #63	; 0x3f
 8001a36:	787a      	ldrb	r2, [r7, #1]
 8001a38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a3a:	7c3b      	ldrb	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d112      	bne.n	8001a66 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3342      	adds	r3, #66	; 0x42
 8001a4e:	2203      	movs	r2, #3
 8001a50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	333d      	adds	r3, #61	; 0x3d
 8001a60:	7f3a      	ldrb	r2, [r7, #28]
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e008      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3342      	adds	r3, #66	; 0x42
 8001a74:	2202      	movs	r2, #2
 8001a76:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	f200 80c6 	bhi.w	8001c0c <HAL_HCD_HC_SubmitRequest+0x210>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001bf9 	.word	0x08001bf9
 8001a90:	08001afd 	.word	0x08001afd
 8001a94:	08001b7b 	.word	0x08001b7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a98:	7c3b      	ldrb	r3, [r7, #16]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	f040 80b8 	bne.w	8001c10 <HAL_HCD_HC_SubmitRequest+0x214>
 8001aa0:	78bb      	ldrb	r3, [r7, #2]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 80b4 	bne.w	8001c10 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001aa8:	8b3b      	ldrh	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3355      	adds	r3, #85	; 0x55
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3355      	adds	r3, #85	; 0x55
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	212c      	movs	r1, #44	; 0x2c
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	3342      	adds	r3, #66	; 0x42
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ae6:	e093      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3342      	adds	r3, #66	; 0x42
 8001af6:	2202      	movs	r2, #2
 8001af8:	701a      	strb	r2, [r3, #0]
      break;
 8001afa:	e089      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001afc:	78bb      	ldrb	r3, [r7, #2]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11d      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	212c      	movs	r1, #44	; 0x2c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3355      	adds	r3, #85	; 0x55
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	3342      	adds	r3, #66	; 0x42
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b28:	e073      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3342      	adds	r3, #66	; 0x42
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]
      break;
 8001b3c:	e069      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3354      	adds	r3, #84	; 0x54
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3342      	adds	r3, #66	; 0x42
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
      break;
 8001b64:	e055      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3342      	adds	r3, #66	; 0x42
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e04b      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b7a:	78bb      	ldrb	r3, [r7, #2]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d11d      	bne.n	8001bbc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3355      	adds	r3, #85	; 0x55
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3342      	adds	r3, #66	; 0x42
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ba6:	e034      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3342      	adds	r3, #66	; 0x42
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	701a      	strb	r2, [r3, #0]
      break;
 8001bba:	e02a      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3354      	adds	r3, #84	; 0x54
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3342      	adds	r3, #66	; 0x42
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
      break;
 8001be2:	e016      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3342      	adds	r3, #66	; 0x42
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	701a      	strb	r2, [r3, #0]
      break;
 8001bf6:	e00c      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3342      	adds	r3, #66	; 0x42
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c10:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3344      	adds	r3, #68	; 0x44
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	8b3a      	ldrh	r2, [r7, #24]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	202c      	movs	r0, #44	; 0x2c
 8001c2c:	fb00 f303 	mul.w	r3, r0, r3
 8001c30:	440b      	add	r3, r1
 8001c32:	334c      	adds	r3, #76	; 0x4c
 8001c34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3360      	adds	r3, #96	; 0x60
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3350      	adds	r3, #80	; 0x50
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3339      	adds	r3, #57	; 0x39
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3361      	adds	r3, #97	; 0x61
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	222c      	movs	r2, #44	; 0x2c
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	3338      	adds	r3, #56	; 0x38
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	18d1      	adds	r1, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	f004 fa00 	bl	800609c <USB_HC_StartXfer>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop

08001ca8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 ff01 	bl	8005ac6 <USB_GetMode>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	f040 80f6 	bne.w	8001eb8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fee5 	bl	8005aa0 <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80ec 	beq.w	8001eb6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fedc 	bl	8005aa0 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cf2:	d104      	bne.n	8001cfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fecc 	bl	8005aa0 <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d12:	d104      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 febc 	bl	8005aa0 <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d32:	d104      	bne.n	8001d3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 feac 	bl	8005aa0 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d103      	bne.n	8001d5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fe9e 	bl	8005aa0 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d6e:	d11c      	bne.n	8001daa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	6938      	ldr	r0, [r7, #16]
 8001d8e:	f003 fd8d 	bl	80058ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d92:	6938      	ldr	r0, [r7, #16]
 8001d94:	f003 fdbe 	bl	8005914 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 ff94 	bl	8005ccc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f006 fd63 	bl	8008870 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fe76 	bl	8005aa0 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbe:	d102      	bne.n	8001dc6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f001 f89e 	bl	8002f02 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fe68 	bl	8005aa0 <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d106      	bne.n	8001de8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f006 fd2c 	bl	8008838 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2208      	movs	r2, #8
 8001de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fe57 	bl	8005aa0 <USB_ReadInterrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d101      	bne.n	8001e00 <HAL_HCD_IRQHandler+0x158>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_HCD_IRQHandler+0x15a>
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d012      	beq.n	8001e2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0210 	bic.w	r2, r2, #16
 8001e14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 ffa1 	bl	8002d5e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0210 	orr.w	r2, r2, #16
 8001e2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fe35 	bl	8005aa0 <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e40:	d13a      	bne.n	8001eb8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 fa6a 	bl	8006320 <USB_HC_ReadInterrupt>
 8001e4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e025      	b.n	8001ea0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7e:	d106      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8ab 	bl	8001fe2 <HCD_HC_IN_IRQHandler>
 8001e8c:	e005      	b.n	8001e9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fbf9 	bl	800268c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3d4      	bcc.n	8001e54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb2:	615a      	str	r2, [r3, #20]
 8001eb4:	e000      	b.n	8001eb8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001eb6:	bf00      	nop
    }
  }
}
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_HCD_Start+0x16>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e013      	b.n	8001efc <HAL_HCD_Start+0x3e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 ff56 	bl	8005d94 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fc6e 	bl	80057ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_HCD_Stop+0x16>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e00d      	b.n	8001f36 <HAL_HCD_Stop+0x32>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fb44 	bl	80065b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fef8 	bl	8005d40 <USB_ResetPort>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3360      	adds	r3, #96	; 0x60
 8001f74:	781b      	ldrb	r3, [r3, #0]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3350      	adds	r3, #80	; 0x50
 8001f9c:	681b      	ldr	r3, [r3, #0]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 ff3c 	bl	8005e34 <USB_GetCurrentFrame>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 ff17 	bl	8005e06 <USB_GetHostSpeed>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d11a      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	461a      	mov	r2, r3
 8002020:	2304      	movs	r3, #4
 8002022:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3361      	adds	r3, #97	; 0x61
 8002032:	2206      	movs	r2, #6
 8002034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f004 f97e 	bl	8006342 <USB_HC_Halt>
 8002046:	e0af      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205e:	d11b      	bne.n	8002098 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3361      	adds	r3, #97	; 0x61
 8002082:	2207      	movs	r2, #7
 8002084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f956 	bl	8006342 <USB_HC_Halt>
 8002096:	e087      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d109      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ba:	461a      	mov	r2, r3
 80020bc:	2320      	movs	r3, #32
 80020be:	6093      	str	r3, [r2, #8]
 80020c0:	e072      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d11a      	bne.n	800210e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	2308      	movs	r3, #8
 80020e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3361      	adds	r3, #97	; 0x61
 80020f8:	2205      	movs	r2, #5
 80020fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f91b 	bl	8006342 <USB_HC_Halt>
 800210c:	e04c      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002124:	d11b      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002138:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3361      	adds	r3, #97	; 0x61
 8002148:	2208      	movs	r2, #8
 800214a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f004 f8f3 	bl	8006342 <USB_HC_Halt>
 800215c:	e024      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d119      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	461a      	mov	r2, r3
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3361      	adds	r3, #97	; 0x61
 8002194:	2206      	movs	r2, #6
 8002196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f8cd 	bl	8006342 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021be:	d112      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 f8b9 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021e4:	e24e      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 80df 	bne.w	80023bc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3348      	adds	r3, #72	; 0x48
 8002214:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0159      	lsls	r1, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	440b      	add	r3, r1
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	202c      	movs	r0, #44	; 0x2c
 8002230:	fb00 f303 	mul.w	r3, r0, r3
 8002234:	440b      	add	r3, r1
 8002236:	3350      	adds	r3, #80	; 0x50
 8002238:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3361      	adds	r3, #97	; 0x61
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	461a      	mov	r2, r3
 800226c:	2301      	movs	r3, #1
 800226e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	333f      	adds	r3, #63	; 0x3f
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	333f      	adds	r3, #63	; 0x3f
 8002292:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002294:	2b02      	cmp	r3, #2
 8002296:	d111      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f84d 	bl	8006342 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	2310      	movs	r3, #16
 80022b8:	6093      	str	r3, [r2, #8]
 80022ba:	e03a      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	333f      	adds	r3, #63	; 0x3f
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d009      	beq.n	80022e4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	333f      	adds	r3, #63	; 0x3f
 80022de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d126      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	0151      	lsls	r1, r2, #5
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	440a      	add	r2, r1
 80022fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002302:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	b2d9      	uxtb	r1, r3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	202c      	movs	r0, #44	; 0x2c
 8002320:	fb00 f303 	mul.w	r3, r0, r3
 8002324:	4413      	add	r3, r2
 8002326:	3360      	adds	r3, #96	; 0x60
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f006 faad 	bl	800888c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d12b      	bne.n	8002392 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3348      	adds	r3, #72	; 0x48
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	202c      	movs	r0, #44	; 0x2c
 8002350:	fb00 f202 	mul.w	r2, r0, r2
 8002354:	440a      	add	r2, r1
 8002356:	3240      	adds	r2, #64	; 0x40
 8002358:	8812      	ldrh	r2, [r2, #0]
 800235a:	fbb3 f3f2 	udiv	r3, r3, r2
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 818e 	beq.w	8002684 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3354      	adds	r3, #84	; 0x54
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f083 0301 	eor.w	r3, r3, #1
 800237c:	b2d8      	uxtb	r0, r3
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3354      	adds	r3, #84	; 0x54
 800238c:	4602      	mov	r2, r0
 800238e:	701a      	strb	r2, [r3, #0]
}
 8002390:	e178      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3354      	adds	r3, #84	; 0x54
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f083 0301 	eor.w	r3, r3, #1
 80023a6:	b2d8      	uxtb	r0, r3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3354      	adds	r3, #84	; 0x54
 80023b6:	4602      	mov	r2, r0
 80023b8:	701a      	strb	r2, [r3, #0]
}
 80023ba:	e163      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	f040 80f6 	bne.w	80025c0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3361      	adds	r3, #97	; 0x61
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d109      	bne.n	80023fc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3360      	adds	r3, #96	; 0x60
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e0c9      	b.n	8002590 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3361      	adds	r3, #97	; 0x61
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d109      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3360      	adds	r3, #96	; 0x60
 800241e:	2205      	movs	r2, #5
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e0b5      	b.n	8002590 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3361      	adds	r3, #97	; 0x61
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d009      	beq.n	800244c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3361      	adds	r3, #97	; 0x61
 8002446:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002448:	2b08      	cmp	r3, #8
 800244a:	d150      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	335c      	adds	r3, #92	; 0x5c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	202c      	movs	r0, #44	; 0x2c
 8002464:	fb00 f303 	mul.w	r3, r0, r3
 8002468:	440b      	add	r3, r1
 800246a:	335c      	adds	r3, #92	; 0x5c
 800246c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d912      	bls.n	80024a8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	335c      	adds	r3, #92	; 0x5c
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3360      	adds	r3, #96	; 0x60
 80024a2:	2204      	movs	r2, #4
 80024a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024a6:	e073      	b.n	8002590 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3360      	adds	r3, #96	; 0x60
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024d0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024d8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024ec:	e050      	b.n	8002590 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3361      	adds	r3, #97	; 0x61
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d122      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3360      	adds	r3, #96	; 0x60
 8002510:	2202      	movs	r2, #2
 8002512:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800252a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002532:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e023      	b.n	8002590 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3361      	adds	r3, #97	; 0x61
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b07      	cmp	r3, #7
 800255a:	d119      	bne.n	8002590 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	335c      	adds	r3, #92	; 0x5c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	202c      	movs	r0, #44	; 0x2c
 8002574:	fb00 f303 	mul.w	r3, r0, r3
 8002578:	440b      	add	r3, r1
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3360      	adds	r3, #96	; 0x60
 800258c:	2204      	movs	r2, #4
 800258e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	461a      	mov	r2, r3
 800259e:	2302      	movs	r3, #2
 80025a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	b2d9      	uxtb	r1, r3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	202c      	movs	r0, #44	; 0x2c
 80025ac:	fb00 f303 	mul.w	r3, r0, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f006 f967 	bl	800888c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025be:	e061      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d156      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	333f      	adds	r3, #63	; 0x3f
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d111      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fe9b 	bl	8006342 <USB_HC_Halt>
 800260c:	e031      	b.n	8002672 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	333f      	adds	r3, #63	; 0x3f
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333f      	adds	r3, #63	; 0x3f
 8002630:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002632:	2b02      	cmp	r3, #2
 8002634:	d11d      	bne.n	8002672 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	335c      	adds	r3, #92	; 0x5c
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d110      	bne.n	8002672 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3361      	adds	r3, #97	; 0x61
 800265e:	2203      	movs	r2, #3
 8002660:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fe68 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2310      	movs	r3, #16
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11a      	bne.n	80026f2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2304      	movs	r3, #4
 80026cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3361      	adds	r3, #97	; 0x61
 80026dc:	2206      	movs	r2, #6
 80026de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fe29 	bl	8006342 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026f0:	e331      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d12e      	bne.n	8002766 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2320      	movs	r3, #32
 8002718:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	333d      	adds	r3, #61	; 0x3d
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 8313 	bne.w	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	333d      	adds	r3, #61	; 0x3d
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3360      	adds	r3, #96	; 0x60
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fdef 	bl	8006342 <USB_HC_Halt>
}
 8002764:	e2f7      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d112      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002790:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fdd0 	bl	8006342 <USB_HC_Halt>
}
 80027a2:	e2d8      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d140      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	335c      	adds	r3, #92	; 0x5c
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d111      	bne.n	8002806 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	333d      	adds	r3, #61	; 0x3d
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	2301      	movs	r3, #1
 8002816:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3361      	adds	r3, #97	; 0x61
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fd84 	bl	8006342 <USB_HC_Halt>
}
 800283a:	e28c      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d12c      	bne.n	80028ac <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3361      	adds	r3, #97	; 0x61
 8002860:	2204      	movs	r2, #4
 8002862:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	333d      	adds	r3, #61	; 0x3d
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fd55 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	461a      	mov	r2, r3
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	6093      	str	r3, [r2, #8]
}
 80028aa:	e254      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11a      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	2308      	movs	r3, #8
 80028d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3361      	adds	r3, #97	; 0x61
 80028e2:	2205      	movs	r2, #5
 80028e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 fd26 	bl	8006342 <USB_HC_Halt>
}
 80028f6:	e22e      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b10      	cmp	r3, #16
 800290c:	d140      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	335c      	adds	r3, #92	; 0x5c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3361      	adds	r3, #97	; 0x61
 800292e:	2203      	movs	r2, #3
 8002930:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	333d      	adds	r3, #61	; 0x3d
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d112      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	333c      	adds	r3, #60	; 0x3c
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	333d      	adds	r3, #61	; 0x3d
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fce3 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	2310      	movs	r3, #16
 800298c:	6093      	str	r3, [r2, #8]
}
 800298e:	e1e2      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b80      	cmp	r3, #128	; 0x80
 80029a4:	d164      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d111      	bne.n	80029d2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	2206      	movs	r2, #6
 80029be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fcb9 	bl	8006342 <USB_HC_Halt>
 80029d0:	e044      	b.n	8002a5c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	335c      	adds	r3, #92	; 0x5c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	202c      	movs	r0, #44	; 0x2c
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	440b      	add	r3, r1
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	335c      	adds	r3, #92	; 0x5c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d920      	bls.n	8002a4a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	335c      	adds	r3, #92	; 0x5c
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	2204      	movs	r2, #4
 8002a2a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	b2d9      	uxtb	r1, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	202c      	movs	r0, #44	; 0x2c
 8002a36:	fb00 f303 	mul.w	r3, r0, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3360      	adds	r3, #96	; 0x60
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f005 ff22 	bl	800888c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a48:	e008      	b.n	8002a5c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3360      	adds	r3, #96	; 0x60
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	6093      	str	r3, [r2, #8]
}
 8002a6e:	e172      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d11b      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	2208      	movs	r2, #8
 8002a98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fc4c 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002abc:	6093      	str	r3, [r2, #8]
}
 8002abe:	e14a      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	f040 813f 	bne.w	8002d56 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d17d      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	333f      	adds	r3, #63	; 0x3f
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d00a      	beq.n	8002b28 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	333f      	adds	r3, #63	; 0x3f
 8002b20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	f040 8100 	bne.w	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3355      	adds	r3, #85	; 0x55
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2d8      	uxtb	r0, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3355      	adds	r3, #85	; 0x55
 8002b54:	4602      	mov	r2, r0
 8002b56:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 80e3 	bne.w	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	334c      	adds	r3, #76	; 0x4c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80d8 	beq.w	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	334c      	adds	r3, #76	; 0x4c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	202c      	movs	r0, #44	; 0x2c
 8002b8e:	fb00 f202 	mul.w	r2, r0, r2
 8002b92:	440a      	add	r2, r1
 8002b94:	3240      	adds	r2, #64	; 0x40
 8002b96:	8812      	ldrh	r2, [r2, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	202c      	movs	r0, #44	; 0x2c
 8002ba2:	fb00 f202 	mul.w	r2, r0, r2
 8002ba6:	440a      	add	r2, r1
 8002ba8:	3240      	adds	r2, #64	; 0x40
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80b5 	beq.w	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3355      	adds	r3, #85	; 0x55
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3355      	adds	r3, #85	; 0x55
 8002be2:	4602      	mov	r2, r0
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e09f      	b.n	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3361      	adds	r3, #97	; 0x61
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d109      	bne.n	8002c10 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e08b      	b.n	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3361      	adds	r3, #97	; 0x61
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d109      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3360      	adds	r3, #96	; 0x60
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e077      	b.n	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3361      	adds	r3, #97	; 0x61
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d109      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e063      	b.n	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3361      	adds	r3, #97	; 0x61
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	d009      	beq.n	8002c88 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3361      	adds	r3, #97	; 0x61
 8002c82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d14f      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	335c      	adds	r3, #92	; 0x5c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	202c      	movs	r0, #44	; 0x2c
 8002ca0:	fb00 f303 	mul.w	r3, r0, r3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	335c      	adds	r3, #92	; 0x5c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d912      	bls.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3360      	adds	r3, #96	; 0x60
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e021      	b.n	8002d28 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d0c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	2302      	movs	r3, #2
 8002d38:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	b2d9      	uxtb	r1, r3
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	202c      	movs	r0, #44	; 0x2c
 8002d44:	fb00 f303 	mul.w	r3, r0, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3360      	adds	r3, #96	; 0x60
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f005 fd9b 	bl	800888c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d56:	bf00      	nop
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b08a      	sub	sp, #40	; 0x28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d92:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d004      	beq.n	8002da4 <HCD_RXQLVL_IRQHandler+0x46>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	f000 80a9 	beq.w	8002ef4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002da2:	e0aa      	b.n	8002efa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80a6 	beq.w	8002ef8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3344      	adds	r3, #68	; 0x44
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 809b 	beq.w	8002ef8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3350      	adds	r3, #80	; 0x50
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	441a      	add	r2, r3
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	202c      	movs	r0, #44	; 0x2c
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	440b      	add	r3, r1
 8002de2:	334c      	adds	r3, #76	; 0x4c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d87a      	bhi.n	8002ee0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3344      	adds	r3, #68	; 0x44
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	b292      	uxth	r2, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	f002 fdf4 	bl	80059f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3344      	adds	r3, #68	; 0x44
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	202c      	movs	r0, #44	; 0x2c
 8002e22:	fb00 f303 	mul.w	r3, r0, r3
 8002e26:	440b      	add	r3, r1
 8002e28:	3344      	adds	r3, #68	; 0x44
 8002e2a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3350      	adds	r3, #80	; 0x50
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	441a      	add	r2, r3
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	202c      	movs	r0, #44	; 0x2c
 8002e46:	fb00 f303 	mul.w	r3, r0, r3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3350      	adds	r3, #80	; 0x50
 8002e4e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	0cdb      	lsrs	r3, r3, #19
 8002e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e64:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3340      	adds	r3, #64	; 0x40
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d13c      	bne.n	8002ef8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d039      	beq.n	8002ef8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e9a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3354      	adds	r3, #84	; 0x54
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	f083 0301 	eor.w	r3, r3, #1
 8002eca:	b2d8      	uxtb	r0, r3
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3354      	adds	r3, #84	; 0x54
 8002eda:	4602      	mov	r2, r0
 8002edc:	701a      	strb	r2, [r3, #0]
      break;
 8002ede:	e00b      	b.n	8002ef8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3360      	adds	r3, #96	; 0x60
 8002eee:	2204      	movs	r2, #4
 8002ef0:	701a      	strb	r2, [r3, #0]
      break;
 8002ef2:	e001      	b.n	8002ef8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ef8:	bf00      	nop
  }
}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f2e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d10b      	bne.n	8002f52 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f005 fc85 	bl	8008854 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d132      	bne.n	8002fc2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
 8002f62:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d126      	bne.n	8002fbc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d113      	bne.n	8002f9e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f80:	d106      	bne.n	8002f90 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 fe9f 	bl	8005ccc <USB_InitFSLSPClkSel>
 8002f8e:	e011      	b.n	8002fb4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 fe98 	bl	8005ccc <USB_InitFSLSPClkSel>
 8002f9c:	e00a      	b.n	8002fb4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d106      	bne.n	8002fb4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fac:	461a      	mov	r2, r3
 8002fae:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fb2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f005 fc77 	bl	80088a8 <HAL_HCD_PortEnabled_Callback>
 8002fba:	e002      	b.n	8002fc2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f005 fc81 	bl	80088c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d103      	bne.n	8002fd4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f043 0320 	orr.w	r3, r3, #32
 8002fd2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e12b      	b.n	8003252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fe36 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800304c:	f001 fa20 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a81      	ldr	r2, [pc, #516]	; (800325c <HAL_I2C_Init+0x274>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d807      	bhi.n	800306c <HAL_I2C_Init+0x84>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a80      	ldr	r2, [pc, #512]	; (8003260 <HAL_I2C_Init+0x278>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e006      	b.n	800307a <HAL_I2C_Init+0x92>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a7d      	ldr	r2, [pc, #500]	; (8003264 <HAL_I2C_Init+0x27c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0e7      	b.n	8003252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a78      	ldr	r2, [pc, #480]	; (8003268 <HAL_I2C_Init+0x280>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a6a      	ldr	r2, [pc, #424]	; (800325c <HAL_I2C_Init+0x274>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d802      	bhi.n	80030bc <HAL_I2C_Init+0xd4>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3301      	adds	r3, #1
 80030ba:	e009      	b.n	80030d0 <HAL_I2C_Init+0xe8>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a69      	ldr	r2, [pc, #420]	; (800326c <HAL_I2C_Init+0x284>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	3301      	adds	r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	495c      	ldr	r1, [pc, #368]	; (800325c <HAL_I2C_Init+0x274>)
 80030ec:	428b      	cmp	r3, r1
 80030ee:	d819      	bhi.n	8003124 <HAL_I2C_Init+0x13c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e59      	subs	r1, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fe:	1c59      	adds	r1, r3, #1
 8003100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003104:	400b      	ands	r3, r1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_I2C_Init+0x138>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e59      	subs	r1, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fbb1 f3f3 	udiv	r3, r1, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	e051      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 8003120:	2304      	movs	r3, #4
 8003122:	e04f      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <HAL_I2C_Init+0x168>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e58      	subs	r0, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e012      	b.n	8003176 <HAL_I2C_Init+0x18e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0099      	lsls	r1, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Init+0x196>
 800317a:	2301      	movs	r3, #1
 800317c:	e022      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <HAL_I2C_Init+0x1bc>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e58      	subs	r0, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	440b      	add	r3, r1
 8003194:	fbb0 f3f3 	udiv	r3, r0, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	e00f      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	6809      	ldr	r1, [r1, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6911      	ldr	r1, [r2, #16]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68d2      	ldr	r2, [r2, #12]
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	430b      	orrs	r3, r1
 8003206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000186a0 	.word	0x000186a0
 8003260:	001e847f 	.word	0x001e847f
 8003264:	003d08ff 	.word	0x003d08ff
 8003268:	431bde83 	.word	0x431bde83
 800326c:	10624dd3 	.word	0x10624dd3

08003270 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e128      	b.n	80034d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a90      	ldr	r2, [pc, #576]	; (80034dc <HAL_I2S_Init+0x26c>)
 800329a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fd37 	bl	8000d10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032b8:	f023 030f 	bic.w	r3, r3, #15
 80032bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2202      	movs	r2, #2
 80032c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d060      	beq.n	8003390 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032d6:	2310      	movs	r3, #16
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e001      	b.n	80032e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d802      	bhi.n	80032ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f001 f9d8 	bl	80046a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80032f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fe:	d125      	bne.n	800334c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	3305      	adds	r3, #5
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e01f      	b.n	800336a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	3305      	adds	r3, #5
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e00e      	b.n	800336a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	3305      	adds	r3, #5
 8003368:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4a5c      	ldr	r2, [pc, #368]	; (80034e0 <HAL_I2S_Init+0x270>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	08db      	lsrs	r3, r3, #3
 8003374:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e003      	b.n	8003398 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003390:	2302      	movs	r3, #2
 8003392:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d902      	bls.n	80033a4 <HAL_I2S_Init+0x134>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2bff      	cmp	r3, #255	; 0xff
 80033a2:	d907      	bls.n	80033b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e08f      	b.n	80034d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	ea42 0103 	orr.w	r1, r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6851      	ldr	r1, [r2, #4]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6892      	ldr	r2, [r2, #8]
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68d2      	ldr	r2, [r2, #12]
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6992      	ldr	r2, [r2, #24]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d161      	bne.n	80034c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a38      	ldr	r2, [pc, #224]	; (80034e4 <HAL_I2S_Init+0x274>)
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <HAL_I2S_Init+0x278>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_I2S_Init+0x1a4>
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_I2S_Init+0x27c>)
 8003412:	e001      	b.n	8003418 <HAL_I2S_Init+0x1a8>
 8003414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	4932      	ldr	r1, [pc, #200]	; (80034e8 <HAL_I2S_Init+0x278>)
 8003420:	428a      	cmp	r2, r1
 8003422:	d101      	bne.n	8003428 <HAL_I2S_Init+0x1b8>
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_I2S_Init+0x27c>)
 8003426:	e001      	b.n	800342c <HAL_I2S_Init+0x1bc>
 8003428:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800342c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2b      	ldr	r2, [pc, #172]	; (80034e8 <HAL_I2S_Init+0x278>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_I2S_Init+0x1d4>
 8003440:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_I2S_Init+0x27c>)
 8003442:	e001      	b.n	8003448 <HAL_I2S_Init+0x1d8>
 8003444:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003448:	2202      	movs	r2, #2
 800344a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <HAL_I2S_Init+0x278>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_I2S_Init+0x1ea>
 8003456:	4b25      	ldr	r3, [pc, #148]	; (80034ec <HAL_I2S_Init+0x27c>)
 8003458:	e001      	b.n	800345e <HAL_I2S_Init+0x1ee>
 800345a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d003      	beq.n	8003474 <HAL_I2S_Init+0x204>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e001      	b.n	8003480 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800348a:	4313      	orrs	r3, r2
 800348c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003494:	4313      	orrs	r3, r2
 8003496:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800349e:	4313      	orrs	r3, r2
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <HAL_I2S_Init+0x278>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_I2S_Init+0x24c>
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_I2S_Init+0x27c>)
 80034ba:	e001      	b.n	80034c0 <HAL_I2S_Init+0x250>
 80034bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c0:	897a      	ldrh	r2, [r7, #10]
 80034c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	080035e7 	.word	0x080035e7
 80034e0:	cccccccd 	.word	0xcccccccd
 80034e4:	080036fd 	.word	0x080036fd
 80034e8:	40003800 	.word	0x40003800
 80034ec:	40003400 	.word	0x40003400

080034f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003570:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffb8 	bl	80034f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	b292      	uxth	r2, r2
 800359c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff93 	bl	8003504 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b086      	sub	sp, #24
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d13a      	bne.n	8003678 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d109      	bne.n	8003620 <I2S_IRQHandler+0x3a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	d102      	bne.n	8003620 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ffb4 	bl	8003588 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d126      	bne.n	8003678 <I2S_IRQHandler+0x92>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d11f      	bne.n	8003678 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003646:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ff50 	bl	8003518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b03      	cmp	r3, #3
 8003682:	d136      	bne.n	80036f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d109      	bne.n	80036a2 <I2S_IRQHandler+0xbc>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d102      	bne.n	80036a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff45 	bl	800352c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d122      	bne.n	80036f2 <I2S_IRQHandler+0x10c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d11b      	bne.n	80036f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff13 	bl	8003518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a92      	ldr	r2, [pc, #584]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003716:	4b92      	ldr	r3, [pc, #584]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003718:	e001      	b.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800371a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a8b      	ldr	r2, [pc, #556]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003734:	4b8a      	ldr	r3, [pc, #552]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003736:	e001      	b.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003748:	d004      	beq.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 8099 	bne.w	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f925 	bl	80039b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9c8 	bl	8003b18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d13a      	bne.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d035      	beq.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6e      	ldr	r2, [pc, #440]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037a6:	4b6e      	ldr	r3, [pc, #440]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a8:	e001      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4969      	ldr	r1, [pc, #420]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b6:	428b      	cmp	r3, r1
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037ba:	4b69      	ldr	r3, [pc, #420]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f043 0202 	orr.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fe88 	bl	8003518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b08      	cmp	r3, #8
 8003810:	f040 80c3 	bne.w	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80bd 	beq.w	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800382e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a49      	ldr	r2, [pc, #292]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800383c:	e001      	b.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800383e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4944      	ldr	r1, [pc, #272]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384a:	428b      	cmp	r3, r1
 800384c:	d101      	bne.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003850:	e001      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f043 0204 	orr.w	r2, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fe4a 	bl	8003518 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003884:	e089      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d107      	bne.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8be 	bl	8003a1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8fd 	bl	8003ab4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d12f      	bne.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d02a      	beq.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ea:	e001      	b.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4919      	ldr	r1, [pc, #100]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f8:	428b      	cmp	r3, r1
 80038fa:	d101      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fe:	e001      	b.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003908:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f043 0202 	orr.w	r2, r3, #2
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fdfa 	bl	8003518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b08      	cmp	r3, #8
 800392c:	d136      	bne.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d031      	beq.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a07      	ldr	r2, [pc, #28]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003944:	e001      	b.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4902      	ldr	r1, [pc, #8]	; (800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003952:	428b      	cmp	r3, r1
 8003954:	d106      	bne.n	8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003956:	4b02      	ldr	r3, [pc, #8]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003958:	e006      	b.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800395a:	bf00      	nop
 800395c:	40003800 	.word	0x40003800
 8003960:	40003400 	.word	0x40003400
 8003964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003968:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f043 0204 	orr.w	r2, r3, #4
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fdc0 	bl	8003518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003998:	e000      	b.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399a:	bf00      	nop
}
 800399c:	bf00      	nop
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c99      	adds	r1, r3, #2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6251      	str	r1, [r2, #36]	; 0x24
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d113      	bne.n	8003a12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffc9 	bl	80039a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c99      	adds	r1, r3, #2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a2e:	8819      	ldrh	r1, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <I2SEx_TxISR_I2SExt+0x90>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <I2SEx_TxISR_I2SExt+0x22>
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a3c:	e001      	b.n	8003a42 <I2SEx_TxISR_I2SExt+0x26>
 8003a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a42:	460a      	mov	r2, r1
 8003a44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d121      	bne.n	8003aa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <I2SEx_TxISR_I2SExt+0x90>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <I2SEx_TxISR_I2SExt+0x50>
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a6a:	e001      	b.n	8003a70 <I2SEx_TxISR_I2SExt+0x54>
 8003a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	490d      	ldr	r1, [pc, #52]	; (8003aac <I2SEx_TxISR_I2SExt+0x90>)
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	d101      	bne.n	8003a80 <I2SEx_TxISR_I2SExt+0x64>
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a7e:	e001      	b.n	8003a84 <I2SEx_TxISR_I2SExt+0x68>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff81 	bl	80039a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40003800 	.word	0x40003800
 8003ab0:	40003400 	.word	0x40003400

08003ab4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68d8      	ldr	r0, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	1c99      	adds	r1, r3, #2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003acc:	b282      	uxth	r2, r0
 8003ace:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d113      	bne.n	8003b10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003af6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ff4a 	bl	80039a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <I2SEx_RxISR_I2SExt+0x16>
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <I2SEx_RxISR_I2SExt+0x94>)
 8003b2c:	e001      	b.n	8003b32 <I2SEx_RxISR_I2SExt+0x1a>
 8003b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b32:	68d8      	ldr	r0, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	1c99      	adds	r1, r3, #2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b3e:	b282      	uxth	r2, r0
 8003b40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d121      	bne.n	8003b9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <I2SEx_RxISR_I2SExt+0x50>
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <I2SEx_RxISR_I2SExt+0x94>)
 8003b66:	e001      	b.n	8003b6c <I2SEx_RxISR_I2SExt+0x54>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	490d      	ldr	r1, [pc, #52]	; (8003ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b74:	428b      	cmp	r3, r1
 8003b76:	d101      	bne.n	8003b7c <I2SEx_RxISR_I2SExt+0x64>
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <I2SEx_RxISR_I2SExt+0x94>)
 8003b7a:	e001      	b.n	8003b80 <I2SEx_RxISR_I2SExt+0x68>
 8003b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff03 	bl	80039a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40003800 	.word	0x40003800
 8003bac:	40003400 	.word	0x40003400

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e267      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bce:	4b88      	ldr	r3, [pc, #544]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4b85      	ldr	r3, [pc, #532]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b82      	ldr	r3, [pc, #520]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b7e      	ldr	r3, [pc, #504]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e242      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a75      	ldr	r2, [pc, #468]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b70      	ldr	r3, [pc, #448]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6f      	ldr	r2, [pc, #444]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6c      	ldr	r2, [pc, #432]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b69      	ldr	r3, [pc, #420]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a68      	ldr	r2, [pc, #416]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b66      	ldr	r3, [pc, #408]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd faa4 	bl	80011b4 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd faa0 	bl	80011b4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e207      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fd fa90 	bl	80011b4 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd fa8c 	bl	80011b4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1f3      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1c7      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4937      	ldr	r1, [pc, #220]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HAL_RCC_OscConfig+0x244>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd fa45 	bl	80011b4 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fd fa41 	bl	80011b4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1a8      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4925      	ldr	r1, [pc, #148]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x244>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd fa24 	bl	80011b4 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fd fa20 	bl	80011b4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e187      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d036      	beq.n	8003e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_RCC_OscConfig+0x248>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fd fa04 	bl	80011b4 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fd fa00 	bl	80011b4 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e167      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
 8003dce:	e01b      	b.n	8003e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_OscConfig+0x248>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd f9ed 	bl	80011b4 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e00e      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fd f9e9 	bl	80011b4 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d907      	bls.n	8003dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e150      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	42470000 	.word	0x42470000
 8003df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ea      	bne.n	8003dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8097 	beq.w	8003f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1a:	4b81      	ldr	r3, [pc, #516]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a7c      	ldr	r2, [pc, #496]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b7a      	ldr	r3, [pc, #488]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b77      	ldr	r3, [pc, #476]	; (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b74      	ldr	r3, [pc, #464]	; (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a73      	ldr	r2, [pc, #460]	; (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd f9a9 	bl	80011b4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fd f9a5 	bl	80011b4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e10c      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x2ea>
 8003e8c:	4b64      	ldr	r3, [pc, #400]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a63      	ldr	r2, [pc, #396]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x324>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x30c>
 8003ea2:	4b5f      	ldr	r3, [pc, #380]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a5e      	ldr	r2, [pc, #376]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x324>
 8003ebc:	4b58      	ldr	r3, [pc, #352]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a57      	ldr	r2, [pc, #348]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	4b55      	ldr	r3, [pc, #340]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a54      	ldr	r2, [pc, #336]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 0304 	bic.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd f96a 	bl	80011b4 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fd f966 	bl	80011b4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0cb      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	4b49      	ldr	r3, [pc, #292]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x334>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fd f954 	bl	80011b4 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd f950 	bl	80011b4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0b5      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ee      	bne.n	8003f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	4a38      	ldr	r2, [pc, #224]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a1 	beq.w	8004090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d05c      	beq.n	8004014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d141      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b31      	ldr	r3, [pc, #196]	; (8004028 <HAL_RCC_OscConfig+0x478>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd f924 	bl	80011b4 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd f920 	bl	80011b4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e087      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b27      	ldr	r3, [pc, #156]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	491b      	ldr	r1, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x478>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd f8f9 	bl	80011b4 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fd f8f5 	bl	80011b4 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e05c      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x416>
 8003fe4:	e054      	b.n	8004090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCC_OscConfig+0x478>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd f8e2 	bl	80011b4 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fd f8de 	bl	80011b4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e045      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_OscConfig+0x470>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x444>
 8004012:	e03d      	b.n	8004090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e038      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
 8004028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x4ec>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d028      	beq.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d121      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d11a      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	3b01      	subs	r3, #1
 8004076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d107      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0cc      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b68      	ldr	r3, [pc, #416]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d90c      	bls.n	80040dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0b8      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f4:	4b59      	ldr	r3, [pc, #356]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a52      	ldr	r2, [pc, #328]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	494d      	ldr	r1, [pc, #308]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d119      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d003      	beq.n	800415e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b3f      	ldr	r3, [pc, #252]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e067      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4934      	ldr	r1, [pc, #208]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fd f810 	bl	80011b4 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd f80c 	bl	80011b4 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e04f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d20c      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e032      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4916      	ldr	r1, [pc, #88]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490e      	ldr	r1, [pc, #56]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004226:	f000 f821 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc ff70 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023c00 	.word	0x40023c00
 800425c:	40023800 	.word	0x40023800
 8004260:	08008f7c 	.word	0x08008f7c
 8004264:	20000004 	.word	0x20000004
 8004268:	20000008 	.word	0x20000008

0800426c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004270:	b094      	sub	sp, #80	; 0x50
 8004272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	647b      	str	r3, [r7, #68]	; 0x44
 8004278:	2300      	movs	r3, #0
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	2300      	movs	r3, #0
 800427e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004284:	4b79      	ldr	r3, [pc, #484]	; (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d00d      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x40>
 8004290:	2b08      	cmp	r3, #8
 8004292:	f200 80e1 	bhi.w	8004458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x34>
 800429a:	2b04      	cmp	r3, #4
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800429e:	e0db      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b73      	ldr	r3, [pc, #460]	; (8004470 <HAL_RCC_GetSysClockFreq+0x204>)
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042a4:	e0db      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a6:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCC_GetSysClockFreq+0x208>)
 80042a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042aa:	e0d8      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ac:	4b6f      	ldr	r3, [pc, #444]	; (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b6:	4b6d      	ldr	r3, [pc, #436]	; (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d063      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c2:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	2200      	movs	r2, #0
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80042cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
 80042d6:	2300      	movs	r3, #0
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
 80042da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	0159      	lsls	r1, r3, #5
 80042ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f0:	0150      	lsls	r0, r2, #5
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4621      	mov	r1, r4
 80042f8:	1a51      	subs	r1, r2, r1
 80042fa:	6139      	str	r1, [r7, #16]
 80042fc:	4629      	mov	r1, r5
 80042fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004310:	4659      	mov	r1, fp
 8004312:	018b      	lsls	r3, r1, #6
 8004314:	4651      	mov	r1, sl
 8004316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800431a:	4651      	mov	r1, sl
 800431c:	018a      	lsls	r2, r1, #6
 800431e:	4651      	mov	r1, sl
 8004320:	ebb2 0801 	subs.w	r8, r2, r1
 8004324:	4659      	mov	r1, fp
 8004326:	eb63 0901 	sbc.w	r9, r3, r1
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433e:	4690      	mov	r8, r2
 8004340:	4699      	mov	r9, r3
 8004342:	4623      	mov	r3, r4
 8004344:	eb18 0303 	adds.w	r3, r8, r3
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	462b      	mov	r3, r5
 800434c:	eb49 0303 	adc.w	r3, r9, r3
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800435e:	4629      	mov	r1, r5
 8004360:	024b      	lsls	r3, r1, #9
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004368:	4621      	mov	r1, r4
 800436a:	024a      	lsls	r2, r1, #9
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004372:	2200      	movs	r2, #0
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 8004376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800437c:	f7fb ff24 	bl	80001c8 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004388:	e058      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	2200      	movs	r2, #0
 8004392:	4618      	mov	r0, r3
 8004394:	4611      	mov	r1, r2
 8004396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800439a:	623b      	str	r3, [r7, #32]
 800439c:	2300      	movs	r3, #0
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
 80043a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043a4:	4642      	mov	r2, r8
 80043a6:	464b      	mov	r3, r9
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	0159      	lsls	r1, r3, #5
 80043b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b6:	0150      	lsls	r0, r2, #5
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4641      	mov	r1, r8
 80043be:	ebb2 0a01 	subs.w	sl, r2, r1
 80043c2:	4649      	mov	r1, r9
 80043c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043dc:	ebb2 040a 	subs.w	r4, r2, sl
 80043e0:	eb63 050b 	sbc.w	r5, r3, fp
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	00eb      	lsls	r3, r5, #3
 80043ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f2:	00e2      	lsls	r2, r4, #3
 80043f4:	4614      	mov	r4, r2
 80043f6:	461d      	mov	r5, r3
 80043f8:	4643      	mov	r3, r8
 80043fa:	18e3      	adds	r3, r4, r3
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	464b      	mov	r3, r9
 8004400:	eb45 0303 	adc.w	r3, r5, r3
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004412:	4629      	mov	r1, r5
 8004414:	028b      	lsls	r3, r1, #10
 8004416:	4621      	mov	r1, r4
 8004418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800441c:	4621      	mov	r1, r4
 800441e:	028a      	lsls	r2, r1, #10
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004426:	2200      	movs	r2, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	61fa      	str	r2, [r7, #28]
 800442c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004430:	f7fb feca 	bl	80001c8 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800444c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800444e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetSysClockFreq+0x204>)
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004460:	4618      	mov	r0, r3
 8004462:	3750      	adds	r7, #80	; 0x50
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	00f42400 	.word	0x00f42400
 8004474:	007a1200 	.word	0x007a1200

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000004 	.word	0x20000004

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004494:	f7ff fff0 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0a9b      	lsrs	r3, r3, #10
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4903      	ldr	r1, [pc, #12]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	08008f8c 	.word	0x08008f8c

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044bc:	f7ff ffdc 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0b5b      	lsrs	r3, r3, #13
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	08008f8c 	.word	0x08008f8c

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004504:	2b00      	cmp	r3, #0
 8004506:	d035      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004508:	4b62      	ldr	r3, [pc, #392]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800450e:	f7fc fe51 	bl	80011b4 <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004516:	f7fc fe4d 	bl	80011b4 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0b0      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004528:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	019a      	lsls	r2, r3, #6
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	071b      	lsls	r3, r3, #28
 8004540:	4955      	ldr	r1, [pc, #340]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004548:	4b52      	ldr	r3, [pc, #328]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800454e:	f7fc fe31 	bl	80011b4 <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004556:	f7fc fe2d 	bl	80011b4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e090      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004568:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8083 	beq.w	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	4b44      	ldr	r3, [pc, #272]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a43      	ldr	r2, [pc, #268]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b41      	ldr	r3, [pc, #260]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a3e      	ldr	r2, [pc, #248]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045aa:	f7fc fe03 	bl	80011b4 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fc fdff 	bl	80011b4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e062      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045c4:	4b35      	ldr	r3, [pc, #212]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02f      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d028      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004604:	4a24      	ldr	r2, [pc, #144]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800460a:	4b23      	ldr	r3, [pc, #140]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d114      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004616:	f7fc fdcd 	bl	80011b4 <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fc fdc9 	bl	80011b4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e02a      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800464c:	d10d      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800465e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004662:	490d      	ldr	r1, [pc, #52]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]
 8004668:	e005      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004674:	6093      	str	r3, [r2, #8]
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004678:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004682:	4905      	ldr	r1, [pc, #20]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	4313      	orrs	r3, r2
 8004686:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	42470068 	.word	0x42470068
 8004698:	40023800 	.word	0x40023800
 800469c:	40007000 	.word	0x40007000
 80046a0:	42470e40 	.word	0x42470e40

080046a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d13e      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046c2:	4b23      	ldr	r3, [pc, #140]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d12f      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046da:	617b      	str	r3, [r7, #20]
          break;
 80046dc:	e02f      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d108      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	e007      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004728:	0f1b      	lsrs	r3, r3, #28
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
          break;
 8004736:	e002      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
          break;
 800473c:	bf00      	nop
        }
      }
      break;
 800473e:	bf00      	nop
    }
  }
  return frequency;
 8004740:	697b      	ldr	r3, [r7, #20]
}
 8004742:	4618      	mov	r0, r3
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	00bb8000 	.word	0x00bb8000
 8004758:	007a1200 	.word	0x007a1200
 800475c:	00f42400 	.word	0x00f42400

08004760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07b      	b.n	800486a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004782:	d009      	beq.n	8004798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
 800478a:	e005      	b.n	8004798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fb2c 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0104 	and.w	r1, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	f003 0210 	and.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e041      	b.n	8004908 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fc fb01 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f000 fa9f 	bl	8004df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d001      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e04e      	b.n	80049c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d01d      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_TIM_Base_Start_IT+0xdc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d111      	bne.n	80049b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d010      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	e007      	b.n	80049c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40000c00 	.word	0x40000c00
 80049e4:	40010400 	.word	0x40010400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40001800 	.word	0x40001800

080049f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0202 	mvn.w	r2, #2
 8004a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9bf 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9b1 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9c2 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0204 	mvn.w	r2, #4
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f995 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f987 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f998 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f96b 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f95d 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f96e 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f941 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f933 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f944 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10e      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f90d 	bl	8004d8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 faea 	bl	8005174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f909 	bl	8004dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0220 	mvn.w	r2, #32
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fab4 	bl	8005160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_TIM_ConfigClockSource+0x1c>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e0b4      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x186>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c54:	d03e      	beq.n	8004cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5a:	f200 8087 	bhi.w	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	f000 8086 	beq.w	8004d72 <HAL_TIM_ConfigClockSource+0x172>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d87f      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b70      	cmp	r3, #112	; 0x70
 8004c6e:	d01a      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d87b      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b60      	cmp	r3, #96	; 0x60
 8004c76:	d050      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x11a>
 8004c78:	2b60      	cmp	r3, #96	; 0x60
 8004c7a:	d877      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b50      	cmp	r3, #80	; 0x50
 8004c7e:	d03c      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xfa>
 8004c80:	2b50      	cmp	r3, #80	; 0x50
 8004c82:	d873      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d058      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x13a>
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d86f      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b30      	cmp	r3, #48	; 0x30
 8004c8e:	d064      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x15a>
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d86b      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d060      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d867      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d05c      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d05a      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	e062      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6899      	ldr	r1, [r3, #8]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f000 f9b7 	bl	8005028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	609a      	str	r2, [r3, #8]
      break;
 8004cd2:	e04f      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6899      	ldr	r1, [r3, #8]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f000 f9a0 	bl	8005028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf6:	609a      	str	r2, [r3, #8]
      break;
 8004cf8:	e03c      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f000 f914 	bl	8004f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2150      	movs	r1, #80	; 0x50
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f96d 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d18:	e02c      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 f933 	bl	8004f92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2160      	movs	r1, #96	; 0x60
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f95d 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e01c      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 f8f4 	bl	8004f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2140      	movs	r1, #64	; 0x40
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f94d 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d58:	e00c      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f000 f944 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d6a:	e003      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d70:	e000      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a40      	ldr	r2, [pc, #256]	; (8004f08 <TIM_Base_SetConfig+0x114>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3d      	ldr	r2, [pc, #244]	; (8004f0c <TIM_Base_SetConfig+0x118>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3c      	ldr	r2, [pc, #240]	; (8004f10 <TIM_Base_SetConfig+0x11c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3b      	ldr	r2, [pc, #236]	; (8004f14 <TIM_Base_SetConfig+0x120>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3a      	ldr	r2, [pc, #232]	; (8004f18 <TIM_Base_SetConfig+0x124>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2f      	ldr	r2, [pc, #188]	; (8004f08 <TIM_Base_SetConfig+0x114>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d02b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e54:	d027      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <TIM_Base_SetConfig+0x118>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d023      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <TIM_Base_SetConfig+0x11c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01f      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <TIM_Base_SetConfig+0x120>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a29      	ldr	r2, [pc, #164]	; (8004f18 <TIM_Base_SetConfig+0x124>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d017      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <TIM_Base_SetConfig+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00f      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a25      	ldr	r2, [pc, #148]	; (8004f28 <TIM_Base_SetConfig+0x134>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a24      	ldr	r2, [pc, #144]	; (8004f2c <TIM_Base_SetConfig+0x138>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <TIM_Base_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0xf8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <TIM_Base_SetConfig+0x124>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40010400 	.word	0x40010400
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800
 8004f28:	40001800 	.word	0x40001800
 8004f2c:	40001c00 	.word	0x40001c00
 8004f30:	40002000 	.word	0x40002000

08004f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 030a 	bic.w	r3, r3, #10
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0210 	bic.w	r2, r3, #16
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	031b      	lsls	r3, r3, #12
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	f043 0307 	orr.w	r3, r3, #7
 8005014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	609a      	str	r2, [r3, #8]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	021a      	lsls	r2, r3, #8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	431a      	orrs	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800507c:	2302      	movs	r3, #2
 800507e:	e05a      	b.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a21      	ldr	r2, [pc, #132]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d01d      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10c      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40010400 	.word	0x40010400
 8005158:	40014000 	.word	0x40014000
 800515c:	40001800 	.word	0x40001800

08005160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e03f      	b.n	800521a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fb fe9c 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	; 0x24
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f829 	bl	8005224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b0c0      	sub	sp, #256	; 0x100
 800522a:	af00      	add	r7, sp, #0
 800522c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	68d9      	ldr	r1, [r3, #12]
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	ea40 0301 	orr.w	r3, r0, r1
 800524c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	431a      	orrs	r2, r3
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800527c:	f021 010c 	bic.w	r1, r1, #12
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800528a:	430b      	orrs	r3, r1
 800528c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	6999      	ldr	r1, [r3, #24]
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	ea40 0301 	orr.w	r3, r0, r1
 80052aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b8f      	ldr	r3, [pc, #572]	; (80054f0 <UART_SetConfig+0x2cc>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d005      	beq.n	80052c4 <UART_SetConfig+0xa0>
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b8d      	ldr	r3, [pc, #564]	; (80054f4 <UART_SetConfig+0x2d0>)
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d104      	bne.n	80052ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7ff f8f8 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 80052c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052cc:	e003      	b.n	80052d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ce:	f7ff f8df 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 80052d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e0:	f040 810c 	bne.w	80054fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	1891      	adds	r1, r2, r2
 80052fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80052fe:	415b      	adcs	r3, r3
 8005300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005306:	4621      	mov	r1, r4
 8005308:	eb12 0801 	adds.w	r8, r2, r1
 800530c:	4629      	mov	r1, r5
 800530e:	eb43 0901 	adc.w	r9, r3, r1
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005326:	4690      	mov	r8, r2
 8005328:	4699      	mov	r9, r3
 800532a:	4623      	mov	r3, r4
 800532c:	eb18 0303 	adds.w	r3, r8, r3
 8005330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005334:	462b      	mov	r3, r5
 8005336:	eb49 0303 	adc.w	r3, r9, r3
 800533a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800534a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800534e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005352:	460b      	mov	r3, r1
 8005354:	18db      	adds	r3, r3, r3
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
 8005358:	4613      	mov	r3, r2
 800535a:	eb42 0303 	adc.w	r3, r2, r3
 800535e:	657b      	str	r3, [r7, #84]	; 0x54
 8005360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005368:	f7fa ff2e 	bl	80001c8 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4b61      	ldr	r3, [pc, #388]	; (80054f8 <UART_SetConfig+0x2d4>)
 8005372:	fba3 2302 	umull	r2, r3, r3, r2
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	011c      	lsls	r4, r3, #4
 800537a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537e:	2200      	movs	r2, #0
 8005380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800538c:	4642      	mov	r2, r8
 800538e:	464b      	mov	r3, r9
 8005390:	1891      	adds	r1, r2, r2
 8005392:	64b9      	str	r1, [r7, #72]	; 0x48
 8005394:	415b      	adcs	r3, r3
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800539c:	4641      	mov	r1, r8
 800539e:	eb12 0a01 	adds.w	sl, r2, r1
 80053a2:	4649      	mov	r1, r9
 80053a4:	eb43 0b01 	adc.w	fp, r3, r1
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053bc:	4692      	mov	sl, r2
 80053be:	469b      	mov	fp, r3
 80053c0:	4643      	mov	r3, r8
 80053c2:	eb1a 0303 	adds.w	r3, sl, r3
 80053c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ca:	464b      	mov	r3, r9
 80053cc:	eb4b 0303 	adc.w	r3, fp, r3
 80053d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053e8:	460b      	mov	r3, r1
 80053ea:	18db      	adds	r3, r3, r3
 80053ec:	643b      	str	r3, [r7, #64]	; 0x40
 80053ee:	4613      	mov	r3, r2
 80053f0:	eb42 0303 	adc.w	r3, r2, r3
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
 80053f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053fe:	f7fa fee3 	bl	80001c8 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4611      	mov	r1, r2
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <UART_SetConfig+0x2d4>)
 800540a:	fba3 2301 	umull	r2, r3, r3, r1
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2264      	movs	r2, #100	; 0x64
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	1acb      	subs	r3, r1, r3
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800541e:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <UART_SetConfig+0x2d4>)
 8005420:	fba3 2302 	umull	r2, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800542c:	441c      	add	r4, r3
 800542e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800543c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	1891      	adds	r1, r2, r2
 8005446:	63b9      	str	r1, [r7, #56]	; 0x38
 8005448:	415b      	adcs	r3, r3
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005450:	4641      	mov	r1, r8
 8005452:	1851      	adds	r1, r2, r1
 8005454:	6339      	str	r1, [r7, #48]	; 0x30
 8005456:	4649      	mov	r1, r9
 8005458:	414b      	adcs	r3, r1
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005468:	4659      	mov	r1, fp
 800546a:	00cb      	lsls	r3, r1, #3
 800546c:	4651      	mov	r1, sl
 800546e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005472:	4651      	mov	r1, sl
 8005474:	00ca      	lsls	r2, r1, #3
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	4603      	mov	r3, r0
 800547c:	4642      	mov	r2, r8
 800547e:	189b      	adds	r3, r3, r2
 8005480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005484:	464b      	mov	r3, r9
 8005486:	460a      	mov	r2, r1
 8005488:	eb42 0303 	adc.w	r3, r2, r3
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800549c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054a4:	460b      	mov	r3, r1
 80054a6:	18db      	adds	r3, r3, r3
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054aa:	4613      	mov	r3, r2
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ba:	f7fa fe85 	bl	80001c8 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <UART_SetConfig+0x2d4>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <UART_SetConfig+0x2d4>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 0207 	and.w	r2, r3, #7
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4422      	add	r2, r4
 80054ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054ec:	e106      	b.n	80056fc <UART_SetConfig+0x4d8>
 80054ee:	bf00      	nop
 80054f0:	40011000 	.word	0x40011000
 80054f4:	40011400 	.word	0x40011400
 80054f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005500:	2200      	movs	r2, #0
 8005502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800550a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800550e:	4642      	mov	r2, r8
 8005510:	464b      	mov	r3, r9
 8005512:	1891      	adds	r1, r2, r2
 8005514:	6239      	str	r1, [r7, #32]
 8005516:	415b      	adcs	r3, r3
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800551e:	4641      	mov	r1, r8
 8005520:	1854      	adds	r4, r2, r1
 8005522:	4649      	mov	r1, r9
 8005524:	eb43 0501 	adc.w	r5, r3, r1
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	00eb      	lsls	r3, r5, #3
 8005532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005536:	00e2      	lsls	r2, r4, #3
 8005538:	4614      	mov	r4, r2
 800553a:	461d      	mov	r5, r3
 800553c:	4643      	mov	r3, r8
 800553e:	18e3      	adds	r3, r4, r3
 8005540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005544:	464b      	mov	r3, r9
 8005546:	eb45 0303 	adc.w	r3, r5, r3
 800554a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800555a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800556a:	4629      	mov	r1, r5
 800556c:	008b      	lsls	r3, r1, #2
 800556e:	4621      	mov	r1, r4
 8005570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005574:	4621      	mov	r1, r4
 8005576:	008a      	lsls	r2, r1, #2
 8005578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800557c:	f7fa fe24 	bl	80001c8 <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4b60      	ldr	r3, [pc, #384]	; (8005708 <UART_SetConfig+0x4e4>)
 8005586:	fba3 2302 	umull	r2, r3, r3, r2
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	011c      	lsls	r4, r3, #4
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800559c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	1891      	adds	r1, r2, r2
 80055a6:	61b9      	str	r1, [r7, #24]
 80055a8:	415b      	adcs	r3, r3
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b0:	4641      	mov	r1, r8
 80055b2:	1851      	adds	r1, r2, r1
 80055b4:	6139      	str	r1, [r7, #16]
 80055b6:	4649      	mov	r1, r9
 80055b8:	414b      	adcs	r3, r1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c8:	4659      	mov	r1, fp
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4651      	mov	r1, sl
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4642      	mov	r2, r8
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e4:	464b      	mov	r3, r9
 80055e6:	460a      	mov	r2, r1
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005608:	4649      	mov	r1, r9
 800560a:	008b      	lsls	r3, r1, #2
 800560c:	4641      	mov	r1, r8
 800560e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005612:	4641      	mov	r1, r8
 8005614:	008a      	lsls	r2, r1, #2
 8005616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800561a:	f7fa fdd5 	bl	80001c8 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4611      	mov	r1, r2
 8005624:	4b38      	ldr	r3, [pc, #224]	; (8005708 <UART_SetConfig+0x4e4>)
 8005626:	fba3 2301 	umull	r2, r3, r3, r1
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2264      	movs	r2, #100	; 0x64
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	1acb      	subs	r3, r1, r3
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	3332      	adds	r3, #50	; 0x32
 8005638:	4a33      	ldr	r2, [pc, #204]	; (8005708 <UART_SetConfig+0x4e4>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005644:	441c      	add	r4, r3
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564a:	2200      	movs	r2, #0
 800564c:	673b      	str	r3, [r7, #112]	; 0x70
 800564e:	677a      	str	r2, [r7, #116]	; 0x74
 8005650:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005654:	4642      	mov	r2, r8
 8005656:	464b      	mov	r3, r9
 8005658:	1891      	adds	r1, r2, r2
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	415b      	adcs	r3, r3
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005664:	4641      	mov	r1, r8
 8005666:	1851      	adds	r1, r2, r1
 8005668:	6039      	str	r1, [r7, #0]
 800566a:	4649      	mov	r1, r9
 800566c:	414b      	adcs	r3, r1
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800567c:	4659      	mov	r1, fp
 800567e:	00cb      	lsls	r3, r1, #3
 8005680:	4651      	mov	r1, sl
 8005682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005686:	4651      	mov	r1, sl
 8005688:	00ca      	lsls	r2, r1, #3
 800568a:	4610      	mov	r0, r2
 800568c:	4619      	mov	r1, r3
 800568e:	4603      	mov	r3, r0
 8005690:	4642      	mov	r2, r8
 8005692:	189b      	adds	r3, r3, r2
 8005694:	66bb      	str	r3, [r7, #104]	; 0x68
 8005696:	464b      	mov	r3, r9
 8005698:	460a      	mov	r2, r1
 800569a:	eb42 0303 	adc.w	r3, r2, r3
 800569e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	663b      	str	r3, [r7, #96]	; 0x60
 80056aa:	667a      	str	r2, [r7, #100]	; 0x64
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056b8:	4649      	mov	r1, r9
 80056ba:	008b      	lsls	r3, r1, #2
 80056bc:	4641      	mov	r1, r8
 80056be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c2:	4641      	mov	r1, r8
 80056c4:	008a      	lsls	r2, r1, #2
 80056c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056ca:	f7fa fd7d 	bl	80001c8 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <UART_SetConfig+0x4e4>)
 80056d4:	fba3 1302 	umull	r1, r3, r3, r2
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	2164      	movs	r1, #100	; 0x64
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	3332      	adds	r3, #50	; 0x32
 80056e6:	4a08      	ldr	r2, [pc, #32]	; (8005708 <UART_SetConfig+0x4e4>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4422      	add	r2, r4
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005702:	46bd      	mov	sp, r7
 8005704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005708:	51eb851f 	.word	0x51eb851f

0800570c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800570c:	b084      	sub	sp, #16
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	f107 001c 	add.w	r0, r7, #28
 800571a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	2b01      	cmp	r3, #1
 8005722:	d122      	bne.n	800576a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d105      	bne.n	800575e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9c0 	bl	8005ae4 <USB_CoreReset>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e01a      	b.n	80057a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9b4 	bl	8005ae4 <USB_CoreReset>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
 8005792:	e005      	b.n	80057a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10b      	bne.n	80057be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f043 0206 	orr.w	r2, r3, #6
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ca:	b004      	add	sp, #16
 80057cc:	4770      	bx	lr

080057ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f043 0201 	orr.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f023 0201 	bic.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d115      	bne.n	8005860 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005840:	2001      	movs	r0, #1
 8005842:	f7fb fcc3 	bl	80011cc <HAL_Delay>
      ms++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f93a 	bl	8005ac6 <USB_GetMode>
 8005852:	4603      	mov	r3, r0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d01e      	beq.n	8005896 <USB_SetCurrentMode+0x84>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b31      	cmp	r3, #49	; 0x31
 800585c:	d9f0      	bls.n	8005840 <USB_SetCurrentMode+0x2e>
 800585e:	e01a      	b.n	8005896 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d115      	bne.n	8005892 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005872:	2001      	movs	r0, #1
 8005874:	f7fb fcaa 	bl	80011cc <HAL_Delay>
      ms++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f921 	bl	8005ac6 <USB_GetMode>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <USB_SetCurrentMode+0x84>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b31      	cmp	r3, #49	; 0x31
 800588e:	d9f0      	bls.n	8005872 <USB_SetCurrentMode+0x60>
 8005890:	e001      	b.n	8005896 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e005      	b.n	80058a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b32      	cmp	r3, #50	; 0x32
 800589a:	d101      	bne.n	80058a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <USB_FlushTxFifo+0x64>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01b      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	daf2      	bge.n	80058ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <USB_FlushTxFifo+0x64>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e006      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d0f0      	beq.n	80058e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	00030d40 	.word	0x00030d40

08005914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a11      	ldr	r2, [pc, #68]	; (8005970 <USB_FlushRxFifo+0x5c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e018      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	daf2      	bge.n	8005920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2210      	movs	r2, #16
 8005942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <USB_FlushRxFifo+0x5c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e006      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d0f0      	beq.n	8005944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	00030d40 	.word	0x00030d40

08005974 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	460b      	mov	r3, r1
 8005984:	71fb      	strb	r3, [r7, #7]
 8005986:	4613      	mov	r3, r2
 8005988:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d123      	bne.n	80059e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	3303      	adds	r3, #3
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e018      	b.n	80059da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	031a      	lsls	r2, r3, #12
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b4:	461a      	mov	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3e2      	bcc.n	80059a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3724      	adds	r7, #36	; 0x24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	e014      	b.n	8005a46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	3301      	adds	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	3301      	adds	r3, #1
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	3301      	adds	r3, #1
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3e6      	bcc.n	8005a1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a4e:	8bfb      	ldrh	r3, [r7, #30]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01e      	beq.n	8005a92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f107 0310 	add.w	r3, r7, #16
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	701a      	strb	r2, [r3, #0]
      i++;
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	3301      	adds	r3, #1
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a86:	8bfb      	ldrh	r3, [r7, #30]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a8c:	8bfb      	ldrh	r3, [r7, #30]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1ea      	bne.n	8005a68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	372c      	adds	r7, #44	; 0x2c
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <USB_CoreReset+0x64>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e01b      	b.n	8005b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	daf2      	bge.n	8005af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f043 0201 	orr.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <USB_CoreReset+0x64>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e006      	b.n	8005b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d0f0      	beq.n	8005b1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	00030d40 	.word	0x00030d40

08005b4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d10a      	bne.n	8005bbe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e014      	b.n	8005be8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e009      	b.n	8005be8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be2:	f023 0304 	bic.w	r3, r3, #4
 8005be6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be8:	2110      	movs	r1, #16
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fe5e 	bl	80058ac <USB_FlushTxFifo>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe8a 	bl	8005914 <USB_FlushRxFifo>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	e015      	b.n	8005c3c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3e5      	bcc.n	8005c10 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <USB_HostInit+0x16c>)
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <USB_HostInit+0x170>)
 8005c70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c74:	e009      	b.n	8005c8a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <USB_HostInit+0x174>)
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a0f      	ldr	r2, [pc, #60]	; (8005cc4 <USB_HostInit+0x178>)
 8005c86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f043 0210 	orr.w	r2, r3, #16
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <USB_HostInit+0x17c>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb4:	b004      	add	sp, #16
 8005cb6:	4770      	bx	lr
 8005cb8:	01000200 	.word	0x01000200
 8005cbc:	00e00300 	.word	0x00e00300
 8005cc0:	00600080 	.word	0x00600080
 8005cc4:	004000e0 	.word	0x004000e0
 8005cc8:	a3200008 	.word	0xa3200008

08005ccc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d14:	461a      	mov	r2, r3
 8005d16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	e009      	b.n	8005d32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d106      	bne.n	8005d32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d70:	2064      	movs	r0, #100	; 0x64
 8005d72:	f7fb fa2b 	bl	80011cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d84:	200a      	movs	r0, #10
 8005d86:	f7fb fa21 	bl	80011cc <HAL_Delay>

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005db8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <USB_DriveVbus+0x44>
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d106      	bne.n	8005dd8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dd6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d109      	bne.n	8005df8 <USB_DriveVbus+0x64>
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	0c5b      	lsrs	r3, r3, #17
 8005e24:	f003 0303 	and.w	r3, r3, #3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	b29b      	uxth	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	70fb      	strb	r3, [r7, #3]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70bb      	strb	r3, [r7, #2]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d87e      	bhi.n	8005f94 <USB_HC_Init+0x13c>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USB_HC_Init+0x44>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005f57 	.word	0x08005f57
 8005ea4:	08005ead 	.word	0x08005ead
 8005ea8:	08005f19 	.word	0x08005f19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ebe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ec0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	da10      	bge.n	8005eea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ee8:	e057      	b.n	8005f9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d051      	beq.n	8005f9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f14:	60d3      	str	r3, [r2, #12]
      break;
 8005f16:	e040      	b.n	8005f9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f24:	461a      	mov	r2, r3
 8005f26:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da34      	bge.n	8005f9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f54:	e023      	b.n	8005f9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	461a      	mov	r2, r3
 8005f64:	f240 2325 	movw	r3, #549	; 0x225
 8005f68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da17      	bge.n	8005fa2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f92:	e006      	b.n	8005fa2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	77fb      	strb	r3, [r7, #31]
      break;
 8005f98:	e004      	b.n	8005fa4 <USB_HC_Init+0x14c>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <USB_HC_Init+0x14c>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <USB_HC_Init+0x14c>
      break;
 8005fa2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	6939      	ldr	r1, [r7, #16]
 8005fda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da03      	bge.n	8005ffe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e001      	b.n	8006002 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff feff 	bl	8005e06 <USB_GetHostSpeed>
 8006008:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800600a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800600e:	2b02      	cmp	r3, #2
 8006010:	d106      	bne.n	8006020 <USB_HC_Init+0x1c8>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d003      	beq.n	8006020 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e001      	b.n	8006024 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006024:	787b      	ldrb	r3, [r7, #1]
 8006026:	059b      	lsls	r3, r3, #22
 8006028:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800602c:	78bb      	ldrb	r3, [r7, #2]
 800602e:	02db      	lsls	r3, r3, #11
 8006030:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006034:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800603a:	049b      	lsls	r3, r3, #18
 800603c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006040:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006042:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006044:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006048:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	0159      	lsls	r1, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	440b      	add	r3, r1
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006060:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006062:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006066:	2b03      	cmp	r3, #3
 8006068:	d003      	beq.n	8006072 <USB_HC_Init+0x21a>
 800606a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10f      	bne.n	8006092 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006090:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08c      	sub	sp, #48	; 0x30
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02d      	beq.n	8006122 <USB_HC_StartXfer+0x86>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	791b      	ldrb	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d129      	bne.n	8006122 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d117      	bne.n	8006104 <USB_HC_StartXfer+0x68>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	79db      	ldrb	r3, [r3, #7]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <USB_HC_StartXfer+0x48>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	79db      	ldrb	r3, [r3, #7]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d10f      	bne.n	8006104 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006102:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <USB_HC_StartXfer+0x86>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	795b      	ldrb	r3, [r3, #5]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d107      	bne.n	8006122 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa0f 	bl	800653c <USB_DoPing>
      return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e0f8      	b.n	8006314 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	8912      	ldrh	r2, [r2, #8]
 8006132:	4413      	add	r3, r2
 8006134:	3b01      	subs	r3, #1
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	8912      	ldrh	r2, [r2, #8]
 800613a:	fbb3 f3f2 	udiv	r3, r3, r2
 800613e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006140:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006142:	8b7b      	ldrh	r3, [r7, #26]
 8006144:	429a      	cmp	r2, r3
 8006146:	d90b      	bls.n	8006160 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006148:	8b7b      	ldrh	r3, [r7, #26]
 800614a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800614c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	8912      	ldrh	r2, [r2, #8]
 8006152:	fb03 f202 	mul.w	r2, r3, r2
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	611a      	str	r2, [r3, #16]
 800615a:	e001      	b.n	8006160 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800615c:	2301      	movs	r3, #1
 800615e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	8912      	ldrh	r2, [r2, #8]
 800616e:	fb03 f202 	mul.w	r2, r3, r2
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	611a      	str	r2, [r3, #16]
 8006176:	e003      	b.n	8006180 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800618a:	04d9      	lsls	r1, r3, #19
 800618c:	4b63      	ldr	r3, [pc, #396]	; (800631c <USB_HC_StartXfer+0x280>)
 800618e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006190:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	7a9b      	ldrb	r3, [r3, #10]
 8006196:	075b      	lsls	r3, r3, #29
 8006198:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800619c:	69f9      	ldr	r1, [r7, #28]
 800619e:	0148      	lsls	r0, r1, #5
 80061a0:	6a39      	ldr	r1, [r7, #32]
 80061a2:	4401      	add	r1, r0
 80061a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	68d9      	ldr	r1, [r3, #12]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	460a      	mov	r2, r1
 80061c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	6a3a      	ldr	r2, [r7, #32]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	7e7b      	ldrb	r3, [r7, #25]
 800620e:	075b      	lsls	r3, r3, #29
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	0148      	lsls	r0, r1, #5
 8006214:	6a39      	ldr	r1, [r7, #32]
 8006216:	4401      	add	r1, r0
 8006218:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006236:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e003      	b.n	8006252 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006250:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006258:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	461a      	mov	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e04e      	b.n	8006314 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	78db      	ldrb	r3, [r3, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d149      	bne.n	8006312 <USB_HC_StartXfer+0x276>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d045      	beq.n	8006312 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	79db      	ldrb	r3, [r3, #7]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d830      	bhi.n	80062f0 <USB_HC_StartXfer+0x254>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USB_HC_StartXfer+0x1f8>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062c9 	.word	0x080062c9
 800629c:	080062a5 	.word	0x080062a5
 80062a0:	080062c9 	.word	0x080062c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	3303      	adds	r3, #3
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062ae:	8afa      	ldrh	r2, [r7, #22]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d91c      	bls.n	80062f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80062c6:	e015      	b.n	80062f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	3303      	adds	r3, #3
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062d2:	8afa      	ldrh	r2, [r7, #22]
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	429a      	cmp	r2, r3
 80062e0:	d90a      	bls.n	80062f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80062ee:	e003      	b.n	80062f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80062f0:	bf00      	nop
 80062f2:	e002      	b.n	80062fa <USB_HC_StartXfer+0x25e>
        break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <USB_HC_StartXfer+0x25e>
        break;
 80062f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785a      	ldrb	r2, [r3, #1]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	b29b      	uxth	r3, r3
 8006308:	2000      	movs	r0, #0
 800630a:	9000      	str	r0, [sp, #0]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fb31 	bl	8005974 <USB_WritePacket>
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3728      	adds	r7, #40	; 0x28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	1ff80000 	.word	0x1ff80000

08006320 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	b29b      	uxth	r3, r3
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006342:	b480      	push	{r7}
 8006344:	b089      	sub	sp, #36	; 0x24
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	0c9b      	lsrs	r3, r3, #18
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	0fdb      	lsrs	r3, r3, #31
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b20      	cmp	r3, #32
 8006390:	d104      	bne.n	800639c <USB_HC_Halt+0x5a>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e0c8      	b.n	800652e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <USB_HC_Halt+0x66>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d163      	bne.n	8006470 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 80ab 	bne.w	800652c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d133      	bne.n	800644a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006400:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	440a      	add	r2, r1
 8006418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006420:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3301      	adds	r3, #1
 8006426:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642e:	d81d      	bhi.n	800646c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006446:	d0ec      	beq.n	8006422 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006448:	e070      	b.n	800652c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	440a      	add	r2, r1
 8006460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006468:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800646a:	e05f      	b.n	800652c <USB_HC_Halt+0x1ea>
            break;
 800646c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800646e:	e05d      	b.n	800652c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	440a      	add	r2, r1
 8006486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d133      	bne.n	8006508 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ec:	d81d      	bhi.n	800652a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006504:	d0ec      	beq.n	80064e0 <USB_HC_Halt+0x19e>
 8006506:	e011      	b.n	800652c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e000      	b.n	800652c <USB_HC_Halt+0x1ea>
          break;
 800652a:	bf00      	nop
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3724      	adds	r7, #36	; 0x24
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	04da      	lsls	r2, r3, #19
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <USB_DoPing+0x74>)
 800655a:	4013      	ands	r3, r2
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800656c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006584:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	461a      	mov	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	1ff80000 	.word	0x1ff80000

080065b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f911 	bl	80057f0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ce:	2110      	movs	r1, #16
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff f96b 	bl	80058ac <USB_FlushTxFifo>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f997 	bl	8005914 <USB_FlushRxFifo>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e01f      	b.n	8006636 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006614:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800661c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	3301      	adds	r3, #1
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d9dc      	bls.n	80065f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e034      	b.n	80066ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006658:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006660:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006668:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	461a      	mov	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006688:	d80c      	bhi.n	80066a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a0:	d0ec      	beq.n	800667c <USB_StopHost+0xc8>
 80066a2:	e000      	b.n	80066a6 <USB_StopHost+0xf2>
        break;
 80066a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3301      	adds	r3, #1
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b0f      	cmp	r3, #15
 80066b0:	d9c7      	bls.n	8006642 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b8:	461a      	mov	r2, r3
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295
 80066be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff f880 	bl	80057ce <USB_EnableGlobalInt>

  return ret;
 80066ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b089      	sub	sp, #36	; 0x24
 80066dc:	af04      	add	r7, sp, #16
 80066de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066e0:	2301      	movs	r3, #1
 80066e2:	2202      	movs	r2, #2
 80066e4:	2102      	movs	r1, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fc66 	bl	8006fb8 <USBH_FindInterface>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2bff      	cmp	r3, #255	; 0xff
 80066f4:	d002      	beq.n	80066fc <USBH_CDC_InterfaceInit+0x24>
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d901      	bls.n	8006700 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066fc:	2302      	movs	r3, #2
 80066fe:	e13d      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fc3b 	bl	8006f80 <USBH_SelectInterface>
 800670a:	4603      	mov	r3, r0
 800670c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006714:	2302      	movs	r3, #2
 8006716:	e131      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800671e:	2050      	movs	r0, #80	; 0x50
 8006720:	f002 fad2 	bl	8008cc8 <malloc>
 8006724:	4603      	mov	r3, r0
 8006726:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	e11f      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800673c:	2250      	movs	r2, #80	; 0x50
 800673e:	2100      	movs	r1, #0
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f002 fb7d 	bl	8008e40 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	211a      	movs	r1, #26
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b25b      	sxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	da15      	bge.n	800678a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	211a      	movs	r1, #26
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	211a      	movs	r1, #26
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 ff2e 	bl	80085f2 <USBH_AllocPipe>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	7819      	ldrb	r1, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	7858      	ldrb	r0, [r3, #1]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	8952      	ldrh	r2, [r2, #10]
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	2203      	movs	r2, #3
 80067ba:	9201      	str	r2, [sp, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4623      	mov	r3, r4
 80067c0:	4602      	mov	r2, r0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fee6 	bl	8008594 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2200      	movs	r2, #0
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 f9f5 	bl	8008bc0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	210a      	movs	r1, #10
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fbeb 	bl	8006fb8 <USBH_FindInterface>
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2bff      	cmp	r3, #255	; 0xff
 80067ea:	d002      	beq.n	80067f2 <USBH_CDC_InterfaceInit+0x11a>
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d901      	bls.n	80067f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067f2:	2302      	movs	r3, #2
 80067f4:	e0c2      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	211a      	movs	r1, #26
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b25b      	sxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	da16      	bge.n	800683c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	211a      	movs	r1, #26
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	211a      	movs	r1, #26
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	4413      	add	r3, r2
 8006830:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006834:	881a      	ldrh	r2, [r3, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	835a      	strh	r2, [r3, #26]
 800683a:	e015      	b.n	8006868 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	211a      	movs	r1, #26
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	4413      	add	r3, r2
 8006848:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	211a      	movs	r1, #26
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006862:	881a      	ldrh	r2, [r3, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	211a      	movs	r1, #26
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b25b      	sxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	da16      	bge.n	80068ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	211a      	movs	r1, #26
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	4413      	add	r3, r2
 800688c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	211a      	movs	r1, #26
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068a6:	881a      	ldrh	r2, [r3, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	835a      	strh	r2, [r3, #26]
 80068ac:	e015      	b.n	80068da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	211a      	movs	r1, #26
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7b9b      	ldrb	r3, [r3, #14]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fe86 	bl	80085f2 <USBH_AllocPipe>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	7bdb      	ldrb	r3, [r3, #15]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fe7c 	bl	80085f2 <USBH_AllocPipe>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	7b59      	ldrb	r1, [r3, #13]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7b98      	ldrb	r0, [r3, #14]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	8b12      	ldrh	r2, [r2, #24]
 800691a:	9202      	str	r2, [sp, #8]
 800691c:	2202      	movs	r2, #2
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4623      	mov	r3, r4
 8006924:	4602      	mov	r2, r0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fe34 	bl	8008594 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	7b19      	ldrb	r1, [r3, #12]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	7bd8      	ldrb	r0, [r3, #15]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	8b52      	ldrh	r2, [r2, #26]
 8006944:	9202      	str	r2, [sp, #8]
 8006946:	2202      	movs	r2, #2
 8006948:	9201      	str	r2, [sp, #4]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4623      	mov	r3, r4
 800694e:	4602      	mov	r2, r0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fe1f 	bl	8008594 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	7b5b      	ldrb	r3, [r3, #13]
 8006962:	2200      	movs	r2, #0
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 f92a 	bl	8008bc0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 f923 	bl	8008bc0 <USBH_LL_SetToggle>

  return USBH_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	bd90      	pop	{r4, r7, pc}

08006984 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fe14 	bl	80085d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe3f 	bl	8008634 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	7b1b      	ldrb	r3, [r3, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	7b1b      	ldrb	r3, [r3, #12]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fe01 	bl	80085d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fe2c 	bl	8008634 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	7b5b      	ldrb	r3, [r3, #13]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00e      	beq.n	8006a08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	7b5b      	ldrb	r3, [r3, #13]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fdee 	bl	80085d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	7b5b      	ldrb	r3, [r3, #13]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fe19 	bl	8008634 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f95b 	bl	8008cd8 <free>
    phost->pActiveClass->pData = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a28:	2200      	movs	r2, #0
 8006a2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3340      	adds	r3, #64	; 0x40
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8b1 	bl	8006bb6 <GetLineCoding>
 8006a54:	4603      	mov	r3, r0
 8006a56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a64:	2102      	movs	r1, #2
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d877      	bhi.n	8006b88 <USBH_CDC_Process+0x114>
 8006a98:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <USBH_CDC_Process+0x2c>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006ab5 	.word	0x08006ab5
 8006aa4:	08006abb 	.word	0x08006abb
 8006aa8:	08006aeb 	.word	0x08006aeb
 8006aac:	08006b5f 	.word	0x08006b5f
 8006ab0:	08006b6d 	.word	0x08006b6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab8:	e06d      	b.n	8006b96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f897 	bl	8006bf4 <SetLineCoding>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ad8:	e058      	b.n	8006b8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d055      	beq.n	8006b8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ae8:	e050      	b.n	8006b8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3340      	adds	r3, #64	; 0x40
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f860 	bl	8006bb6 <GetLineCoding>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d126      	bne.n	8006b4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	791b      	ldrb	r3, [r3, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d13b      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d133      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d12b      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d124      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f958 	bl	8006dfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b4c:	e020      	b.n	8006b90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d01d      	beq.n	8006b90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b5c:	e018      	b.n	8006b90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f867 	bl	8006c32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8da 	bl	8006d1e <CDC_ProcessReception>
      break;
 8006b6a:	e014      	b.n	8006b96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 ffef 	bl	8007b52 <USBH_ClrFeature>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b86:	e005      	b.n	8006b94 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b88:	bf00      	nop
 8006b8a:	e004      	b.n	8006b96 <USBH_CDC_Process+0x122>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <USBH_CDC_Process+0x122>
      break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <USBH_CDC_Process+0x122>
      break;
 8006b94:	bf00      	nop

  }

  return status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	22a1      	movs	r2, #161	; 0xa1
 8006bc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2221      	movs	r2, #33	; 0x21
 8006bca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2207      	movs	r2, #7
 8006bdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2207      	movs	r2, #7
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fa83 	bl	80080f0 <USBH_CtlReq>
 8006bea:	4603      	mov	r3, r0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2221      	movs	r2, #33	; 0x21
 8006c02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2207      	movs	r2, #7
 8006c1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2207      	movs	r2, #7
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fa64 	bl	80080f0 <USBH_CtlReq>
 8006c28:	4603      	mov	r3, r0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af02      	add	r7, sp, #8
 8006c38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d002      	beq.n	8006c58 <CDC_ProcessTransmission+0x26>
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d023      	beq.n	8006c9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c56:	e05e      	b.n	8006d16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	8b12      	ldrh	r2, [r2, #24]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d90b      	bls.n	8006c7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8b1a      	ldrh	r2, [r3, #24]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7b5b      	ldrb	r3, [r3, #13]
 8006c70:	2001      	movs	r0, #1
 8006c72:	9000      	str	r0, [sp, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fc4a 	bl	800850e <USBH_BulkSendData>
 8006c7a:	e00b      	b.n	8006c94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	7b5b      	ldrb	r3, [r3, #13]
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	9000      	str	r0, [sp, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fc3d 	bl	800850e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c9c:	e03b      	b.n	8006d16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 ff61 	bl	8008b6c <USBH_LL_GetURBState>
 8006caa:	4603      	mov	r3, r0
 8006cac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d128      	bne.n	8006d06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	8b12      	ldrh	r2, [r2, #24]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d90e      	bls.n	8006cde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	8b12      	ldrh	r2, [r2, #24]
 8006cc8:	1a9a      	subs	r2, r3, r2
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	8b12      	ldrh	r2, [r2, #24]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	61da      	str	r2, [r3, #28]
 8006cdc:	e002      	b.n	8006ce4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cf4:	e00e      	b.n	8006d14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f868 	bl	8006dd4 <USBH_CDC_TransmitCallback>
      break;
 8006d04:	e006      	b.n	8006d14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d103      	bne.n	8006d14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d14:	bf00      	nop
  }
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d002      	beq.n	8006d44 <CDC_ProcessReception+0x26>
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d00e      	beq.n	8006d60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d42:	e043      	b.n	8006dcc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6a19      	ldr	r1, [r3, #32]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	8b5a      	ldrh	r2, [r3, #26]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	7b1b      	ldrb	r3, [r3, #12]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fc01 	bl	8008558 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d5e:	e035      	b.n	8006dcc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	7b1b      	ldrb	r3, [r3, #12]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 ff00 	bl	8008b6c <USBH_LL_GetURBState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d129      	bne.n	8006dca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	7b1b      	ldrb	r3, [r3, #12]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fe63 	bl	8008a48 <USBH_LL_GetLastXferSize>
 8006d82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d016      	beq.n	8006dbc <CDC_ProcessReception+0x9e>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	8b5b      	ldrh	r3, [r3, #26]
 8006d92:	461a      	mov	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d910      	bls.n	8006dbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	441a      	add	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2203      	movs	r2, #3
 8006db6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dba:	e006      	b.n	8006dca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f80f 	bl	8006de8 <USBH_CDC_ReceiveCallback>
      break;
 8006dca:	bf00      	nop
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e24:	2302      	movs	r3, #2
 8006e26:	e029      	b.n	8006e7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	79fa      	ldrb	r2, [r7, #7]
 8006e2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f81f 	bl	8006e84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fd33 	bl	80088e0 <USBH_LL_Init>

  return USBH_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e009      	b.n	8006eaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	33e0      	adds	r3, #224	; 0xe0
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b0f      	cmp	r3, #15
 8006eae:	d9f2      	bls.n	8006e96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e009      	b.n	8006eca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed0:	d3f1      	bcc.n	8006eb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2240      	movs	r2, #64	; 0x40
 8006ef6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10e      	bne.n	8006f68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	33de      	adds	r3, #222	; 0xde
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
 8006f66:	e004      	b.n	8006f72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e001      	b.n	8006f72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f96:	78fa      	ldrb	r2, [r7, #3]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d204      	bcs.n	8006fa6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006fa4:	e001      	b.n	8006faa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	70fb      	strb	r3, [r7, #3]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70bb      	strb	r3, [r7, #2]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fe0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fe2:	e025      	b.n	8007030 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	221a      	movs	r2, #26
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	3308      	adds	r3, #8
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3302      	adds	r3, #2
 8006ff4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	795b      	ldrb	r3, [r3, #5]
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d002      	beq.n	8007006 <USBH_FindInterface+0x4e>
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	2bff      	cmp	r3, #255	; 0xff
 8007004:	d111      	bne.n	800702a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800700a:	78ba      	ldrb	r2, [r7, #2]
 800700c:	429a      	cmp	r2, r3
 800700e:	d002      	beq.n	8007016 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007010:	78bb      	ldrb	r3, [r7, #2]
 8007012:	2bff      	cmp	r3, #255	; 0xff
 8007014:	d109      	bne.n	800702a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800701a:	787a      	ldrb	r2, [r7, #1]
 800701c:	429a      	cmp	r2, r3
 800701e:	d002      	beq.n	8007026 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007020:	787b      	ldrb	r3, [r7, #1]
 8007022:	2bff      	cmp	r3, #255	; 0xff
 8007024:	d101      	bne.n	800702a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	e006      	b.n	8007038 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	3301      	adds	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d9d6      	bls.n	8006fe4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007036:	23ff      	movs	r3, #255	; 0xff
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fc83 	bl	8008958 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fd9c 	bl	8008b92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af04      	add	r7, sp, #16
 800706a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800706c:	2302      	movs	r3, #2
 800706e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d102      	bne.n	8007086 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2203      	movs	r2, #3
 8007084:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b0b      	cmp	r3, #11
 800708e:	f200 81be 	bhi.w	800740e <USBH_Process+0x3aa>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USBH_Process+0x34>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070c9 	.word	0x080070c9
 800709c:	080070fb 	.word	0x080070fb
 80070a0:	08007163 	.word	0x08007163
 80070a4:	080073a9 	.word	0x080073a9
 80070a8:	0800740f 	.word	0x0800740f
 80070ac:	08007207 	.word	0x08007207
 80070b0:	0800734f 	.word	0x0800734f
 80070b4:	0800723d 	.word	0x0800723d
 80070b8:	0800725d 	.word	0x0800725d
 80070bc:	0800727d 	.word	0x0800727d
 80070c0:	080072c1 	.word	0x080072c1
 80070c4:	08007391 	.word	0x08007391
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 819e 	beq.w	8007412 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070dc:	20c8      	movs	r0, #200	; 0xc8
 80070de:	f001 fd9f 	bl	8008c20 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fc95 	bl	8008a12 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070f8:	e18b      	b.n	8007412 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007100:	2b01      	cmp	r3, #1
 8007102:	d107      	bne.n	8007114 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007112:	e18d      	b.n	8007430 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800711a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711e:	d914      	bls.n	800714a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007136:	2b03      	cmp	r3, #3
 8007138:	d903      	bls.n	8007142 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220d      	movs	r2, #13
 800713e:	701a      	strb	r2, [r3, #0]
      break;
 8007140:	e176      	b.n	8007430 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
      break;
 8007148:	e172      	b.n	8007430 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007150:	f103 020a 	add.w	r2, r3, #10
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800715a:	200a      	movs	r0, #10
 800715c:	f001 fd60 	bl	8008c20 <USBH_Delay>
      break;
 8007160:	e166      	b.n	8007430 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007172:	2104      	movs	r1, #4
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007178:	2064      	movs	r0, #100	; 0x64
 800717a:	f001 fd51 	bl	8008c20 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fc20 	bl	80089c4 <USBH_LL_GetSpeed>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2205      	movs	r2, #5
 8007192:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fa2b 	bl	80085f2 <USBH_AllocPipe>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fa23 	bl	80085f2 <USBH_AllocPipe>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7919      	ldrb	r1, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071c8:	b292      	uxth	r2, r2
 80071ca:	9202      	str	r2, [sp, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4603      	mov	r3, r0
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 f9dc 	bl	8008594 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7959      	ldrb	r1, [r3, #5]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071f0:	b292      	uxth	r2, r2
 80071f2:	9202      	str	r2, [sp, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	4603      	mov	r3, r0
 80071fc:	2200      	movs	r2, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f9c8 	bl	8008594 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007204:	e114      	b.n	8007430 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f918 	bl	800743c <USBH_HandleEnum>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 80fe 	bne.w	8007416 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007228:	2b01      	cmp	r3, #1
 800722a:	d103      	bne.n	8007234 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2208      	movs	r2, #8
 8007230:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007232:	e0f0      	b.n	8007416 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2207      	movs	r2, #7
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e0ec      	b.n	8007416 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80e9 	beq.w	800741a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800724e:	2101      	movs	r1, #1
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2208      	movs	r2, #8
 8007258:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800725a:	e0de      	b.n	800741a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007262:	b29b      	uxth	r3, r3
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc2c 	bl	8007ac4 <USBH_SetCfg>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	f040 80d5 	bne.w	800741e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2209      	movs	r2, #9
 8007278:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800727a:	e0d0      	b.n	800741e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800728a:	2101      	movs	r1, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc3c 	bl	8007b0a <USBH_SetFeature>
 8007292:	4603      	mov	r3, r0
 8007294:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	220a      	movs	r2, #10
 80072a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072a4:	e0bd      	b.n	8007422 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f040 80b9 	bne.w	8007422 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	220a      	movs	r2, #10
 80072b4:	701a      	strb	r2, [r3, #0]
      break;
 80072b6:	e0b4      	b.n	8007422 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	220a      	movs	r2, #10
 80072bc:	701a      	strb	r2, [r3, #0]
      break;
 80072be:	e0b0      	b.n	8007422 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80ad 	beq.w	8007426 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e016      	b.n	8007308 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072da:	7bfa      	ldrb	r2, [r7, #15]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32de      	adds	r2, #222	; 0xde
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	791a      	ldrb	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d108      	bne.n	8007302 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	32de      	adds	r2, #222	; 0xde
 80072f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007300:	e005      	b.n	800730e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	3301      	adds	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0e5      	beq.n	80072da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d016      	beq.n	8007346 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2206      	movs	r2, #6
 800732e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007336:	2103      	movs	r1, #3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733c:	e073      	b.n	8007426 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220d      	movs	r2, #13
 8007342:	701a      	strb	r2, [r3, #0]
      break;
 8007344:	e06f      	b.n	8007426 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	220d      	movs	r2, #13
 800734a:	701a      	strb	r2, [r3, #0]
      break;
 800734c:	e06b      	b.n	8007426 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d017      	beq.n	8007388 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d103      	bne.n	8007378 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	220b      	movs	r2, #11
 8007374:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007376:	e058      	b.n	800742a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d154      	bne.n	800742a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	220d      	movs	r2, #13
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e050      	b.n	800742a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	220d      	movs	r2, #13
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e04c      	b.n	800742a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d049      	beq.n	800742e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
      }
      break;
 80073a6:	e042      	b.n	800742e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fd67 	bl	8006e84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e4:	2105      	movs	r1, #5
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d107      	bne.n	8007406 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fe20 	bl	8007044 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007404:	e014      	b.n	8007430 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 faa6 	bl	8008958 <USBH_LL_Start>
      break;
 800740c:	e010      	b.n	8007430 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800740e:	bf00      	nop
 8007410:	e00e      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007412:	bf00      	nop
 8007414:	e00c      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007416:	bf00      	nop
 8007418:	e00a      	b.n	8007430 <USBH_Process+0x3cc>
    break;
 800741a:	bf00      	nop
 800741c:	e008      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 800741e:	bf00      	nop
 8007420:	e006      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 800742e:	bf00      	nop
  }
  return USBH_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af04      	add	r7, sp, #16
 8007442:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007448:	2301      	movs	r3, #1
 800744a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b07      	cmp	r3, #7
 8007452:	f200 81c1 	bhi.w	80077d8 <USBH_HandleEnum+0x39c>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBH_HandleEnum+0x20>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	0800747d 	.word	0x0800747d
 8007460:	0800753b 	.word	0x0800753b
 8007464:	080075a5 	.word	0x080075a5
 8007468:	08007633 	.word	0x08007633
 800746c:	0800769d 	.word	0x0800769d
 8007470:	0800770d 	.word	0x0800770d
 8007474:	08007753 	.word	0x08007753
 8007478:	08007799 	.word	0x08007799
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800747c:	2108      	movs	r1, #8
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa50 	bl	8007924 <USBH_Get_DevDesc>
 8007484:	4603      	mov	r3, r0
 8007486:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d130      	bne.n	80074f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7919      	ldrb	r1, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074b2:	b292      	uxth	r2, r2
 80074b4:	9202      	str	r2, [sp, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	9201      	str	r2, [sp, #4]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f867 	bl	8008594 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7959      	ldrb	r1, [r3, #5]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074da:	b292      	uxth	r2, r2
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4603      	mov	r3, r0
 80074e6:	2200      	movs	r2, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 f853 	bl	8008594 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074ee:	e175      	b.n	80077dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 8172 	bne.w	80077dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074fe:	3301      	adds	r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800750e:	2b03      	cmp	r3, #3
 8007510:	d903      	bls.n	800751a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220d      	movs	r2, #13
 8007516:	701a      	strb	r2, [r3, #0]
      break;
 8007518:	e160      	b.n	80077dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f887 	bl	8008634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f881 	bl	8008634 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e150      	b.n	80077dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800753a:	2112      	movs	r1, #18
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9f1 	bl	8007924 <USBH_Get_DevDesc>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007552:	e145      	b.n	80077e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b03      	cmp	r3, #3
 8007558:	f040 8142 	bne.w	80077e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007562:	3301      	adds	r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007572:	2b03      	cmp	r3, #3
 8007574:	d903      	bls.n	800757e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220d      	movs	r2, #13
 800757a:	701a      	strb	r2, [r3, #0]
      break;
 800757c:	e130      	b.n	80077e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f855 	bl	8008634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f84f 	bl	8008634 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	e11d      	b.n	80077e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa68 	bl	8007a7c <USBH_SetAddress>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d132      	bne.n	800761c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075b6:	2002      	movs	r0, #2
 80075b8:	f001 fb32 	bl	8008c20 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7919      	ldrb	r1, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075de:	b292      	uxth	r2, r2
 80075e0:	9202      	str	r2, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9201      	str	r2, [sp, #4]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 ffd1 	bl	8008594 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7959      	ldrb	r1, [r3, #5]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007606:	b292      	uxth	r2, r2
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	2200      	movs	r2, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 ffbd 	bl	8008594 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800761a:	e0e3      	b.n	80077e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b03      	cmp	r3, #3
 8007620:	f040 80e0 	bne.w	80077e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220d      	movs	r2, #13
 8007628:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
      break;
 8007630:	e0d8      	b.n	80077e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007632:	2109      	movs	r1, #9
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f99d 	bl	8007974 <USBH_Get_CfgDesc>
 800763a:	4603      	mov	r3, r0
 800763c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2204      	movs	r2, #4
 8007648:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800764a:	e0cd      	b.n	80077e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b03      	cmp	r3, #3
 8007650:	f040 80ca 	bne.w	80077e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800765a:	3301      	adds	r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800766a:	2b03      	cmp	r3, #3
 800766c:	d903      	bls.n	8007676 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	220d      	movs	r2, #13
 8007672:	701a      	strb	r2, [r3, #0]
      break;
 8007674:	e0b8      	b.n	80077e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 ffd9 	bl	8008634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 ffd3 	bl	8008634 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
      break;
 800769a:	e0a5      	b.n	80077e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f965 	bl	8007974 <USBH_Get_CfgDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2205      	movs	r2, #5
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e097      	b.n	80077ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 8094 	bne.w	80077ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e082      	b.n	80077ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ffa1 	bl	8008634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 ff9b 	bl	8008634 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e06f      	b.n	80077ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007712:	2b00      	cmp	r3, #0
 8007714:	d019      	beq.n	800774a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007722:	23ff      	movs	r3, #255	; 0xff
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f949 	bl	80079bc <USBH_Get_StringDesc>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2206      	movs	r2, #6
 8007738:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800773a:	e059      	b.n	80077f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d156      	bne.n	80077f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2206      	movs	r2, #6
 8007746:	705a      	strb	r2, [r3, #1]
      break;
 8007748:	e052      	b.n	80077f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2206      	movs	r2, #6
 800774e:	705a      	strb	r2, [r3, #1]
      break;
 8007750:	e04e      	b.n	80077f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007758:	2b00      	cmp	r3, #0
 800775a:	d019      	beq.n	8007790 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007768:	23ff      	movs	r3, #255	; 0xff
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f926 	bl	80079bc <USBH_Get_StringDesc>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2207      	movs	r2, #7
 800777e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007780:	e038      	b.n	80077f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b03      	cmp	r3, #3
 8007786:	d135      	bne.n	80077f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2207      	movs	r2, #7
 800778c:	705a      	strb	r2, [r3, #1]
      break;
 800778e:	e031      	b.n	80077f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2207      	movs	r2, #7
 8007794:	705a      	strb	r2, [r3, #1]
      break;
 8007796:	e02d      	b.n	80077f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d017      	beq.n	80077d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077ae:	23ff      	movs	r3, #255	; 0xff
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f903 	bl	80079bc <USBH_Get_StringDesc>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80077c4:	e018      	b.n	80077f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d115      	bne.n	80077f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
      break;
 80077d0:	e012      	b.n	80077f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
      break;
 80077d6:	e00f      	b.n	80077f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80077d8:	bf00      	nop
 80077da:	e00e      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077dc:	bf00      	nop
 80077de:	e00c      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e0:	bf00      	nop
 80077e2:	e00a      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e4:	bf00      	nop
 80077e6:	e008      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e8:	bf00      	nop
 80077ea:	e006      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077ec:	bf00      	nop
 80077ee:	e004      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f0:	bf00      	nop
 80077f2:	e002      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f4:	bf00      	nop
 80077f6:	e000      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f8:	bf00      	nop
  }
  return Status;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f804 	bl	8007846 <USBH_HandleSof>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b0b      	cmp	r3, #11
 8007856:	d10a      	bne.n	800786e <USBH_HandleSof+0x28>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
  }
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007886:	bf00      	nop
}
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80078a2:	bf00      	nop
}
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f846 	bl	800898e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fe93 	bl	8008634 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fe8d 	bl	8008634 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af02      	add	r7, sp, #8
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	b29b      	uxth	r3, r3
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f864 	bl	8007a12 <USBH_GetDescriptor>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f203 3026 	addw	r0, r3, #806	; 0x326
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	b292      	uxth	r2, r2
 8007964:	4619      	mov	r1, r3
 8007966:	f000 f919 	bl	8007b9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	331c      	adds	r3, #28
 8007984:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007986:	887b      	ldrh	r3, [r7, #2]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f83d 	bl	8007a12 <USBH_GetDescriptor>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d107      	bne.n	80079b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80079a2:	887b      	ldrh	r3, [r7, #2]
 80079a4:	461a      	mov	r2, r3
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f989 	bl	8007cc0 <USBH_ParseCfgDesc>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	461a      	mov	r2, r3
 80079c8:	460b      	mov	r3, r1
 80079ca:	72fb      	strb	r3, [r7, #11]
 80079cc:	4613      	mov	r3, r2
 80079ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079e0:	893b      	ldrh	r3, [r7, #8]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	460b      	mov	r3, r1
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f812 	bl	8007a12 <USBH_GetDescriptor>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079fe:	893a      	ldrh	r2, [r7, #8]
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb26 	bl	8008054 <USBH_ParseStringDesc>
  }

  return status;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	72fb      	strb	r3, [r7, #11]
 8007a20:	4613      	mov	r3, r2
 8007a22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d11c      	bne.n	8007a66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	893a      	ldrh	r2, [r7, #8]
 8007a42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a44:	893b      	ldrh	r3, [r7, #8]
 8007a46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a4e:	d104      	bne.n	8007a5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f240 4209 	movw	r2, #1033	; 0x409
 8007a56:	829a      	strh	r2, [r3, #20]
 8007a58:	e002      	b.n	8007a60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8b3a      	ldrh	r2, [r7, #24]
 8007a64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007a66:	8b3b      	ldrh	r3, [r7, #24]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fb3f 	bl	80080f0 <USBH_CtlReq>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	789b      	ldrb	r3, [r3, #2]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10f      	bne.n	8007ab0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2205      	movs	r2, #5
 8007a9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb1b 	bl	80080f0 <USBH_CtlReq>
 8007aba:	4603      	mov	r3, r0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	789b      	ldrb	r3, [r3, #2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d10e      	bne.n	8007af6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2209      	movs	r2, #9
 8007ae2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 faf8 	bl	80080f0 <USBH_CtlReq>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d10f      	bne.n	8007b3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2203      	movs	r2, #3
 8007b28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fad4 	bl	80080f0 <USBH_CtlReq>
 8007b48:	4603      	mov	r3, r0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	789b      	ldrb	r3, [r3, #2]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10f      	bne.n	8007b86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fab0 	bl	80080f0 <USBH_CtlReq>
 8007b90:	4603      	mov	r3, r0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	785a      	ldrb	r2, [r3, #1]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	3303      	adds	r3, #3
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	791a      	ldrb	r2, [r3, #4]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	795a      	ldrb	r2, [r3, #5]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	799a      	ldrb	r2, [r3, #6]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	79da      	ldrb	r2, [r3, #7]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	79db      	ldrb	r3, [r3, #7]
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	dc0f      	bgt.n	8007c1e <USBH_ParseDevDesc+0x82>
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	db14      	blt.n	8007c2c <USBH_ParseDevDesc+0x90>
 8007c02:	3b08      	subs	r3, #8
 8007c04:	4a2d      	ldr	r2, [pc, #180]	; (8007cbc <USBH_ParseDevDesc+0x120>)
 8007c06:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf14      	ite	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	2300      	moveq	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <USBH_ParseDevDesc+0x86>
 8007c1c:	e006      	b.n	8007c2c <USBH_ParseDevDesc+0x90>
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d104      	bne.n	8007c2c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	79da      	ldrb	r2, [r3, #7]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	71da      	strb	r2, [r3, #7]
      break;
 8007c2a:	e003      	b.n	8007c34 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2240      	movs	r2, #64	; 0x40
 8007c30:	71da      	strb	r2, [r3, #7]
      break;
 8007c32:	bf00      	nop
  }

  if (length > 8U)
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d939      	bls.n	8007cae <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	3309      	adds	r3, #9
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	330a      	adds	r3, #10
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	330b      	adds	r3, #11
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	330c      	adds	r3, #12
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	330d      	adds	r3, #13
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	7b9a      	ldrb	r2, [r3, #14]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	7bda      	ldrb	r2, [r3, #15]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	7c1a      	ldrb	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	7c5a      	ldrb	r2, [r3, #17]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	745a      	strb	r2, [r3, #17]
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	01000101 	.word	0x01000101

08007cc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08c      	sub	sp, #48	; 0x30
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785a      	ldrb	r2, [r3, #1]
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3302      	adds	r3, #2
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	3303      	adds	r3, #3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4313      	orrs	r3, r2
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1c:	bf28      	it	cs
 8007d1e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	791a      	ldrb	r2, [r3, #4]
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	795a      	ldrb	r2, [r3, #5]
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	799a      	ldrb	r2, [r3, #6]
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	79da      	ldrb	r2, [r3, #7]
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	7a1a      	ldrb	r2, [r3, #8]
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	d002      	beq.n	8007d5e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	2209      	movs	r2, #9
 8007d5c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	f240 809d 	bls.w	8007ea0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007d66:	2309      	movs	r3, #9
 8007d68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d6e:	e081      	b.n	8007e74 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d70:	f107 0316 	add.w	r3, r7, #22
 8007d74:	4619      	mov	r1, r3
 8007d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d78:	f000 f99f 	bl	80080ba <USBH_GetNextDesc>
 8007d7c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d176      	bne.n	8007e74 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d002      	beq.n	8007d94 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	2209      	movs	r2, #9
 8007d92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d98:	221a      	movs	r2, #26
 8007d9a:	fb02 f303 	mul.w	r3, r2, r3
 8007d9e:	3308      	adds	r3, #8
 8007da0:	6a3a      	ldr	r2, [r7, #32]
 8007da2:	4413      	add	r3, r2
 8007da4:	3302      	adds	r3, #2
 8007da6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007daa:	69f8      	ldr	r0, [r7, #28]
 8007dac:	f000 f87e 	bl	8007eac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dba:	e043      	b.n	8007e44 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007dbc:	f107 0316 	add.w	r3, r7, #22
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc4:	f000 f979 	bl	80080ba <USBH_GetNextDesc>
 8007dc8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d138      	bne.n	8007e44 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	795b      	ldrb	r3, [r3, #5]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d10f      	bne.n	8007dfa <USBH_ParseCfgDesc+0x13a>
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	799b      	ldrb	r3, [r3, #6]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d10b      	bne.n	8007dfa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	79db      	ldrb	r3, [r3, #7]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10f      	bne.n	8007e0a <USBH_ParseCfgDesc+0x14a>
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d00b      	beq.n	8007e0a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	2209      	movs	r2, #9
 8007df6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007df8:	e007      	b.n	8007e0a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b07      	cmp	r3, #7
 8007e00:	d004      	beq.n	8007e0c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	2207      	movs	r2, #7
 8007e06:	701a      	strb	r2, [r3, #0]
 8007e08:	e000      	b.n	8007e0c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e0a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e14:	3201      	adds	r2, #1
 8007e16:	00d2      	lsls	r2, r2, #3
 8007e18:	211a      	movs	r1, #26
 8007e1a:	fb01 f303 	mul.w	r3, r1, r3
 8007e1e:	4413      	add	r3, r2
 8007e20:	3308      	adds	r3, #8
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	4413      	add	r3, r2
 8007e26:	3304      	adds	r3, #4
 8007e28:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f86b 	bl	8007f0a <USBH_ParseEPDesc>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007e3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e3e:	3301      	adds	r3, #1
 8007e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	791b      	ldrb	r3, [r3, #4]
 8007e48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d204      	bcs.n	8007e5a <USBH_ParseCfgDesc+0x19a>
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	885a      	ldrh	r2, [r3, #2]
 8007e54:	8afb      	ldrh	r3, [r7, #22]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d8b0      	bhi.n	8007dbc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d201      	bcs.n	8007e6a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e01c      	b.n	8007ea4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d805      	bhi.n	8007e88 <USBH_ParseCfgDesc+0x1c8>
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	885a      	ldrh	r2, [r3, #2]
 8007e80:	8afb      	ldrh	r3, [r7, #22]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	f63f af74 	bhi.w	8007d70 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	791b      	ldrb	r3, [r3, #4]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	bf28      	it	cs
 8007e90:	2302      	movcs	r3, #2
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d201      	bcs.n	8007ea0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e001      	b.n	8007ea4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3730      	adds	r7, #48	; 0x30
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	785a      	ldrb	r2, [r3, #1]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	789a      	ldrb	r2, [r3, #2]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	78da      	ldrb	r2, [r3, #3]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	791a      	ldrb	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	795a      	ldrb	r2, [r3, #5]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	799a      	ldrb	r2, [r3, #6]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	79da      	ldrb	r2, [r3, #7]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	7a1a      	ldrb	r2, [r3, #8]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	721a      	strb	r2, [r3, #8]
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	785a      	ldrb	r2, [r3, #1]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	789a      	ldrb	r2, [r3, #2]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	78da      	ldrb	r2, [r3, #3]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3305      	adds	r3, #5
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	799a      	ldrb	r2, [r3, #6]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	889b      	ldrh	r3, [r3, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007f66:	2303      	movs	r3, #3
 8007f68:	75fb      	strb	r3, [r7, #23]
 8007f6a:	e033      	b.n	8007fd4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	889b      	ldrh	r3, [r3, #4]
 8007f70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f74:	f023 0307 	bic.w	r3, r3, #7
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	b21a      	sxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3304      	adds	r3, #4
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b299      	uxth	r1, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3305      	adds	r3, #5
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d110      	bne.n	8007fc6 <USBH_ParseEPDesc+0xbc>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b299      	uxth	r1, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3305      	adds	r3, #5
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fc2:	b21b      	sxth	r3, r3
 8007fc4:	e001      	b.n	8007fca <USBH_ParseEPDesc+0xc0>
 8007fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	b21b      	sxth	r3, r3
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d116      	bne.n	800800c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d005      	beq.n	8007ff6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	78db      	ldrb	r3, [r3, #3]
 8007fee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d127      	bne.n	8008046 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	799b      	ldrb	r3, [r3, #6]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <USBH_ParseEPDesc+0xfc>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	799b      	ldrb	r3, [r3, #6]
 8008002:	2b10      	cmp	r3, #16
 8008004:	d91f      	bls.n	8008046 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008006:	2303      	movs	r3, #3
 8008008:	75fb      	strb	r3, [r7, #23]
 800800a:	e01c      	b.n	8008046 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	78db      	ldrb	r3, [r3, #3]
 8008010:	f003 0303 	and.w	r3, r3, #3
 8008014:	2b01      	cmp	r3, #1
 8008016:	d10a      	bne.n	800802e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	799b      	ldrb	r3, [r3, #6]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <USBH_ParseEPDesc+0x11e>
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	799b      	ldrb	r3, [r3, #6]
 8008024:	2b10      	cmp	r3, #16
 8008026:	d90e      	bls.n	8008046 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008028:	2303      	movs	r3, #3
 800802a:	75fb      	strb	r3, [r7, #23]
 800802c:	e00b      	b.n	8008046 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	78db      	ldrb	r3, [r3, #3]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	2b03      	cmp	r3, #3
 8008038:	d105      	bne.n	8008046 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	799b      	ldrb	r3, [r3, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008042:	2303      	movs	r3, #3
 8008044:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
}
 8008048:	4618      	mov	r0, r3
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d120      	bne.n	80080ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	1e9a      	subs	r2, r3, #2
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	4293      	cmp	r3, r2
 8008076:	bf28      	it	cs
 8008078:	4613      	movcs	r3, r2
 800807a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3302      	adds	r3, #2
 8008080:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008082:	2300      	movs	r3, #0
 8008084:	82fb      	strh	r3, [r7, #22]
 8008086:	e00b      	b.n	80080a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008088:	8afb      	ldrh	r3, [r7, #22]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4413      	add	r3, r2
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	3301      	adds	r3, #1
 8008098:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800809a:	8afb      	ldrh	r3, [r7, #22]
 800809c:	3302      	adds	r3, #2
 800809e:	82fb      	strh	r3, [r7, #22]
 80080a0:	8afa      	ldrh	r2, [r7, #22]
 80080a2:	8abb      	ldrh	r3, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d3ef      	bcc.n	8008088 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
  }
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	881a      	ldrh	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	4413      	add	r3, r2
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4413      	add	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080e2:	68fb      	ldr	r3, [r7, #12]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	789b      	ldrb	r3, [r3, #2]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d002      	beq.n	8008110 <USBH_CtlReq+0x20>
 800810a:	2b02      	cmp	r3, #2
 800810c:	d00f      	beq.n	800812e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800810e:	e027      	b.n	8008160 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2202      	movs	r2, #2
 8008126:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008128:	2301      	movs	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
      break;
 800812c:	e018      	b.n	8008160 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f81c 	bl	800816c <USBH_HandleControl>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <USBH_CtlReq+0x54>
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d106      	bne.n	8008152 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	761a      	strb	r2, [r3, #24]
      break;
 8008150:	e005      	b.n	800815e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d102      	bne.n	800815e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	709a      	strb	r2, [r3, #2]
      break;
 800815e:	bf00      	nop
  }
  return status;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af02      	add	r7, sp, #8
 8008172:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7e1b      	ldrb	r3, [r3, #24]
 8008180:	3b01      	subs	r3, #1
 8008182:	2b0a      	cmp	r3, #10
 8008184:	f200 8156 	bhi.w	8008434 <USBH_HandleControl+0x2c8>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <USBH_HandleControl+0x24>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081bd 	.word	0x080081bd
 8008194:	080081d7 	.word	0x080081d7
 8008198:	08008241 	.word	0x08008241
 800819c:	08008267 	.word	0x08008267
 80081a0:	0800829f 	.word	0x0800829f
 80081a4:	080082c9 	.word	0x080082c9
 80081a8:	0800831b 	.word	0x0800831b
 80081ac:	0800833d 	.word	0x0800833d
 80081b0:	08008379 	.word	0x08008379
 80081b4:	0800839f 	.word	0x0800839f
 80081b8:	080083dd 	.word	0x080083dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f103 0110 	add.w	r1, r3, #16
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	795b      	ldrb	r3, [r3, #5]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f943 	bl	8008454 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	761a      	strb	r2, [r3, #24]
      break;
 80081d4:	e139      	b.n	800844a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	795b      	ldrb	r3, [r3, #5]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fcc5 	bl	8008b6c <USBH_LL_GetURBState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d11e      	bne.n	800822a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7c1b      	ldrb	r3, [r3, #16]
 80081f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	8adb      	ldrh	r3, [r3, #22]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081fe:	7b7b      	ldrb	r3, [r7, #13]
 8008200:	2b80      	cmp	r3, #128	; 0x80
 8008202:	d103      	bne.n	800820c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2203      	movs	r2, #3
 8008208:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800820a:	e115      	b.n	8008438 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2205      	movs	r2, #5
 8008210:	761a      	strb	r2, [r3, #24]
      break;
 8008212:	e111      	b.n	8008438 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008214:	7b7b      	ldrb	r3, [r7, #13]
 8008216:	2b80      	cmp	r3, #128	; 0x80
 8008218:	d103      	bne.n	8008222 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2209      	movs	r2, #9
 800821e:	761a      	strb	r2, [r3, #24]
      break;
 8008220:	e10a      	b.n	8008438 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2207      	movs	r2, #7
 8008226:	761a      	strb	r2, [r3, #24]
      break;
 8008228:	e106      	b.n	8008438 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b04      	cmp	r3, #4
 800822e:	d003      	beq.n	8008238 <USBH_HandleControl+0xcc>
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b02      	cmp	r3, #2
 8008234:	f040 8100 	bne.w	8008438 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	220b      	movs	r2, #11
 800823c:	761a      	strb	r2, [r3, #24]
      break;
 800823e:	e0fb      	b.n	8008438 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008246:	b29a      	uxth	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6899      	ldr	r1, [r3, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	899a      	ldrh	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	791b      	ldrb	r3, [r3, #4]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f93a 	bl	80084d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2204      	movs	r2, #4
 8008262:	761a      	strb	r2, [r3, #24]
      break;
 8008264:	e0f1      	b.n	800844a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc7d 	bl	8008b6c <USBH_LL_GetURBState>
 8008272:	4603      	mov	r3, r0
 8008274:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d102      	bne.n	8008282 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2209      	movs	r2, #9
 8008280:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b05      	cmp	r3, #5
 8008286:	d102      	bne.n	800828e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008288:	2303      	movs	r3, #3
 800828a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800828c:	e0d6      	b.n	800843c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b04      	cmp	r3, #4
 8008292:	f040 80d3 	bne.w	800843c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	220b      	movs	r2, #11
 800829a:	761a      	strb	r2, [r3, #24]
      break;
 800829c:	e0ce      	b.n	800843c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6899      	ldr	r1, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	899a      	ldrh	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	795b      	ldrb	r3, [r3, #5]
 80082aa:	2001      	movs	r0, #1
 80082ac:	9000      	str	r0, [sp, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8ea 	bl	8008488 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2206      	movs	r2, #6
 80082c4:	761a      	strb	r2, [r3, #24]
      break;
 80082c6:	e0c0      	b.n	800844a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	795b      	ldrb	r3, [r3, #5]
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fc4c 	bl	8008b6c <USBH_LL_GetURBState>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d103      	bne.n	80082e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2207      	movs	r2, #7
 80082e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082e4:	e0ac      	b.n	8008440 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b05      	cmp	r3, #5
 80082ea:	d105      	bne.n	80082f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	220c      	movs	r2, #12
 80082f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80082f2:	2303      	movs	r3, #3
 80082f4:	73fb      	strb	r3, [r7, #15]
      break;
 80082f6:	e0a3      	b.n	8008440 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d103      	bne.n	8008306 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2205      	movs	r2, #5
 8008302:	761a      	strb	r2, [r3, #24]
      break;
 8008304:	e09c      	b.n	8008440 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b04      	cmp	r3, #4
 800830a:	f040 8099 	bne.w	8008440 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	220b      	movs	r2, #11
 8008312:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008314:	2302      	movs	r3, #2
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e092      	b.n	8008440 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	791b      	ldrb	r3, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f8d5 	bl	80084d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800832e:	b29a      	uxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2208      	movs	r2, #8
 8008338:	761a      	strb	r2, [r3, #24]

      break;
 800833a:	e086      	b.n	800844a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	791b      	ldrb	r3, [r3, #4]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fc12 	bl	8008b6c <USBH_LL_GetURBState>
 8008348:	4603      	mov	r3, r0
 800834a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d105      	bne.n	800835e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220d      	movs	r2, #13
 8008356:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800835c:	e072      	b.n	8008444 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b04      	cmp	r3, #4
 8008362:	d103      	bne.n	800836c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	220b      	movs	r2, #11
 8008368:	761a      	strb	r2, [r3, #24]
      break;
 800836a:	e06b      	b.n	8008444 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b05      	cmp	r3, #5
 8008370:	d168      	bne.n	8008444 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008372:	2303      	movs	r3, #3
 8008374:	73fb      	strb	r3, [r7, #15]
      break;
 8008376:	e065      	b.n	8008444 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	795b      	ldrb	r3, [r3, #5]
 800837c:	2201      	movs	r2, #1
 800837e:	9200      	str	r2, [sp, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f87f 	bl	8008488 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	220a      	movs	r2, #10
 800839a:	761a      	strb	r2, [r3, #24]
      break;
 800839c:	e055      	b.n	800844a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	795b      	ldrb	r3, [r3, #5]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fbe1 	bl	8008b6c <USBH_LL_GetURBState>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d105      	bne.n	80083c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	220d      	movs	r2, #13
 80083bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083be:	e043      	b.n	8008448 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d103      	bne.n	80083ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2209      	movs	r2, #9
 80083ca:	761a      	strb	r2, [r3, #24]
      break;
 80083cc:	e03c      	b.n	8008448 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d139      	bne.n	8008448 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	220b      	movs	r2, #11
 80083d8:	761a      	strb	r2, [r3, #24]
      break;
 80083da:	e035      	b.n	8008448 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7e5b      	ldrb	r3, [r3, #25]
 80083e0:	3301      	adds	r3, #1
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	765a      	strb	r2, [r3, #25]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7e5b      	ldrb	r3, [r3, #25]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d806      	bhi.n	80083fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80083fc:	e025      	b.n	800844a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008404:	2106      	movs	r1, #6
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	795b      	ldrb	r3, [r3, #5]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f90c 	bl	8008634 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	791b      	ldrb	r3, [r3, #4]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f906 	bl	8008634 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800842e:	2302      	movs	r3, #2
 8008430:	73fb      	strb	r3, [r7, #15]
      break;
 8008432:	e00a      	b.n	800844a <USBH_HandleControl+0x2de>

    default:
      break;
 8008434:	bf00      	nop
 8008436:	e008      	b.n	800844a <USBH_HandleControl+0x2de>
      break;
 8008438:	bf00      	nop
 800843a:	e006      	b.n	800844a <USBH_HandleControl+0x2de>
      break;
 800843c:	bf00      	nop
 800843e:	e004      	b.n	800844a <USBH_HandleControl+0x2de>
      break;
 8008440:	bf00      	nop
 8008442:	e002      	b.n	800844a <USBH_HandleControl+0x2de>
      break;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <USBH_HandleControl+0x2de>
      break;
 8008448:	bf00      	nop
  }

  return status;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af04      	add	r7, sp, #16
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008462:	79f9      	ldrb	r1, [r7, #7]
 8008464:	2300      	movs	r3, #0
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	2308      	movs	r3, #8
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	2300      	movs	r3, #0
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	2200      	movs	r2, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fb46 	bl	8008b0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af04      	add	r7, sp, #16
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	460b      	mov	r3, r1
 8008498:	80fb      	strh	r3, [r7, #6]
 800849a:	4613      	mov	r3, r2
 800849c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084ac:	7979      	ldrb	r1, [r7, #5]
 80084ae:	7e3b      	ldrb	r3, [r7, #24]
 80084b0:	9303      	str	r3, [sp, #12]
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	9302      	str	r3, [sp, #8]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	2301      	movs	r3, #1
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	2300      	movs	r3, #0
 80084c0:	2200      	movs	r2, #0
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 fb21 	bl	8008b0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b088      	sub	sp, #32
 80084d6:	af04      	add	r7, sp, #16
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	4611      	mov	r1, r2
 80084de:	461a      	mov	r2, r3
 80084e0:	460b      	mov	r3, r1
 80084e2:	80fb      	strh	r3, [r7, #6]
 80084e4:	4613      	mov	r3, r2
 80084e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084e8:	7979      	ldrb	r1, [r7, #5]
 80084ea:	2300      	movs	r3, #0
 80084ec:	9303      	str	r3, [sp, #12]
 80084ee:	88fb      	ldrh	r3, [r7, #6]
 80084f0:	9302      	str	r3, [sp, #8]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	2301      	movs	r3, #1
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	2300      	movs	r3, #0
 80084fc:	2201      	movs	r2, #1
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 fb03 	bl	8008b0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008504:	2300      	movs	r3, #0

}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b088      	sub	sp, #32
 8008512:	af04      	add	r7, sp, #16
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	4611      	mov	r1, r2
 800851a:	461a      	mov	r2, r3
 800851c:	460b      	mov	r3, r1
 800851e:	80fb      	strh	r3, [r7, #6]
 8008520:	4613      	mov	r3, r2
 8008522:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008532:	7979      	ldrb	r1, [r7, #5]
 8008534:	7e3b      	ldrb	r3, [r7, #24]
 8008536:	9303      	str	r3, [sp, #12]
 8008538:	88fb      	ldrh	r3, [r7, #6]
 800853a:	9302      	str	r3, [sp, #8]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	2301      	movs	r3, #1
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	2302      	movs	r3, #2
 8008546:	2200      	movs	r2, #0
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fade 	bl	8008b0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af04      	add	r7, sp, #16
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	460b      	mov	r3, r1
 8008568:	80fb      	strh	r3, [r7, #6]
 800856a:	4613      	mov	r3, r2
 800856c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800856e:	7979      	ldrb	r1, [r7, #5]
 8008570:	2300      	movs	r3, #0
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	9301      	str	r3, [sp, #4]
 800857c:	2301      	movs	r3, #1
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	2302      	movs	r3, #2
 8008582:	2201      	movs	r2, #1
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fac0 	bl	8008b0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af04      	add	r7, sp, #16
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	4608      	mov	r0, r1
 800859e:	4611      	mov	r1, r2
 80085a0:	461a      	mov	r2, r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	70fb      	strb	r3, [r7, #3]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70bb      	strb	r3, [r7, #2]
 80085aa:	4613      	mov	r3, r2
 80085ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80085ae:	7878      	ldrb	r0, [r7, #1]
 80085b0:	78ba      	ldrb	r2, [r7, #2]
 80085b2:	78f9      	ldrb	r1, [r7, #3]
 80085b4:	8b3b      	ldrh	r3, [r7, #24]
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	7d3b      	ldrb	r3, [r7, #20]
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	7c3b      	ldrb	r3, [r7, #16]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4603      	mov	r3, r0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa53 	bl	8008a6e <USBH_LL_OpenPipe>

  return USBH_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa72 	bl	8008acc <USBH_LL_ClosePipe>

  return USBH_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f836 	bl	8008670 <USBH_GetFreePipe>
 8008604:	4603      	mov	r3, r0
 8008606:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008608:	89fb      	ldrh	r3, [r7, #14]
 800860a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800860e:	4293      	cmp	r3, r2
 8008610:	d00a      	beq.n	8008628 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	33e0      	adds	r3, #224	; 0xe0
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	b2db      	uxtb	r3, r3
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	2b0f      	cmp	r3, #15
 8008644:	d80d      	bhi.n	8008662 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	33e0      	adds	r3, #224	; 0xe0
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	33e0      	adds	r3, #224	; 0xe0
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
 8008680:	e00f      	b.n	80086a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	33e0      	adds	r3, #224	; 0xe0
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	b29b      	uxth	r3, r3
 800869a:	e007      	b.n	80086ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	3301      	adds	r3, #1
 80086a0:	73fb      	strb	r3, [r7, #15]
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b0f      	cmp	r3, #15
 80086a6:	d9ec      	bls.n	8008682 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80086a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80086bc:	2201      	movs	r2, #1
 80086be:	490e      	ldr	r1, [pc, #56]	; (80086f8 <MX_USB_HOST_Init+0x40>)
 80086c0:	480e      	ldr	r0, [pc, #56]	; (80086fc <MX_USB_HOST_Init+0x44>)
 80086c2:	f7fe fba5 	bl	8006e10 <USBH_Init>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80086cc:	f7f8 faaa 	bl	8000c24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80086d0:	490b      	ldr	r1, [pc, #44]	; (8008700 <MX_USB_HOST_Init+0x48>)
 80086d2:	480a      	ldr	r0, [pc, #40]	; (80086fc <MX_USB_HOST_Init+0x44>)
 80086d4:	f7fe fc2a 	bl	8006f2c <USBH_RegisterClass>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80086de:	f7f8 faa1 	bl	8000c24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80086e2:	4806      	ldr	r0, [pc, #24]	; (80086fc <MX_USB_HOST_Init+0x44>)
 80086e4:	f7fe fcae 	bl	8007044 <USBH_Start>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80086ee:	f7f8 fa99 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80086f2:	bf00      	nop
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	08008719 	.word	0x08008719
 80086fc:	20000234 	.word	0x20000234
 8008700:	20000010 	.word	0x20000010

08008704 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008708:	4802      	ldr	r0, [pc, #8]	; (8008714 <MX_USB_HOST_Process+0x10>)
 800870a:	f7fe fcab 	bl	8007064 <USBH_Process>
}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000234 	.word	0x20000234

08008718 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	3b01      	subs	r3, #1
 8008728:	2b04      	cmp	r3, #4
 800872a:	d819      	bhi.n	8008760 <USBH_UserProcess+0x48>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <USBH_UserProcess+0x1c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008761 	.word	0x08008761
 8008738:	08008751 	.word	0x08008751
 800873c:	08008761 	.word	0x08008761
 8008740:	08008759 	.word	0x08008759
 8008744:	08008749 	.word	0x08008749
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <USBH_UserProcess+0x58>)
 800874a:	2203      	movs	r2, #3
 800874c:	701a      	strb	r2, [r3, #0]
  break;
 800874e:	e008      	b.n	8008762 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <USBH_UserProcess+0x58>)
 8008752:	2202      	movs	r2, #2
 8008754:	701a      	strb	r2, [r3, #0]
  break;
 8008756:	e004      	b.n	8008762 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008758:	4b05      	ldr	r3, [pc, #20]	; (8008770 <USBH_UserProcess+0x58>)
 800875a:	2201      	movs	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
  break;
 800875e:	e000      	b.n	8008762 <USBH_UserProcess+0x4a>

  default:
  break;
 8008760:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	2000060c 	.word	0x2000060c

08008774 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800877c:	f107 0314 	add.w	r3, r7, #20
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008794:	d147      	bne.n	8008826 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	4b25      	ldr	r3, [pc, #148]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	4a24      	ldr	r2, [pc, #144]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 80087a0:	f043 0301 	orr.w	r3, r3, #1
 80087a4:	6313      	str	r3, [r2, #48]	; 0x30
 80087a6:	4b22      	ldr	r3, [pc, #136]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	613b      	str	r3, [r7, #16]
 80087b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80087b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80087c0:	f107 0314 	add.w	r3, r7, #20
 80087c4:	4619      	mov	r1, r3
 80087c6:	481b      	ldr	r0, [pc, #108]	; (8008834 <HAL_HCD_MspInit+0xc0>)
 80087c8:	f7f8 fe36 	bl	8001438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80087cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80087d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d2:	2302      	movs	r3, #2
 80087d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087da:	2300      	movs	r3, #0
 80087dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087de:	230a      	movs	r3, #10
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e2:	f107 0314 	add.w	r3, r7, #20
 80087e6:	4619      	mov	r1, r3
 80087e8:	4812      	ldr	r0, [pc, #72]	; (8008834 <HAL_HCD_MspInit+0xc0>)
 80087ea:	f7f8 fe25 	bl	8001438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	4a0f      	ldr	r2, [pc, #60]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 80087f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f8:	6353      	str	r3, [r2, #52]	; 0x34
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 8008800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008802:	4a0b      	ldr	r2, [pc, #44]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 8008804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008808:	6453      	str	r3, [r2, #68]	; 0x44
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <HAL_HCD_MspInit+0xbc>)
 800880c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	2043      	movs	r0, #67	; 0x43
 800881c:	f7f8 fdd5 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008820:	2043      	movs	r0, #67	; 0x43
 8008822:	f7f8 fdee 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008826:	bf00      	nop
 8008828:	3728      	adds	r7, #40	; 0x28
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	40023800 	.word	0x40023800
 8008834:	40020000 	.word	0x40020000

08008838 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe ffeb 	bl	8007822 <USBH_LL_IncTimer>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff f823 	bl	80078ae <USBH_LL_Connect>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff f82c 	bl	80078dc <USBH_LL_Disconnect>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
 8008898:	4613      	mov	r3, r2
 800889a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe ffdd 	bl	8007876 <USBH_LL_PortEnabled>
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe ffdd 	bl	8007892 <USBH_LL_PortDisabled>
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d12a      	bne.n	8008948 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80088f2:	4a18      	ldr	r2, [pc, #96]	; (8008954 <USBH_LL_Init+0x74>)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a15      	ldr	r2, [pc, #84]	; (8008954 <USBH_LL_Init+0x74>)
 80088fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008902:	4b14      	ldr	r3, [pc, #80]	; (8008954 <USBH_LL_Init+0x74>)
 8008904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008908:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800890a:	4b12      	ldr	r3, [pc, #72]	; (8008954 <USBH_LL_Init+0x74>)
 800890c:	2208      	movs	r2, #8
 800890e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008910:	4b10      	ldr	r3, [pc, #64]	; (8008954 <USBH_LL_Init+0x74>)
 8008912:	2201      	movs	r2, #1
 8008914:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008916:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <USBH_LL_Init+0x74>)
 8008918:	2200      	movs	r2, #0
 800891a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <USBH_LL_Init+0x74>)
 800891e:	2202      	movs	r2, #2
 8008920:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008922:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <USBH_LL_Init+0x74>)
 8008924:	2200      	movs	r2, #0
 8008926:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008928:	480a      	ldr	r0, [pc, #40]	; (8008954 <USBH_LL_Init+0x74>)
 800892a:	f7f8 ff52 	bl	80017d2 <HAL_HCD_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008934:	f7f8 f976 	bl	8000c24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008938:	4806      	ldr	r0, [pc, #24]	; (8008954 <USBH_LL_Init+0x74>)
 800893a:	f7f9 fb36 	bl	8001faa <HAL_HCD_GetCurrentFrame>
 800893e:	4603      	mov	r3, r0
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fe ff5e 	bl	8007804 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000610 	.word	0x20000610

08008958 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800896e:	4618      	mov	r0, r3
 8008970:	f7f9 faa5 	bl	8001ebe <HAL_HCD_Start>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f95c 	bl	8008c38 <USBH_Get_USB_Status>
 8008980:	4603      	mov	r3, r0
 8008982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008984:	7bbb      	ldrb	r3, [r7, #14]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f9 faad 	bl	8001f04 <HAL_HCD_Stop>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 f941 	bl	8008c38 <USBH_Get_USB_Status>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f9 faf5 	bl	8001fc6 <HAL_HCD_GetCurrentSpeed>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d00c      	beq.n	80089fc <USBH_LL_GetSpeed+0x38>
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d80d      	bhi.n	8008a02 <USBH_LL_GetSpeed+0x3e>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <USBH_LL_GetSpeed+0x2c>
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d003      	beq.n	80089f6 <USBH_LL_GetSpeed+0x32>
 80089ee:	e008      	b.n	8008a02 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
    break;
 80089f4:	e008      	b.n	8008a08 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80089f6:	2301      	movs	r3, #1
 80089f8:	73fb      	strb	r3, [r7, #15]
    break;
 80089fa:	e005      	b.n	8008a08 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80089fc:	2302      	movs	r3, #2
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	e002      	b.n	8008a08 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a02:	2301      	movs	r3, #1
 8008a04:	73fb      	strb	r3, [r7, #15]
    break;
 8008a06:	bf00      	nop
  }
  return  speed;
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7f9 fa88 	bl	8001f3e <HAL_HCD_ResetPort>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f8ff 	bl	8008c38 <USBH_Get_USB_Status>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f9 fa8f 	bl	8001f82 <HAL_HCD_HC_GetXferCount>
 8008a64:	4603      	mov	r3, r0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a6e:	b590      	push	{r4, r7, lr}
 8008a70:	b089      	sub	sp, #36	; 0x24
 8008a72:	af04      	add	r7, sp, #16
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	4608      	mov	r0, r1
 8008a78:	4611      	mov	r1, r2
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	70fb      	strb	r3, [r7, #3]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70bb      	strb	r3, [r7, #2]
 8008a84:	4613      	mov	r3, r2
 8008a86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a96:	787c      	ldrb	r4, [r7, #1]
 8008a98:	78ba      	ldrb	r2, [r7, #2]
 8008a9a:	78f9      	ldrb	r1, [r7, #3]
 8008a9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	4623      	mov	r3, r4
 8008aae:	f7f8 fef2 	bl	8001896 <HAL_HCD_HC_Init>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f8bd 	bl	8008c38 <USBH_Get_USB_Status>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd90      	pop	{r4, r7, pc}

08008acc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f8 ff62 	bl	80019b4 <HAL_HCD_HC_Halt>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f89e 	bl	8008c38 <USBH_Get_USB_Status>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b0a:	b590      	push	{r4, r7, lr}
 8008b0c:	b089      	sub	sp, #36	; 0x24
 8008b0e:	af04      	add	r7, sp, #16
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	461a      	mov	r2, r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	70fb      	strb	r3, [r7, #3]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70bb      	strb	r3, [r7, #2]
 8008b20:	4613      	mov	r3, r2
 8008b22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b32:	787c      	ldrb	r4, [r7, #1]
 8008b34:	78ba      	ldrb	r2, [r7, #2]
 8008b36:	78f9      	ldrb	r1, [r7, #3]
 8008b38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b3c:	9303      	str	r3, [sp, #12]
 8008b3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	f7f8 ff55 	bl	80019fc <HAL_HCD_HC_SubmitRequest>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 f86d 	bl	8008c38 <USBH_Get_USB_Status>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd90      	pop	{r4, r7, pc}

08008b6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f9 f9e9 	bl	8001f5a <HAL_HCD_HC_GetURBState>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d103      	bne.n	8008bb0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f870 	bl	8008c90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008bb0:	20c8      	movs	r0, #200	; 0xc8
 8008bb2:	f7f8 fb0b 	bl	80011cc <HAL_Delay>
  return USBH_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bd6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	212c      	movs	r1, #44	; 0x2c
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	4413      	add	r3, r2
 8008be4:	333b      	adds	r3, #59	; 0x3b
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	212c      	movs	r1, #44	; 0x2c
 8008bf2:	fb01 f303 	mul.w	r3, r1, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	3354      	adds	r3, #84	; 0x54
 8008bfa:	78ba      	ldrb	r2, [r7, #2]
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e008      	b.n	8008c12 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	212c      	movs	r1, #44	; 0x2c
 8008c06:	fb01 f303 	mul.w	r3, r1, r3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	3355      	adds	r3, #85	; 0x55
 8008c0e:	78ba      	ldrb	r2, [r7, #2]
 8008c10:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7f8 facf 	bl	80011cc <HAL_Delay>
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d817      	bhi.n	8008c7c <USBH_Get_USB_Status+0x44>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <USBH_Get_USB_Status+0x1c>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008c6b 	.word	0x08008c6b
 8008c5c:	08008c71 	.word	0x08008c71
 8008c60:	08008c77 	.word	0x08008c77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
    break;
 8008c68:	e00b      	b.n	8008c82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6e:	e008      	b.n	8008c82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
    break;
 8008c74:	e005      	b.n	8008c82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7a:	e002      	b.n	8008c82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c80:	bf00      	nop
  }
  return usb_status;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
 8008ca8:	e001      	b.n	8008cae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008caa:	2301      	movs	r3, #1
 8008cac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	4803      	ldr	r0, [pc, #12]	; (8008cc4 <MX_DriverVbusFS+0x34>)
 8008cb6:	f7f8 fd73 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40020800 	.word	0x40020800

08008cc8 <malloc>:
 8008cc8:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <malloc+0xc>)
 8008cca:	4601      	mov	r1, r0
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f000 b82b 	b.w	8008d28 <_malloc_r>
 8008cd2:	bf00      	nop
 8008cd4:	2000007c 	.word	0x2000007c

08008cd8 <free>:
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <free+0xc>)
 8008cda:	4601      	mov	r1, r0
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	f000 b8f3 	b.w	8008ec8 <_free_r>
 8008ce2:	bf00      	nop
 8008ce4:	2000007c 	.word	0x2000007c

08008ce8 <sbrk_aligned>:
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	4e0e      	ldr	r6, [pc, #56]	; (8008d24 <sbrk_aligned+0x3c>)
 8008cec:	460c      	mov	r4, r1
 8008cee:	6831      	ldr	r1, [r6, #0]
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	b911      	cbnz	r1, 8008cfa <sbrk_aligned+0x12>
 8008cf4:	f000 f8ac 	bl	8008e50 <_sbrk_r>
 8008cf8:	6030      	str	r0, [r6, #0]
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f000 f8a7 	bl	8008e50 <_sbrk_r>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	d00a      	beq.n	8008d1c <sbrk_aligned+0x34>
 8008d06:	1cc4      	adds	r4, r0, #3
 8008d08:	f024 0403 	bic.w	r4, r4, #3
 8008d0c:	42a0      	cmp	r0, r4
 8008d0e:	d007      	beq.n	8008d20 <sbrk_aligned+0x38>
 8008d10:	1a21      	subs	r1, r4, r0
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f89c 	bl	8008e50 <_sbrk_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d101      	bne.n	8008d20 <sbrk_aligned+0x38>
 8008d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d20:	4620      	mov	r0, r4
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	20000918 	.word	0x20000918

08008d28 <_malloc_r>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	1ccd      	adds	r5, r1, #3
 8008d2e:	f025 0503 	bic.w	r5, r5, #3
 8008d32:	3508      	adds	r5, #8
 8008d34:	2d0c      	cmp	r5, #12
 8008d36:	bf38      	it	cc
 8008d38:	250c      	movcc	r5, #12
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	db01      	blt.n	8008d44 <_malloc_r+0x1c>
 8008d40:	42a9      	cmp	r1, r5
 8008d42:	d905      	bls.n	8008d50 <_malloc_r+0x28>
 8008d44:	230c      	movs	r3, #12
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	2600      	movs	r6, #0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e24 <_malloc_r+0xfc>
 8008d54:	f000 f868 	bl	8008e28 <__malloc_lock>
 8008d58:	f8d8 3000 	ldr.w	r3, [r8]
 8008d5c:	461c      	mov	r4, r3
 8008d5e:	bb5c      	cbnz	r4, 8008db8 <_malloc_r+0x90>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4638      	mov	r0, r7
 8008d64:	f7ff ffc0 	bl	8008ce8 <sbrk_aligned>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	d155      	bne.n	8008e1a <_malloc_r+0xf2>
 8008d6e:	f8d8 4000 	ldr.w	r4, [r8]
 8008d72:	4626      	mov	r6, r4
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	d145      	bne.n	8008e04 <_malloc_r+0xdc>
 8008d78:	2c00      	cmp	r4, #0
 8008d7a:	d048      	beq.n	8008e0e <_malloc_r+0xe6>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4638      	mov	r0, r7
 8008d82:	eb04 0903 	add.w	r9, r4, r3
 8008d86:	f000 f863 	bl	8008e50 <_sbrk_r>
 8008d8a:	4581      	cmp	r9, r0
 8008d8c:	d13f      	bne.n	8008e0e <_malloc_r+0xe6>
 8008d8e:	6821      	ldr	r1, [r4, #0]
 8008d90:	1a6d      	subs	r5, r5, r1
 8008d92:	4629      	mov	r1, r5
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff ffa7 	bl	8008ce8 <sbrk_aligned>
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d037      	beq.n	8008e0e <_malloc_r+0xe6>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	442b      	add	r3, r5
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	f8d8 3000 	ldr.w	r3, [r8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d038      	beq.n	8008e1e <_malloc_r+0xf6>
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	42a2      	cmp	r2, r4
 8008db0:	d12b      	bne.n	8008e0a <_malloc_r+0xe2>
 8008db2:	2200      	movs	r2, #0
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	e00f      	b.n	8008dd8 <_malloc_r+0xb0>
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	1b52      	subs	r2, r2, r5
 8008dbc:	d41f      	bmi.n	8008dfe <_malloc_r+0xd6>
 8008dbe:	2a0b      	cmp	r2, #11
 8008dc0:	d917      	bls.n	8008df2 <_malloc_r+0xca>
 8008dc2:	1961      	adds	r1, r4, r5
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	6025      	str	r5, [r4, #0]
 8008dc8:	bf18      	it	ne
 8008dca:	6059      	strne	r1, [r3, #4]
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	bf08      	it	eq
 8008dd0:	f8c8 1000 	streq.w	r1, [r8]
 8008dd4:	5162      	str	r2, [r4, r5]
 8008dd6:	604b      	str	r3, [r1, #4]
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f104 060b 	add.w	r6, r4, #11
 8008dde:	f000 f829 	bl	8008e34 <__malloc_unlock>
 8008de2:	f026 0607 	bic.w	r6, r6, #7
 8008de6:	1d23      	adds	r3, r4, #4
 8008de8:	1af2      	subs	r2, r6, r3
 8008dea:	d0ae      	beq.n	8008d4a <_malloc_r+0x22>
 8008dec:	1b9b      	subs	r3, r3, r6
 8008dee:	50a3      	str	r3, [r4, r2]
 8008df0:	e7ab      	b.n	8008d4a <_malloc_r+0x22>
 8008df2:	42a3      	cmp	r3, r4
 8008df4:	6862      	ldr	r2, [r4, #4]
 8008df6:	d1dd      	bne.n	8008db4 <_malloc_r+0x8c>
 8008df8:	f8c8 2000 	str.w	r2, [r8]
 8008dfc:	e7ec      	b.n	8008dd8 <_malloc_r+0xb0>
 8008dfe:	4623      	mov	r3, r4
 8008e00:	6864      	ldr	r4, [r4, #4]
 8008e02:	e7ac      	b.n	8008d5e <_malloc_r+0x36>
 8008e04:	4634      	mov	r4, r6
 8008e06:	6876      	ldr	r6, [r6, #4]
 8008e08:	e7b4      	b.n	8008d74 <_malloc_r+0x4c>
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	e7cc      	b.n	8008da8 <_malloc_r+0x80>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	603b      	str	r3, [r7, #0]
 8008e12:	4638      	mov	r0, r7
 8008e14:	f000 f80e 	bl	8008e34 <__malloc_unlock>
 8008e18:	e797      	b.n	8008d4a <_malloc_r+0x22>
 8008e1a:	6025      	str	r5, [r4, #0]
 8008e1c:	e7dc      	b.n	8008dd8 <_malloc_r+0xb0>
 8008e1e:	605b      	str	r3, [r3, #4]
 8008e20:	deff      	udf	#255	; 0xff
 8008e22:	bf00      	nop
 8008e24:	20000914 	.word	0x20000914

08008e28 <__malloc_lock>:
 8008e28:	4801      	ldr	r0, [pc, #4]	; (8008e30 <__malloc_lock+0x8>)
 8008e2a:	f000 b84b 	b.w	8008ec4 <__retarget_lock_acquire_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20000a58 	.word	0x20000a58

08008e34 <__malloc_unlock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__malloc_unlock+0x8>)
 8008e36:	f000 b846 	b.w	8008ec6 <__retarget_lock_release_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20000a58 	.word	0x20000a58

08008e40 <memset>:
 8008e40:	4402      	add	r2, r0
 8008e42:	4603      	mov	r3, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	; (8008e6c <_sbrk_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f8 f8d2 	bl	8001004 <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20000a54 	.word	0x20000a54

08008e70 <__errno>:
 8008e70:	4b01      	ldr	r3, [pc, #4]	; (8008e78 <__errno+0x8>)
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	2000007c 	.word	0x2000007c

08008e7c <__libc_init_array>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	4d0d      	ldr	r5, [pc, #52]	; (8008eb4 <__libc_init_array+0x38>)
 8008e80:	4c0d      	ldr	r4, [pc, #52]	; (8008eb8 <__libc_init_array+0x3c>)
 8008e82:	1b64      	subs	r4, r4, r5
 8008e84:	10a4      	asrs	r4, r4, #2
 8008e86:	2600      	movs	r6, #0
 8008e88:	42a6      	cmp	r6, r4
 8008e8a:	d109      	bne.n	8008ea0 <__libc_init_array+0x24>
 8008e8c:	4d0b      	ldr	r5, [pc, #44]	; (8008ebc <__libc_init_array+0x40>)
 8008e8e:	4c0c      	ldr	r4, [pc, #48]	; (8008ec0 <__libc_init_array+0x44>)
 8008e90:	f000 f866 	bl	8008f60 <_init>
 8008e94:	1b64      	subs	r4, r4, r5
 8008e96:	10a4      	asrs	r4, r4, #2
 8008e98:	2600      	movs	r6, #0
 8008e9a:	42a6      	cmp	r6, r4
 8008e9c:	d105      	bne.n	8008eaa <__libc_init_array+0x2e>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea4:	4798      	blx	r3
 8008ea6:	3601      	adds	r6, #1
 8008ea8:	e7ee      	b.n	8008e88 <__libc_init_array+0xc>
 8008eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eae:	4798      	blx	r3
 8008eb0:	3601      	adds	r6, #1
 8008eb2:	e7f2      	b.n	8008e9a <__libc_init_array+0x1e>
 8008eb4:	08008f9c 	.word	0x08008f9c
 8008eb8:	08008f9c 	.word	0x08008f9c
 8008ebc:	08008f9c 	.word	0x08008f9c
 8008ec0:	08008fa0 	.word	0x08008fa0

08008ec4 <__retarget_lock_acquire_recursive>:
 8008ec4:	4770      	bx	lr

08008ec6 <__retarget_lock_release_recursive>:
 8008ec6:	4770      	bx	lr

08008ec8 <_free_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	2900      	cmp	r1, #0
 8008ecc:	d044      	beq.n	8008f58 <_free_r+0x90>
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eda:	bfb8      	it	lt
 8008edc:	18e4      	addlt	r4, r4, r3
 8008ede:	f7ff ffa3 	bl	8008e28 <__malloc_lock>
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <_free_r+0x94>)
 8008ee4:	9801      	ldr	r0, [sp, #4]
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	b933      	cbnz	r3, 8008ef8 <_free_r+0x30>
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6014      	str	r4, [r2, #0]
 8008eee:	b003      	add	sp, #12
 8008ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef4:	f7ff bf9e 	b.w	8008e34 <__malloc_unlock>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d908      	bls.n	8008f0e <_free_r+0x46>
 8008efc:	6825      	ldr	r5, [r4, #0]
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf01      	itttt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	e7ed      	b.n	8008eea <_free_r+0x22>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b10b      	cbz	r3, 8008f18 <_free_r+0x50>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d9fa      	bls.n	8008f0e <_free_r+0x46>
 8008f18:	6811      	ldr	r1, [r2, #0]
 8008f1a:	1855      	adds	r5, r2, r1
 8008f1c:	42a5      	cmp	r5, r4
 8008f1e:	d10b      	bne.n	8008f38 <_free_r+0x70>
 8008f20:	6824      	ldr	r4, [r4, #0]
 8008f22:	4421      	add	r1, r4
 8008f24:	1854      	adds	r4, r2, r1
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	6011      	str	r1, [r2, #0]
 8008f2a:	d1e0      	bne.n	8008eee <_free_r+0x26>
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	440c      	add	r4, r1
 8008f34:	6014      	str	r4, [r2, #0]
 8008f36:	e7da      	b.n	8008eee <_free_r+0x26>
 8008f38:	d902      	bls.n	8008f40 <_free_r+0x78>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	e7d6      	b.n	8008eee <_free_r+0x26>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf04      	itt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	bf04      	itt	eq
 8008f50:	1949      	addeq	r1, r1, r5
 8008f52:	6021      	streq	r1, [r4, #0]
 8008f54:	6054      	str	r4, [r2, #4]
 8008f56:	e7ca      	b.n	8008eee <_free_r+0x26>
 8008f58:	b003      	add	sp, #12
 8008f5a:	bd30      	pop	{r4, r5, pc}
 8008f5c:	20000914 	.word	0x20000914

08008f60 <_init>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr

08008f6c <_fini>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr
