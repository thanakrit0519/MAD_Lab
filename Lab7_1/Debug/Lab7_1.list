
Lab7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f8  080060f8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006100  08006100  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08006114  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080061b4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000700  2000014c  08006254  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000084c  08006254  0002084c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   000172f4  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002c8a  00000000  00000000  000374b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001330  00000000  00000000  0003a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f05  00000000  00000000  0003b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002981c  00000000  00000000  0003c375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00016e94  00000000  00000000  00065b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103da3  00000000  00000000  0007ca25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005244  00000000  00000000  001807c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  00185a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	080060c8 	.word	0x080060c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	080060c8 	.word	0x080060c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fe03 	bl	8001142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f84c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9f6 	bl	8000930 <MX_GPIO_Init>
  MX_ETH_Init();
 8000544:	f000 f8b8 	bl	80006b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f994 	bl	8000874 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054c:	f000 f9c2 	bl	80008d4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000550:	f000 f900 	bl	8000754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000554:	2100      	movs	r1, #0
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0x84>)
 8000558:	f003 f860 	bl	800361c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800055c:	2108      	movs	r1, #8
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <main+0x84>)
 8000560:	f003 f85c 	bl	800361c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000564:	210c      	movs	r1, #12
 8000566:	4814      	ldr	r0, [pc, #80]	; (80005b8 <main+0x84>)
 8000568:	f003 f858 	bl	800361c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch1, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	4913      	ldr	r1, [pc, #76]	; (80005bc <main+0x88>)
 8000570:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0x8c>)
 8000572:	f004 f848 	bl	8004606 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		pwmR = ((GPIOA->IDR & GPIO_PIN_15) >> 15);
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0x90>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	0bdb      	lsrs	r3, r3, #15
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <main+0x94>)
 8000586:	701a      	strb	r2, [r3, #0]
		pwmG = ((GPIOB->IDR & GPIO_PIN_10) >> 10) + 2;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0x98>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	0a9b      	lsrs	r3, r3, #10
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	3302      	adds	r3, #2
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x9c>)
 800059c:	701a      	strb	r2, [r3, #0]
		pwmB = ((GPIOB->IDR & GPIO_PIN_11) >> 11) + 4;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0x98>)
 80005a0:	691b      	ldr	r3, [r3, #16]
 80005a2:	0adb      	lsrs	r3, r3, #11
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	3304      	adds	r3, #4
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <main+0xa0>)
 80005b2:	701a      	strb	r2, [r3, #0]
		pwmR = ((GPIOA->IDR & GPIO_PIN_15) >> 15);
 80005b4:	e7df      	b.n	8000576 <main+0x42>
 80005b6:	bf00      	nop
 80005b8:	20000250 	.word	0x20000250
 80005bc:	2000083c 	.word	0x2000083c
 80005c0:	2000029c 	.word	0x2000029c
 80005c4:	40020000 	.word	0x40020000
 80005c8:	2000082c 	.word	0x2000082c
 80005cc:	40020400 	.word	0x40020400
 80005d0:	2000082d 	.word	0x2000082d
 80005d4:	2000082e 	.word	0x2000082e

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 fd42 	bl	8006070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fc:	f001 fdfa 	bl	80021f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <SystemClock_Config+0xd8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <SystemClock_Config+0xd8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xd8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SystemClock_Config+0xdc>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xdc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000648:	23d8      	movs	r3, #216	; 0xd8
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000650:	2309      	movs	r3, #9
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fe29 	bl	80022b4 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 fac4 	bl	8000bf4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f001 fdd2 	bl	8002214 <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000676:	f000 fabd 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2107      	movs	r1, #7
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f8b9 	bl	8002810 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006a4:	f000 faa6 	bl	8000bf4 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ETH_Init+0x84>)
 80006be:	4a20      	ldr	r2, [pc, #128]	; (8000740 <MX_ETH_Init+0x88>)
 80006c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_ETH_Init+0x8c>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_ETH_Init+0x8c>)
 80006d0:	22e1      	movs	r2, #225	; 0xe1
 80006d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_ETH_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_ETH_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ETH_Init+0x84>)
 80006e8:	4a16      	ldr	r2, [pc, #88]	; (8000744 <MX_ETH_Init+0x8c>)
 80006ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ETH_Init+0x84>)
 80006ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ETH_Init+0x84>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_ETH_Init+0x90>)
 80006f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_ETH_Init+0x84>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_ETH_Init+0x94>)
 80006fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_ETH_Init+0x84>)
 8000702:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000706:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <MX_ETH_Init+0x84>)
 800070a:	f000 ff3f 	bl	800158c <HAL_ETH_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 fa6e 	bl	8000bf4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000718:	2238      	movs	r2, #56	; 0x38
 800071a:	2100      	movs	r1, #0
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_ETH_Init+0x98>)
 800071e:	f005 fca7 	bl	8006070 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_ETH_Init+0x98>)
 8000724:	2221      	movs	r2, #33	; 0x21
 8000726:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_ETH_Init+0x98>)
 800072a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800072e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_ETH_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001a0 	.word	0x200001a0
 8000740:	40028000 	.word	0x40028000
 8000744:	20000840 	.word	0x20000840
 8000748:	200000ac 	.word	0x200000ac
 800074c:	2000000c 	.word	0x2000000c
 8000750:	20000168 	.word	0x20000168

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_TIM2_Init+0x11c>)
 8000788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 800078e:	4b38      	ldr	r3, [pc, #224]	; (8000870 <MX_TIM2_Init+0x11c>)
 8000790:	f240 4237 	movw	r2, #1079	; 0x437
 8000794:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b36      	ldr	r3, [pc, #216]	; (8000870 <MX_TIM2_Init+0x11c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_TIM2_Init+0x11c>)
 800079e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80007a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b32      	ldr	r3, [pc, #200]	; (8000870 <MX_TIM2_Init+0x11c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <MX_TIM2_Init+0x11c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b0:	482f      	ldr	r0, [pc, #188]	; (8000870 <MX_TIM2_Init+0x11c>)
 80007b2:	f002 fe7b 	bl	80034ac <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80007bc:	f000 fa1a 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <MX_TIM2_Init+0x11c>)
 80007ce:	f003 f933 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007d8:	f000 fa0c 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007dc:	4824      	ldr	r0, [pc, #144]	; (8000870 <MX_TIM2_Init+0x11c>)
 80007de:	f002 febc 	bl	800355a <HAL_TIM_PWM_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007e8:	f000 fa04 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <MX_TIM2_Init+0x11c>)
 80007fc:	f003 fda4 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000806:	f000 f9f5 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800080a:	2370      	movs	r3, #112	; 0x70
 800080c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_TIM2_Init+0x11c>)
 8000822:	f002 fff5 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800082c:	f000 f9e2 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	; 0x60
 8000832:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	2208      	movs	r2, #8
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM2_Init+0x11c>)
 800083c:	f002 ffe8 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000846:	f000 f9d5 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	220c      	movs	r2, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <MX_TIM2_Init+0x11c>)
 8000852:	f002 ffdd 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 800085c:	f000 f9ca 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_TIM2_Init+0x11c>)
 8000862:	f000 fac7 	bl	8000df4 <HAL_TIM_MspPostInit>

}
 8000866:	bf00      	nop
 8000868:	3738      	adds	r7, #56	; 0x38
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000250 	.word	0x20000250

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USART3_UART_Init+0x58>)
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_USART3_UART_Init+0x5c>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART3_UART_Init+0x58>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART3_UART_Init+0x58>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART3_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART3_UART_Init+0x58>)
 80008b8:	f003 fdd4 	bl	8004464 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f997 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000029c 	.word	0x2000029c
 80008d0:	40004800 	.word	0x40004800

080008d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2206      	movs	r2, #6
 80008e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2201      	movs	r2, #1
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	f001 fb23 	bl	8001f62 <HAL_PCD_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f967 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000324 	.word	0x20000324

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a46      	ldr	r2, [pc, #280]	; (8000a64 <MX_GPIO_Init+0x134>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a40      	ldr	r2, [pc, #256]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <MX_GPIO_Init+0x134>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a3a      	ldr	r2, [pc, #232]	; (8000a64 <MX_GPIO_Init+0x134>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_GPIO_Init+0x134>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009dc:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x138>)
 80009de:	f001 faa7 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <MX_GPIO_Init+0x13c>)
 80009e8:	f001 faa2 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481b      	ldr	r0, [pc, #108]	; (8000a70 <MX_GPIO_Init+0x140>)
 8000a04:	f001 f8e8 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a08:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0x138>)
 8000a22:	f001 f8d9 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x13c>)
 8000a3e:	f001 f8cb 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x13c>)
 8000a56:	f001 f8bf 	bl	8001bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	00000000 	.word	0x00000000

08000a78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a55      	ldr	r2, [pc, #340]	; (8000bd8 <HAL_UART_RxCpltCallback+0x160>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	f040 809d 	bne.w	8000bc4 <HAL_UART_RxCpltCallback+0x14c>
		HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch1, 1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4953      	ldr	r1, [pc, #332]	; (8000bdc <HAL_UART_RxCpltCallback+0x164>)
 8000a8e:	4852      	ldr	r0, [pc, #328]	; (8000bd8 <HAL_UART_RxCpltCallback+0x160>)
 8000a90:	f003 fdb9 	bl	8004606 <HAL_UART_Receive_IT>
		while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000a94:	bf00      	nop
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <HAL_UART_RxCpltCallback+0x160>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa0:	2b40      	cmp	r3, #64	; 0x40
 8000aa2:	d1f8      	bne.n	8000a96 <HAL_UART_RxCpltCallback+0x1e>
		}
		HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 100);
 8000aa4:	2364      	movs	r3, #100	; 0x64
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	494c      	ldr	r1, [pc, #304]	; (8000bdc <HAL_UART_RxCpltCallback+0x164>)
 8000aaa:	484b      	ldr	r0, [pc, #300]	; (8000bd8 <HAL_UART_RxCpltCallback+0x160>)
 8000aac:	f003 fd28 	bl	8004500 <HAL_UART_Transmit>
		if (ch1 == 'r') {
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_UART_RxCpltCallback+0x164>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b72      	cmp	r3, #114	; 0x72
 8000ab6:	d129      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0x94>
			dutyCycleR += 0.2;
 8000ab8:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <HAL_UART_RxCpltCallback+0x168>)
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000bd0 <HAL_UART_RxCpltCallback+0x158>
 8000ac6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <HAL_UART_RxCpltCallback+0x168>)
 8000ad0:	edc3 7a00 	vstr	s15, [r3]
			if (dutyCycleR > 1) {
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <HAL_UART_RxCpltCallback+0x168>)
 8000ad6:	edd3 7a00 	vldr	s15, [r3]
 8000ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae6:	dd03      	ble.n	8000af0 <HAL_UART_RxCpltCallback+0x78>
				dutyCycleR = 0;
 8000ae8:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <HAL_UART_RxCpltCallback+0x168>)
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
			}
			htim2.Instance->CCR1 = (2000 - 1) * dutyCycleR;
 8000af0:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <HAL_UART_RxCpltCallback+0x168>)
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000be4 <HAL_UART_RxCpltCallback+0x16c>
 8000afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000afe:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <HAL_UART_RxCpltCallback+0x170>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b06:	ee17 2a90 	vmov	r2, s15
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34

		}
		if (ch1 == 'g') {
 8000b0c:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <HAL_UART_RxCpltCallback+0x164>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b67      	cmp	r3, #103	; 0x67
 8000b12:	d129      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0xf0>
			dutyCycleG += 0.2;
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <HAL_UART_RxCpltCallback+0x174>)
 8000b16:	edd3 7a00 	vldr	s15, [r3]
 8000b1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000bd0 <HAL_UART_RxCpltCallback+0x158>
 8000b22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b2a:	4b30      	ldr	r3, [pc, #192]	; (8000bec <HAL_UART_RxCpltCallback+0x174>)
 8000b2c:	edc3 7a00 	vstr	s15, [r3]
			if (dutyCycleG > 1) {
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <HAL_UART_RxCpltCallback+0x174>)
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	dd03      	ble.n	8000b4c <HAL_UART_RxCpltCallback+0xd4>
				dutyCycleG = 0;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_UART_RxCpltCallback+0x174>)
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
			}
			htim2.Instance->CCR3 = (2000 - 1) * dutyCycleG;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_UART_RxCpltCallback+0x174>)
 8000b4e:	edd3 7a00 	vldr	s15, [r3]
 8000b52:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000be4 <HAL_UART_RxCpltCallback+0x16c>
 8000b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_UART_RxCpltCallback+0x170>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b62:	ee17 2a90 	vmov	r2, s15
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c

		}
		if (ch1 == 'b') {
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_UART_RxCpltCallback+0x164>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b62      	cmp	r3, #98	; 0x62
 8000b6e:	d129      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x14c>
			dutyCycleB += 0.2;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_UART_RxCpltCallback+0x178>)
 8000b72:	edd3 7a00 	vldr	s15, [r3]
 8000b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000bd0 <HAL_UART_RxCpltCallback+0x158>
 8000b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_UART_RxCpltCallback+0x178>)
 8000b88:	edc3 7a00 	vstr	s15, [r3]
			if (dutyCycleB > 1) {
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_RxCpltCallback+0x178>)
 8000b8e:	edd3 7a00 	vldr	s15, [r3]
 8000b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9e:	dd03      	ble.n	8000ba8 <HAL_UART_RxCpltCallback+0x130>
				dutyCycleB = 0;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_UART_RxCpltCallback+0x178>)
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
			}
			htim2.Instance->CCR4 = (2000 - 1) * dutyCycleB;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_UART_RxCpltCallback+0x178>)
 8000baa:	edd3 7a00 	vldr	s15, [r3]
 8000bae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000be4 <HAL_UART_RxCpltCallback+0x16c>
 8000bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_UART_RxCpltCallback+0x170>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bbe:	ee17 2a90 	vmov	r2, s15
 8000bc2:	641a      	str	r2, [r3, #64]	; 0x40

		}
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	9999999a 	.word	0x9999999a
 8000bd4:	3fc99999 	.word	0x3fc99999
 8000bd8:	2000029c 	.word	0x2000029c
 8000bdc:	2000083c 	.word	0x2000083c
 8000be0:	20000830 	.word	0x20000830
 8000be4:	44f9e000 	.word	0x44f9e000
 8000be8:	20000250 	.word	0x20000250
 8000bec:	20000834 	.word	0x20000834
 8000bf0:	20000838 	.word	0x20000838

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x44>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x44>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x44>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a4e      	ldr	r2, [pc, #312]	; (8000da0 <HAL_ETH_MspInit+0x158>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 8096 	bne.w	8000d98 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c6c:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a4c      	ldr	r2, [pc, #304]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a46      	ldr	r2, [pc, #280]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d14:	2332      	movs	r3, #50	; 0x32
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d24:	230b      	movs	r3, #11
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <HAL_ETH_MspInit+0x160>)
 8000d30:	f000 ff52 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d34:	2386      	movs	r3, #134	; 0x86
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <HAL_ETH_MspInit+0x164>)
 8000d50:	f000 ff42 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <HAL_ETH_MspInit+0x168>)
 8000d72:	f000 ff31 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_ETH_MspInit+0x16c>)
 8000d94:	f000 ff20 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40028000 	.word	0x40028000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40021800 	.word	0x40021800

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc8:	d10b      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e14:	d139      	bne.n	8000e8a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_TIM_MspPostInit+0xa0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_TIM_MspPostInit+0xa0>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_TIM_MspPostInit+0xa0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_TIM_MspPostInit+0xa0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_TIM_MspPostInit+0xa0>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_TIM_MspPostInit+0xa0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <HAL_TIM_MspPostInit+0xa4>)
 8000e64:	f000 feb8 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_TIM_MspPostInit+0xa8>)
 8000e86:	f000 fea7 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ae      	sub	sp, #184	; 0xb8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2290      	movs	r2, #144	; 0x90
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 f8d5 	bl	8006070 <memset>
  if(huart->Instance==USART3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a26      	ldr	r2, [pc, #152]	; (8000f64 <HAL_UART_MspInit+0xc4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d144      	bne.n	8000f5a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 febc 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eea:	f7ff fe83 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_UART_MspInit+0xc8>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <HAL_UART_MspInit+0xc8>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_UART_MspInit+0xc8>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0xc8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0xc8>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0xc8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f46:	f000 fe47 	bl	8001bd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2027      	movs	r0, #39	; 0x27
 8000f50:	f000 fa53 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f54:	2027      	movs	r0, #39	; 0x27
 8000f56:	f000 fa6c 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	37b8      	adds	r7, #184	; 0xb8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ae      	sub	sp, #184	; 0xb8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2290      	movs	r2, #144	; 0x90
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 f86d 	bl	8006070 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9e:	d159      	bne.n	8001054 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fa4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fe53 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff fe1a 	bl	8000bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_PCD_MspInit+0xec>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_PCD_MspInit+0xec>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_PCD_MspInit+0xec>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4818      	ldr	r0, [pc, #96]	; (8001060 <HAL_PCD_MspInit+0xf0>)
 8001000:	f000 fdea 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800101c:	4619      	mov	r1, r3
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <HAL_PCD_MspInit+0xf0>)
 8001020:	f000 fdda 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_PCD_MspInit+0xec>)
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_PCD_MspInit+0xec>)
 800102a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102e:	6353      	str	r3, [r2, #52]	; 0x34
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_PCD_MspInit+0xec>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_PCD_MspInit+0xec>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_PCD_MspInit+0xec>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6453      	str	r3, [r2, #68]	; 0x44
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_PCD_MspInit+0xec>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	37b8      	adds	r7, #184	; 0xb8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f884 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART3_IRQHandler+0x10>)
 80010be:	f003 fae7 	bl	8004690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000029c 	.word	0x2000029c

080010cc <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800110c:	4c0b      	ldr	r4, [pc, #44]	; (800113c <LoopFillZerobss+0x26>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111a:	f7ff ffd7 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f004 ffaf 	bl	8006080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fa07 	bl	8000534 <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001134:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 8001138:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800113c:	2000084c 	.word	0x2000084c

08001140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC_IRQHandler>

08001142 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001146:	2003      	movs	r0, #3
 8001148:	f000 f94c 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114c:	2000      	movs	r0, #0
 800114e:	f000 f805 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001152:	f7ff fd55 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f967 	bl	800144e <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 f92f 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000848 	.word	0x20000848

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000848 	.word	0x20000848

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <__NVIC_SetPriorityGrouping+0x40>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	4313      	orrs	r3, r2
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x40>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00
 8001288:	05fa0000 	.word	0x05fa0000

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff29 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff3e 	bl	800128c <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff8e 	bl	8001338 <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff31 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffa2 	bl	80013a0 <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff feb6 	bl	80011e4 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d008      	beq.n	8001498 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e052      	b.n	800153e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0216 	bic.w	r2, r2, #22
 80014a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <HAL_DMA_Abort+0x62>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0208 	bic.w	r2, r2, #8
 80014d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e8:	e013      	b.n	8001512 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ea:	f7ff fe7b 	bl	80011e4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d90c      	bls.n	8001512 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2220      	movs	r2, #32
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e015      	b.n	800153e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e4      	bne.n	80014ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	223f      	movs	r2, #63	; 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d004      	beq.n	8001564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e00c      	b.n	800157e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2205      	movs	r2, #5
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06a      	b.n	8001674 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d106      	bne.n	80015b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2223      	movs	r2, #35	; 0x23
 80015ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fb49 	bl	8000c48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_ETH_Init+0xf0>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a30      	ldr	r2, [pc, #192]	; (800167c <HAL_ETH_Init+0xf0>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b2e      	ldr	r3, [pc, #184]	; (800167c <HAL_ETH_Init+0xf0>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_ETH_Init+0xf4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <HAL_ETH_Init+0xf4>)
 80015d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_ETH_Init+0xf4>)
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4927      	ldr	r1, [pc, #156]	; (8001680 <HAL_ETH_Init+0xf4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_ETH_Init+0xf4>)
 80015ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001602:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001604:	f7ff fdee 	bl	80011e4 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800160a:	e011      	b.n	8001630 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800160c:	f7ff fdea 	bl	80011e4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800161a:	d909      	bls.n	8001630 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2204      	movs	r2, #4
 8001620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	22e0      	movs	r2, #224	; 0xe0
 8001628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e021      	b.n	8001674 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1e4      	bne.n	800160c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f958 	bl	80018f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f9ff 	bl	8001a4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fa55 	bl	8001afe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	461a      	mov	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f9bd 	bl	80019dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2210      	movs	r2, #16
 800166e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800

08001684 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <ETH_SetMACConfig+0x15c>)
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7c1b      	ldrb	r3, [r3, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <ETH_SetMACConfig+0x28>
 80016a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016aa:	e000      	b.n	80016ae <ETH_SetMACConfig+0x2a>
 80016ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	7c5b      	ldrb	r3, [r3, #17]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <ETH_SetMACConfig+0x38>
 80016b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ba:	e000      	b.n	80016be <ETH_SetMACConfig+0x3a>
 80016bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	7fdb      	ldrb	r3, [r3, #31]
 80016ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	7f92      	ldrb	r2, [r2, #30]
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d102      	bne.n	80016e2 <ETH_SetMACConfig+0x5e>
 80016dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e0:	e000      	b.n	80016e4 <ETH_SetMACConfig+0x60>
 80016e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80016e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7f1b      	ldrb	r3, [r3, #28]
 80016ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80016fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001702:	2a00      	cmp	r2, #0
 8001704:	d102      	bne.n	800170c <ETH_SetMACConfig+0x88>
 8001706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170a:	e000      	b.n	800170e <ETH_SetMACConfig+0x8a>
 800170c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800170e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7bdb      	ldrb	r3, [r3, #15]
 8001714:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001716:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800171c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001724:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001726:	4313      	orrs	r3, r2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fd5c 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	f64f 7341 	movw	r3, #65345	; 0xff41
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001762:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800176a:	2a00      	cmp	r2, #0
 800176c:	d101      	bne.n	8001772 <ETH_SetMACConfig+0xee>
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	e000      	b.n	8001774 <ETH_SetMACConfig+0xf0>
 8001772:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001774:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800177a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001782:	2a01      	cmp	r2, #1
 8001784:	d101      	bne.n	800178a <ETH_SetMACConfig+0x106>
 8001786:	2208      	movs	r2, #8
 8001788:	e000      	b.n	800178c <ETH_SetMACConfig+0x108>
 800178a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800178c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001794:	2a01      	cmp	r2, #1
 8001796:	d101      	bne.n	800179c <ETH_SetMACConfig+0x118>
 8001798:	2204      	movs	r2, #4
 800179a:	e000      	b.n	800179e <ETH_SetMACConfig+0x11a>
 800179c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800179e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80017a6:	2a01      	cmp	r2, #1
 80017a8:	d101      	bne.n	80017ae <ETH_SetMACConfig+0x12a>
 80017aa:	2202      	movs	r2, #2
 80017ac:	e000      	b.n	80017b0 <ETH_SetMACConfig+0x12c>
 80017ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017b0:	4313      	orrs	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fd17 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	ff20810f 	.word	0xff20810f

080017e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <ETH_SetDMAConfig+0x110>)
 80017fe:	4013      	ands	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <ETH_SetDMAConfig+0x2c>
 800180a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800180e:	e000      	b.n	8001812 <ETH_SetDMAConfig+0x2e>
 8001810:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7b5b      	ldrb	r3, [r3, #13]
 8001816:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001818:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	7f52      	ldrb	r2, [r2, #29]
 800181e:	2a00      	cmp	r2, #0
 8001820:	d102      	bne.n	8001828 <ETH_SetDMAConfig+0x44>
 8001822:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001826:	e000      	b.n	800182a <ETH_SetDMAConfig+0x46>
 8001828:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800182a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7b9b      	ldrb	r3, [r3, #14]
 8001830:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001832:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7f1b      	ldrb	r3, [r3, #28]
 800183e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001840:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	7f9b      	ldrb	r3, [r3, #30]
 8001846:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001848:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800184e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001856:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001858:	4313      	orrs	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	461a      	mov	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff fcbe 	bl	80011fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001898:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800189e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80018ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff fc8f 	bl	80011fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	f8de3f23 	.word	0xf8de3f23

080018f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0a6      	sub	sp, #152	; 0x98
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001922:	2301      	movs	r3, #1
 8001924:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001934:	2300      	movs	r3, #0
 8001936:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800193e:	2300      	movs	r3, #0
 8001940:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001964:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800196c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fe86 	bl	8001684 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001978:	2301      	movs	r3, #1
 800197a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800197c:	2301      	movs	r3, #1
 800197e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff08 	bl	80017e4 <ETH_SetDMAConfig>
}
 80019d4:	bf00      	nop
 80019d6:	3798      	adds	r7, #152	; 0x98
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3305      	adds	r3, #5
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	3204      	adds	r2, #4
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <ETH_MACAddressConfig+0x68>)
 80019fe:	4413      	add	r3, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3302      	adds	r3, #2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	4313      	orrs	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <ETH_MACAddressConfig+0x6c>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	6013      	str	r3, [r2, #0]
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40028040 	.word	0x40028040
 8001a48:	40028044 	.word	0x40028044

08001a4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e03e      	b.n	8001ad8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68d9      	ldr	r1, [r3, #12]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	3206      	adds	r2, #6
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d80c      	bhi.n	8001abc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68d9      	ldr	r1, [r3, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	e004      	b.n	8001ac6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d9bd      	bls.n	8001a5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	611a      	str	r2, [r3, #16]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e046      	b.n	8001b9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6919      	ldr	r1, [r3, #16]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	3212      	adds	r2, #18
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d80c      	bhi.n	8001b8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6919      	ldr	r1, [r3, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	e004      	b.n	8001b94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d9b5      	bls.n	8001b0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	60da      	str	r2, [r3, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e175      	b.n	8001ee4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8164 	bne.w	8001ede <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x56>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80be 	beq.w	8001ede <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b66      	ldr	r3, [pc, #408]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a65      	ldr	r2, [pc, #404]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d7a:	4a61      	ldr	r2, [pc, #388]	; (8001f00 <HAL_GPIO_Init+0x328>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_GPIO_Init+0x32c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d037      	beq.n	8001e16 <HAL_GPIO_Init+0x23e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_GPIO_Init+0x330>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_GPIO_Init+0x23a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x334>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02b      	beq.n	8001e0e <HAL_GPIO_Init+0x236>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_GPIO_Init+0x338>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d025      	beq.n	8001e0a <HAL_GPIO_Init+0x232>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a54      	ldr	r2, [pc, #336]	; (8001f14 <HAL_GPIO_Init+0x33c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01f      	beq.n	8001e06 <HAL_GPIO_Init+0x22e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a53      	ldr	r2, [pc, #332]	; (8001f18 <HAL_GPIO_Init+0x340>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x22a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <HAL_GPIO_Init+0x344>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x226>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x348>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x222>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a50      	ldr	r2, [pc, #320]	; (8001f24 <HAL_GPIO_Init+0x34c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x21e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001dee:	2309      	movs	r3, #9
 8001df0:	e012      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001df2:	230a      	movs	r3, #10
 8001df4:	e010      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001df6:	2308      	movs	r3, #8
 8001df8:	e00e      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00c      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001dfe:	2306      	movs	r3, #6
 8001e00:	e00a      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e16:	2300      	movs	r3, #0
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e28:	4935      	ldr	r1, [pc, #212]	; (8001f00 <HAL_GPIO_Init+0x328>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eae:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f67f ae86 	bls.w	8001bf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40013800 	.word	0x40013800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40021400 	.word	0x40021400
 8001f1c:	40021800 	.word	0x40021800
 8001f20:	40021c00 	.word	0x40021c00
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40022400 	.word	0x40022400
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f64:	b08f      	sub	sp, #60	; 0x3c
 8001f66:	af0a      	add	r7, sp, #40	; 0x28
 8001f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e116      	b.n	80021a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7fe ffee 	bl	8000f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2203      	movs	r2, #3
 8001f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fdc0 	bl	8005b38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	687e      	ldr	r6, [r7, #4]
 8001fc0:	466d      	mov	r5, sp
 8001fc2:	f106 0410 	add.w	r4, r6, #16
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd6:	1d33      	adds	r3, r6, #4
 8001fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fda:	6838      	ldr	r0, [r7, #0]
 8001fdc:	f003 fd54 	bl	8005a88 <USB_CoreInit>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d7      	b.n	80021a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fdae 	bl	8005b5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e04a      	b.n	800209a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	333d      	adds	r3, #61	; 0x3d
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	333c      	adds	r3, #60	; 0x3c
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	b298      	uxth	r0, r3
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3344      	adds	r3, #68	; 0x44
 8002040:	4602      	mov	r2, r0
 8002042:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3340      	adds	r3, #64	; 0x40
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3348      	adds	r3, #72	; 0x48
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	334c      	adds	r3, #76	; 0x4c
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	3301      	adds	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3af      	bcc.n	8002004 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e044      	b.n	8002134 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3301      	adds	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d3b5      	bcc.n	80020aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	687e      	ldr	r6, [r7, #4]
 8002146:	466d      	mov	r5, sp
 8002148:	f106 0410 	add.w	r4, r6, #16
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002154:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002158:	e885 0003 	stmia.w	r5, {r0, r1}
 800215c:	1d33      	adds	r3, r6, #4
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f003 fd47 	bl	8005bf4 <USB_DevInit>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e014      	b.n	80021a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f80b 	bl	80021ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 ff05 	bl	8005faa <USB_DevDisconnect>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	10000003 	.word	0x10000003

080021f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_PWREx_EnableOverDrive+0x98>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_PWREx_EnableOverDrive+0x98>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_PWREx_EnableOverDrive+0x98>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002242:	f7fe ffcf 	bl	80011e4 <HAL_GetTick>
 8002246:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002248:	e009      	b.n	800225e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800224a:	f7fe ffcb 	bl	80011e4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002258:	d901      	bls.n	800225e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e022      	b.n	80022a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d1ee      	bne.n	800224a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002276:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002278:	f7fe ffb4 	bl	80011e4 <HAL_GetTick>
 800227c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800227e:	e009      	b.n	8002294 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002280:	f7fe ffb0 	bl	80011e4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228e:	d901      	bls.n	8002294 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e007      	b.n	80022a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022a0:	d1ee      	bne.n	8002280 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e29b      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8087 	beq.w	80023e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d8:	4b96      	ldr	r3, [pc, #600]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d00c      	beq.n	80022fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e4:	4b93      	ldr	r3, [pc, #588]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d112      	bne.n	8002316 <HAL_RCC_OscConfig+0x62>
 80022f0:	4b90      	ldr	r3, [pc, #576]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fc:	d10b      	bne.n	8002316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fe:	4b8d      	ldr	r3, [pc, #564]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d06c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x130>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d168      	bne.n	80023e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e275      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x7a>
 8002320:	4b84      	ldr	r3, [pc, #528]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a83      	ldr	r2, [pc, #524]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e02e      	b.n	800238c <HAL_RCC_OscConfig+0xd8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x9c>
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7e      	ldr	r2, [pc, #504]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7b      	ldr	r2, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e01d      	b.n	800238c <HAL_RCC_OscConfig+0xd8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0xc0>
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b73      	ldr	r3, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a72      	ldr	r2, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xd8>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6b      	ldr	r2, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ff26 	bl	80011e4 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe ff22 	bl	80011e4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e229      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0xe8>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe ff12 	bl	80011e4 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe ff0e 	bl	80011e4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e215      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x110>
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d069      	beq.n	80024c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fe:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	d11c      	bne.n	8002444 <HAL_RCC_OscConfig+0x190>
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d116      	bne.n	8002444 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x17a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e1e9      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	493d      	ldr	r1, [pc, #244]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	e040      	b.n	80024c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fec4 	bl	80011e4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe fec0 	bl	80011e4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1c7      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4929      	ldr	r1, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
 8002492:	e018      	b.n	80024c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a26      	ldr	r2, [pc, #152]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fea0 	bl	80011e4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fe9c 	bl	80011e4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1a3      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d038      	beq.n	8002544 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fe7d 	bl	80011e4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fe79 	bl	80011e4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e180      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x23a>
 800250c:	e01a      	b.n	8002544 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <HAL_RCC_OscConfig+0x280>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fe63 	bl	80011e4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fe5f 	bl	80011e4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d903      	bls.n	8002538 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e166      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
 8002534:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a4 	beq.w	800269a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a88      	ldr	r2, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b86      	ldr	r3, [pc, #536]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257a:	4b83      	ldr	r3, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x4d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002586:	4b80      	ldr	r3, [pc, #512]	; (8002788 <HAL_RCC_OscConfig+0x4d4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7f      	ldr	r2, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x4d4>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe fe27 	bl	80011e4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fe23 	bl	80011e4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e12a      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x4d4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x31a>
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a6f      	ldr	r2, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	e02d      	b.n	800262a <HAL_RCC_OscConfig+0x376>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x33c>
 80025d6:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e01c      	b.n	800262a <HAL_RCC_OscConfig+0x376>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d10c      	bne.n	8002612 <HAL_RCC_OscConfig+0x35e>
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a61      	ldr	r2, [pc, #388]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a5e      	ldr	r2, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
 8002610:	e00b      	b.n	800262a <HAL_RCC_OscConfig+0x376>
 8002612:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a5b      	ldr	r2, [pc, #364]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
 800261e:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d015      	beq.n	800265e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7fe fdd7 	bl	80011e4 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7fe fdd3 	bl	80011e4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0d8      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ee      	beq.n	800263a <HAL_RCC_OscConfig+0x386>
 800265c:	e014      	b.n	8002688 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fdc1 	bl	80011e4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe fdbd 	bl	80011e4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0c2      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ee      	bne.n	8002666 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80ae 	beq.w	8002800 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d06d      	beq.n	800278c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d14b      	bne.n	8002750 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a31      	ldr	r2, [pc, #196]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fd8e 	bl	80011e4 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fd8a 	bl	80011e4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e091      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	071b      	lsls	r3, r3, #28
 8002716:	491b      	ldr	r1, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fd5c 	bl	80011e4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fd58 	bl	80011e4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e05f      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x47c>
 800274e:	e057      	b.n	8002800 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fd42 	bl	80011e4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fd3e 	bl	80011e4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e045      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_OscConfig+0x4d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x4b0>
 8002782:	e03d      	b.n	8002800 <HAL_RCC_OscConfig+0x54c>
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_RCC_OscConfig+0x558>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d030      	beq.n	80027fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d129      	bne.n	80027fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d122      	bne.n	80027fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d119      	bne.n	80027fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	3b01      	subs	r3, #1
 80027d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d10f      	bne.n	80027fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800

08002810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0d0      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d910      	bls.n	8002858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 020f 	bic.w	r2, r3, #15
 800283e:	4965      	ldr	r1, [pc, #404]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d040      	beq.n	8002934 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d115      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e073      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06b      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4936      	ldr	r1, [pc, #216]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002904:	f7fe fc6e 	bl	80011e4 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7fe fc6a 	bl	80011e4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e053      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d210      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 020f 	bic.w	r2, r3, #15
 800294a:	4922      	ldr	r1, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fbca 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080060e0 	.word	0x080060e0
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ec:	b094      	sub	sp, #80	; 0x50
 80029ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	647b      	str	r3, [r7, #68]	; 0x44
 80029f4:	2300      	movs	r3, #0
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f8:	2300      	movs	r3, #0
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a00:	4b79      	ldr	r3, [pc, #484]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d00d      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x40>
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	f200 80e1 	bhi.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x34>
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1a:	e0db      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_RCC_GetSysClockFreq+0x204>)
 8002a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a20:	e0db      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a22:	4b73      	ldr	r3, [pc, #460]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a26:	e0d8      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a28:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a32:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d063      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	2200      	movs	r2, #0
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
 8002a52:	2300      	movs	r3, #0
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
 8002a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a5a:	4622      	mov	r2, r4
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	f04f 0000 	mov.w	r0, #0
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	0159      	lsls	r1, r3, #5
 8002a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6c:	0150      	lsls	r0, r2, #5
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4621      	mov	r1, r4
 8002a74:	1a51      	subs	r1, r2, r1
 8002a76:	6139      	str	r1, [r7, #16]
 8002a78:	4629      	mov	r1, r5
 8002a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	018b      	lsls	r3, r1, #6
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a96:	4651      	mov	r1, sl
 8002a98:	018a      	lsls	r2, r1, #6
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa0:	4659      	mov	r1, fp
 8002aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	eb18 0303 	adds.w	r3, r8, r3
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	462b      	mov	r3, r5
 8002ac8:	eb49 0303 	adc.w	r3, r9, r3
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ada:	4629      	mov	r1, r5
 8002adc:	024b      	lsls	r3, r1, #9
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	024a      	lsls	r2, r1, #9
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	2200      	movs	r2, #0
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af8:	f7fd fb9e 	bl	8000238 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b04:	e058      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b06:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	4611      	mov	r1, r2
 8002b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	f04f 0000 	mov.w	r0, #0
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	0159      	lsls	r1, r3, #5
 8002b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b32:	0150      	lsls	r0, r2, #5
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4641      	mov	r1, r8
 8002b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b3e:	4649      	mov	r1, r9
 8002b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b58:	ebb2 040a 	subs.w	r4, r2, sl
 8002b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	00eb      	lsls	r3, r5, #3
 8002b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b6e:	00e2      	lsls	r2, r4, #3
 8002b70:	4614      	mov	r4, r2
 8002b72:	461d      	mov	r5, r3
 8002b74:	4643      	mov	r3, r8
 8002b76:	18e3      	adds	r3, r4, r3
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	eb45 0303 	adc.w	r3, r5, r3
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	028b      	lsls	r3, r1, #10
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b98:	4621      	mov	r1, r4
 8002b9a:	028a      	lsls	r2, r1, #10
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	61fa      	str	r2, [r7, #28]
 8002ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bac:	f7fd fb44 	bl	8000238 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3750      	adds	r7, #80	; 0x50
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	007a1200 	.word	0x007a1200

08002bf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000000 	.word	0x20000000

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	080060f0 	.word	0x080060f0

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffdc 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0b5b      	lsrs	r3, r3, #13
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	080060f0 	.word	0x080060f0

08002c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d012      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c84:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c8e:	6093      	str	r3, [r2, #8]
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	4964      	ldr	r1, [pc, #400]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d017      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	4959      	ldr	r1, [pc, #356]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd4:	d101      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	494a      	ldr	r1, [pc, #296]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 808b 	beq.w	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4c:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe fa3e 	bl	80011e4 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fa3a 	bl	80011e4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e38f      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d035      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d02e      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d114      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fa02 	bl	80011e4 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe f9fe 	bl	80011e4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e351      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e12:	d111      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e22:	400b      	ands	r3, r1
 8002e24:	4901      	ldr	r1, [pc, #4]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	0ffffcff 	.word	0x0ffffcff
 8002e38:	4bac      	ldr	r3, [pc, #688]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4aab      	ldr	r2, [pc, #684]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e42:	6093      	str	r3, [r2, #8]
 8002e44:	4ba9      	ldr	r3, [pc, #676]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	49a6      	ldr	r1, [pc, #664]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e62:	4ba2      	ldr	r3, [pc, #648]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e68:	4aa0      	ldr	r2, [pc, #640]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e72:	4b9e      	ldr	r3, [pc, #632]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	499b      	ldr	r1, [pc, #620]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e90:	4b96      	ldr	r3, [pc, #600]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9e:	4993      	ldr	r1, [pc, #588]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb2:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec0:	498a      	ldr	r1, [pc, #552]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee2:	4982      	ldr	r1, [pc, #520]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ef6:	4b7d      	ldr	r3, [pc, #500]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4979      	ldr	r1, [pc, #484]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f18:	4b74      	ldr	r3, [pc, #464]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	4971      	ldr	r1, [pc, #452]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f023 020c 	bic.w	r2, r3, #12
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	4968      	ldr	r1, [pc, #416]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f5c:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4960      	ldr	r1, [pc, #384]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f7e:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8c:	4957      	ldr	r1, [pc, #348]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa0:	4b52      	ldr	r3, [pc, #328]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	494f      	ldr	r1, [pc, #316]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	4946      	ldr	r1, [pc, #280]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fe4:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	493e      	ldr	r1, [pc, #248]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	4935      	ldr	r1, [pc, #212]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003036:	492d      	ldr	r1, [pc, #180]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d011      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003058:	4924      	ldr	r1, [pc, #144]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003068:	d101      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003098:	4914      	ldr	r1, [pc, #80]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030bc:	490b      	ldr	r1, [pc, #44]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00f      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e0:	4902      	ldr	r1, [pc, #8]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030e8:	e002      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030fc:	4b8a      	ldr	r3, [pc, #552]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003102:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	4986      	ldr	r1, [pc, #536]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003120:	4b81      	ldr	r3, [pc, #516]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003126:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003130:	497d      	ldr	r1, [pc, #500]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d006      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80d6 	beq.w	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800314c:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a75      	ldr	r2, [pc, #468]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7fe f844 	bl	80011e4 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003160:	f7fe f840 	bl	80011e4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e195      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003172:	4b6d      	ldr	r3, [pc, #436]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d021      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11d      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003192:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	0e1b      	lsrs	r3, r3, #24
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	4958      	ldr	r1, [pc, #352]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02e      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d129      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031fa:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003208:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	0f1b      	lsrs	r3, r3, #28
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	019a      	lsls	r2, r3, #6
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	061b      	lsls	r3, r3, #24
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	071b      	lsls	r3, r3, #28
 800322e:	493e      	ldr	r1, [pc, #248]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003236:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	f023 021f 	bic.w	r2, r3, #31
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	3b01      	subs	r3, #1
 8003246:	4938      	ldr	r1, [pc, #224]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01d      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003268:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326e:	0f1b      	lsrs	r3, r3, #28
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	019a      	lsls	r2, r3, #6
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	4926      	ldr	r1, [pc, #152]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d011      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	019a      	lsls	r2, r3, #6
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	491a      	ldr	r1, [pc, #104]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d2:	f7fd ff87 	bl	80011e4 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032da:	f7fd ff83 	bl	80011e4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0d8      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f040 80ce 	bne.w	800349c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a08      	ldr	r2, [pc, #32]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fd ff6a 	bl	80011e4 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003312:	e00b      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003314:	f7fd ff66 	bl	80011e4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d904      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0bb      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003338:	d0ec      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02e      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d12a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	0f1b      	lsrs	r3, r3, #28
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	019a      	lsls	r2, r3, #6
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	071b      	lsls	r3, r3, #28
 8003396:	4944      	ldr	r1, [pc, #272]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	493d      	ldr	r1, [pc, #244]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d022      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033cc:	d11d      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	0f1b      	lsrs	r3, r3, #28
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	019a      	lsls	r2, r3, #6
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	041b      	lsls	r3, r3, #16
 80033f6:	431a      	orrs	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	071b      	lsls	r3, r3, #28
 8003402:	4929      	ldr	r1, [pc, #164]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d028      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	019a      	lsls	r2, r3, #6
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	431a      	orrs	r2, r3
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	4917      	ldr	r1, [pc, #92]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4911      	ldr	r1, [pc, #68]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003474:	f7fd feb6 	bl	80011e4 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800347c:	f7fd feb2 	bl	80011e4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e007      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800349a:	d1ef      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e049      	b.n	8003552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fc70 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f000 fb6e 	bl	8003bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e049      	b.n	8003600 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f841 	bl	8003608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 fb17 	bl	8003bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_TIM_PWM_Start+0x24>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e03c      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d109      	bne.n	800365a <HAL_TIM_PWM_Start+0x3e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e02f      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d109      	bne.n	8003674 <HAL_TIM_PWM_Start+0x58>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e022      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d109      	bne.n	800368e <HAL_TIM_PWM_Start+0x72>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e015      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d109      	bne.n	80036a8 <HAL_TIM_PWM_Start+0x8c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e008      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e092      	b.n	80037e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0xb6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d0:	e023      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start+0xc6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e0:	e01b      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_PWM_Start+0xd6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	e013      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Start+0xe6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003700:	e00b      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start+0xf6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003710:	e003      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2201      	movs	r2, #1
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fdea 	bl	80042fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a30      	ldr	r2, [pc, #192]	; (80037f0 <HAL_TIM_PWM_Start+0x1d4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_PWM_Start+0x120>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <HAL_TIM_PWM_Start+0x1d8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_TIM_PWM_Start+0x124>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_TIM_PWM_Start+0x126>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <HAL_TIM_PWM_Start+0x1d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d01d      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <HAL_TIM_PWM_Start+0x1dc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_TIM_PWM_Start+0x1e0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_TIM_PWM_Start+0x1e4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_TIM_PWM_Start+0x1d8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_TIM_PWM_Start+0x1e8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x18a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_TIM_PWM_Start+0x1ec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d115      	bne.n	80037d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_TIM_PWM_Start+0x1f0>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d015      	beq.n	80037e4 <HAL_TIM_PWM_Start+0x1c8>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037be:	d011      	beq.n	80037e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	e008      	b.n	80037e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e000      	b.n	80037e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40014000 	.word	0x40014000
 8003808:	40001800 	.word	0x40001800
 800380c:	00010007 	.word	0x00010007

08003810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800382a:	2302      	movs	r3, #2
 800382c:	e0ff      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b14      	cmp	r3, #20
 800383a:	f200 80f0 	bhi.w	8003a1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003899 	.word	0x08003899
 8003848:	08003a1f 	.word	0x08003a1f
 800384c:	08003a1f 	.word	0x08003a1f
 8003850:	08003a1f 	.word	0x08003a1f
 8003854:	080038d9 	.word	0x080038d9
 8003858:	08003a1f 	.word	0x08003a1f
 800385c:	08003a1f 	.word	0x08003a1f
 8003860:	08003a1f 	.word	0x08003a1f
 8003864:	0800391b 	.word	0x0800391b
 8003868:	08003a1f 	.word	0x08003a1f
 800386c:	08003a1f 	.word	0x08003a1f
 8003870:	08003a1f 	.word	0x08003a1f
 8003874:	0800395b 	.word	0x0800395b
 8003878:	08003a1f 	.word	0x08003a1f
 800387c:	08003a1f 	.word	0x08003a1f
 8003880:	08003a1f 	.word	0x08003a1f
 8003884:	0800399d 	.word	0x0800399d
 8003888:	08003a1f 	.word	0x08003a1f
 800388c:	08003a1f 	.word	0x08003a1f
 8003890:	08003a1f 	.word	0x08003a1f
 8003894:	080039dd 	.word	0x080039dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fa34 	bl	8003d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6999      	ldr	r1, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	619a      	str	r2, [r3, #24]
      break;
 80038d6:	e0a5      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fa86 	bl	8003df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	021a      	lsls	r2, r3, #8
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	619a      	str	r2, [r3, #24]
      break;
 8003918:	e084      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fadd 	bl	8003ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0208 	orr.w	r2, r2, #8
 8003934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0204 	bic.w	r2, r2, #4
 8003944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69d9      	ldr	r1, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	61da      	str	r2, [r3, #28]
      break;
 8003958:	e064      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fb33 	bl	8003fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	61da      	str	r2, [r3, #28]
      break;
 800399a:	e043      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fb6a 	bl	800407c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0208 	orr.w	r2, r2, #8
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0204 	bic.w	r2, r2, #4
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039da:	e023      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb9c 	bl	8004120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	021a      	lsls	r2, r3, #8
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a1c:	e002      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
      break;
 8003a22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIM_ConfigClockSource+0x1c>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0b4      	b.n	8003bbe <HAL_TIM_ConfigClockSource+0x186>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4b56      	ldr	r3, [pc, #344]	; (8003bc8 <HAL_TIM_ConfigClockSource+0x190>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8c:	d03e      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0xd4>
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	f200 8087 	bhi.w	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	f000 8086 	beq.w	8003baa <HAL_TIM_ConfigClockSource+0x172>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	d87f      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b70      	cmp	r3, #112	; 0x70
 8003aa6:	d01a      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0xa6>
 8003aa8:	2b70      	cmp	r3, #112	; 0x70
 8003aaa:	d87b      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b60      	cmp	r3, #96	; 0x60
 8003aae:	d050      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x11a>
 8003ab0:	2b60      	cmp	r3, #96	; 0x60
 8003ab2:	d877      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b50      	cmp	r3, #80	; 0x50
 8003ab6:	d03c      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0xfa>
 8003ab8:	2b50      	cmp	r3, #80	; 0x50
 8003aba:	d873      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d058      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x13a>
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d86f      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d064      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac8:	2b30      	cmp	r3, #48	; 0x30
 8003aca:	d86b      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d060      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d867      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d05a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	e062      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aee:	f000 fbe5 	bl	80042bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
      break;
 8003b0a:	e04f      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b1c:	f000 fbce 	bl	80042bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b2e:	609a      	str	r2, [r3, #8]
      break;
 8003b30:	e03c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f000 fb42 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2150      	movs	r1, #80	; 0x50
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fb9b 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003b50:	e02c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 fb61 	bl	8004226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2160      	movs	r1, #96	; 0x60
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fb8b 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003b70:	e01c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 fb22 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fb7b 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003b90:	e00c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f000 fb72 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003ba2:	e003      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e000      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	fffeff88 	.word	0xfffeff88

08003bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a40      	ldr	r2, [pc, #256]	; (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d00f      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a3d      	ldr	r2, [pc, #244]	; (8003ce4 <TIM_Base_SetConfig+0x118>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <TIM_Base_SetConfig+0x11c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <TIM_Base_SetConfig+0x120>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3a      	ldr	r2, [pc, #232]	; (8003cf0 <TIM_Base_SetConfig+0x124>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d108      	bne.n	8003c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02b      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d027      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <TIM_Base_SetConfig+0x118>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d023      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <TIM_Base_SetConfig+0x11c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <TIM_Base_SetConfig+0x120>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01b      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <TIM_Base_SetConfig+0x124>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d017      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <TIM_Base_SetConfig+0x128>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <TIM_Base_SetConfig+0x12c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <TIM_Base_SetConfig+0x130>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <TIM_Base_SetConfig+0x134>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a24      	ldr	r2, [pc, #144]	; (8003d04 <TIM_Base_SetConfig+0x138>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <TIM_Base_SetConfig+0x13c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0xf8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <TIM_Base_SetConfig+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40010400 	.word	0x40010400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800
 8003d00:	40001800 	.word	0x40001800
 8003d04:	40001c00 	.word	0x40001c00
 8003d08:	40002000 	.word	0x40002000

08003d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <TIM_OC1_SetConfig+0xd8>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0302 	bic.w	r3, r3, #2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <TIM_OC1_SetConfig+0xdc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC1_SetConfig+0x64>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a20      	ldr	r2, [pc, #128]	; (8003dec <TIM_OC1_SetConfig+0xe0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10c      	bne.n	8003d8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <TIM_OC1_SetConfig+0xdc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_OC1_SetConfig+0x8e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <TIM_OC1_SetConfig+0xe0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	fffeff8f 	.word	0xfffeff8f
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40010400 	.word	0x40010400

08003df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <TIM_OC2_SetConfig+0xe4>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0320 	bic.w	r3, r3, #32
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <TIM_OC2_SetConfig+0xe8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_OC2_SetConfig+0x68>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <TIM_OC2_SetConfig+0xec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10d      	bne.n	8003e74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <TIM_OC2_SetConfig+0xe8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC2_SetConfig+0x94>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <TIM_OC2_SetConfig+0xec>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d113      	bne.n	8003eac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	feff8fff 	.word	0xfeff8fff
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40010400 	.word	0x40010400

08003ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <TIM_OC3_SetConfig+0xe0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <TIM_OC3_SetConfig+0xe4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC3_SetConfig+0x66>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a21      	ldr	r2, [pc, #132]	; (8003fc8 <TIM_OC3_SetConfig+0xe8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10d      	bne.n	8003f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <TIM_OC3_SetConfig+0xe4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_OC3_SetConfig+0x92>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <TIM_OC3_SetConfig+0xe8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d113      	bne.n	8003f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	fffeff8f 	.word	0xfffeff8f
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40010400 	.word	0x40010400

08003fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <TIM_OC4_SetConfig+0xa4>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_OC4_SetConfig+0xa8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC4_SetConfig+0x68>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <TIM_OC4_SetConfig+0xac>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d109      	bne.n	8004048 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	019b      	lsls	r3, r3, #6
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	feff8fff 	.word	0xfeff8fff
 8004074:	40010000 	.word	0x40010000
 8004078:	40010400 	.word	0x40010400

0800407c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <TIM_OC5_SetConfig+0x98>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a12      	ldr	r2, [pc, #72]	; (8004118 <TIM_OC5_SetConfig+0x9c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_OC5_SetConfig+0x5e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <TIM_OC5_SetConfig+0xa0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d109      	bne.n	80040ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	fffeff8f 	.word	0xfffeff8f
 8004118:	40010000 	.word	0x40010000
 800411c:	40010400 	.word	0x40010400

08004120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <TIM_OC6_SetConfig+0x9c>)
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	051b      	lsls	r3, r3, #20
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <TIM_OC6_SetConfig+0xa0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC6_SetConfig+0x60>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <TIM_OC6_SetConfig+0xa4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	feff8fff 	.word	0xfeff8fff
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40010400 	.word	0x40010400

080041c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 030a 	bic.w	r3, r3, #10
 8004204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0210 	bic.w	r2, r3, #16
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f043 0307 	orr.w	r3, r3, #7
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2201      	movs	r2, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e06d      	b.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a30      	ldr	r2, [pc, #192]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2f      	ldr	r2, [pc, #188]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d108      	bne.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800439a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a20      	ldr	r2, [pc, #128]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d022      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d01d      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d018      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10c      	bne.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40010000 	.word	0x40010000
 800444c:	40010400 	.word	0x40010400
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40014000 	.word	0x40014000
 8004460:	40001800 	.word	0x40001800

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e040      	b.n	80044f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fd0a 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fc06 	bl	8004cb4 <UART_SetConfig>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e022      	b.n	80044f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fe5e 	bl	800517c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fee5 	bl	80052c0 <UART_CheckIdleState>
 80044f6:	4603      	mov	r3, r0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004514:	2b20      	cmp	r3, #32
 8004516:	d171      	bne.n	80045fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_UART_Transmit+0x24>
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e06a      	b.n	80045fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2221      	movs	r2, #33	; 0x21
 8004534:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004536:	f7fc fe55 	bl	80011e4 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004554:	d108      	bne.n	8004568 <HAL_UART_Transmit+0x68>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e003      	b.n	8004570 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004570:	e02c      	b.n	80045cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 feec 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e038      	b.n	80045fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3302      	adds	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e007      	b.n	80045ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1cc      	bne.n	8004572 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2200      	movs	r2, #0
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 feb9 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e005      	b.n	80045fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b08a      	sub	sp, #40	; 0x28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	4613      	mov	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800461a:	2b20      	cmp	r3, #32
 800461c:	d132      	bne.n	8004684 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_UART_Receive_IT+0x24>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e02b      	b.n	8004686 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	613b      	str	r3, [r7, #16]
   return(result);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	69f9      	ldr	r1, [r7, #28]
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	61bb      	str	r3, [r7, #24]
   return(result);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	461a      	mov	r2, r3
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 ff34 	bl	80054e8 <UART_Start_Receive_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	e000      	b.n	8004686 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3728      	adds	r7, #40	; 0x28
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b0ba      	sub	sp, #232	; 0xe8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80046be:	4013      	ands	r3, r2
 80046c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d115      	bne.n	80046f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00f      	beq.n	80046f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 82ac 	beq.w	8004c46 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
      }
      return;
 80046f6:	e2a6      	b.n	8004c46 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8117 	beq.w	8004930 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800470e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004712:	4b85      	ldr	r3, [pc, #532]	; (8004928 <HAL_UART_IRQHandler+0x298>)
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 810a 	beq.w	8004930 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d011      	beq.n	800474c <HAL_UART_IRQHandler+0xbc>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	f043 0201 	orr.w	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d011      	beq.n	800477c <HAL_UART_IRQHandler+0xec>
 8004758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2202      	movs	r2, #2
 800476a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004772:	f043 0204 	orr.w	r2, r3, #4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d011      	beq.n	80047ac <HAL_UART_IRQHandler+0x11c>
 8004788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2204      	movs	r2, #4
 800479a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	f043 0202 	orr.w	r2, r3, #2
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2208      	movs	r2, #8
 80047d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047de:	f043 0208 	orr.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <HAL_UART_IRQHandler+0x18a>
 80047f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8212 	beq.w	8004c4a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800486e:	2b00      	cmp	r3, #0
 8004870:	d04f      	beq.n	8004912 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fefe 	bl	8005674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d141      	bne.n	800490a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800489c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3308      	adds	r3, #8
 80048ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1d9      	bne.n	8004886 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d013      	beq.n	8004902 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <HAL_UART_IRQHandler+0x29c>)
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fe2d 	bl	8001546 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d017      	beq.n	8004922 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00f      	b.n	8004922 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9b6 	bl	8004c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e00b      	b.n	8004922 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9b2 	bl	8004c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	e007      	b.n	8004922 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9ae 	bl	8004c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004920:	e193      	b.n	8004c4a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004922:	bf00      	nop
    return;
 8004924:	e191      	b.n	8004c4a <HAL_UART_IRQHandler+0x5ba>
 8004926:	bf00      	nop
 8004928:	04000120 	.word	0x04000120
 800492c:	0800573d 	.word	0x0800573d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	2b01      	cmp	r3, #1
 8004936:	f040 814c 	bne.w	8004bd2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8145 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 813e 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2210      	movs	r2, #16
 800495c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	f040 80b6 	bne.w	8004ada <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800497a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8165 	beq.w	8004c4e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800498a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498e:	429a      	cmp	r2, r3
 8004990:	f080 815d 	bcs.w	8004c4e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800499a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	f000 8086 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1da      	bne.n	80049ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e1      	bne.n	80049f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3308      	adds	r3, #8
 8004a38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e3      	bne.n	8004a32 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a88:	f023 0310 	bic.w	r3, r3, #16
 8004a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e4      	bne.n	8004a78 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fcd7 	bl	8001466 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8d8 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ad8:	e0b9      	b.n	8004c4e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80ab 	beq.w	8004c52 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a6 	beq.w	8004c52 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e4      	bne.n	8004b06 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b60:	633a      	str	r2, [r7, #48]	; 0x30
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e3      	bne.n	8004b3c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0310 	bic.w	r3, r3, #16
 8004b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	69b9      	ldr	r1, [r7, #24]
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e4      	bne.n	8004b88 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f85c 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bd0:	e03f      	b.n	8004c52 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <HAL_UART_IRQHandler+0x56c>
 8004bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f853 	bl	8004ca0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bfa:	e02d      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
    }
    return;
 8004c24:	e017      	b.n	8004c56 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d012      	beq.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
 8004c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fd92 	bl	8005768 <UART_EndTransmit_IT>
    return;
 8004c44:	e008      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004c46:	bf00      	nop
 8004c48:	e006      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004c4a:	bf00      	nop
 8004c4c:	e004      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004c56:	bf00      	nop
  }

}
 8004c58:	37e8      	adds	r7, #232	; 0xe8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop

08004c60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4ba6      	ldr	r3, [pc, #664]	; (8004f78 <UART_SetConfig+0x2c4>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a94      	ldr	r2, [pc, #592]	; (8004f7c <UART_SetConfig+0x2c8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d120      	bne.n	8004d72 <UART_SetConfig+0xbe>
 8004d30:	4b93      	ldr	r3, [pc, #588]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d816      	bhi.n	8004d6c <UART_SetConfig+0xb8>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x90>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d61 	.word	0x08004d61
 8004d4c:	08004d5b 	.word	0x08004d5b
 8004d50:	08004d67 	.word	0x08004d67
 8004d54:	2301      	movs	r3, #1
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e150      	b.n	8004ffc <UART_SetConfig+0x348>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e14d      	b.n	8004ffc <UART_SetConfig+0x348>
 8004d60:	2304      	movs	r3, #4
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e14a      	b.n	8004ffc <UART_SetConfig+0x348>
 8004d66:	2308      	movs	r3, #8
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e147      	b.n	8004ffc <UART_SetConfig+0x348>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e144      	b.n	8004ffc <UART_SetConfig+0x348>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a83      	ldr	r2, [pc, #524]	; (8004f84 <UART_SetConfig+0x2d0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d132      	bne.n	8004de2 <UART_SetConfig+0x12e>
 8004d7c:	4b80      	ldr	r3, [pc, #512]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d828      	bhi.n	8004ddc <UART_SetConfig+0x128>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0xdc>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004ddd 	.word	0x08004ddd
 8004d98:	08004ddd 	.word	0x08004ddd
 8004d9c:	08004ddd 	.word	0x08004ddd
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004ddd 	.word	0x08004ddd
 8004da8:	08004ddd 	.word	0x08004ddd
 8004dac:	08004ddd 	.word	0x08004ddd
 8004db0:	08004dcb 	.word	0x08004dcb
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004ddd 	.word	0x08004ddd
 8004dc0:	08004dd7 	.word	0x08004dd7
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e118      	b.n	8004ffc <UART_SetConfig+0x348>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e115      	b.n	8004ffc <UART_SetConfig+0x348>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e112      	b.n	8004ffc <UART_SetConfig+0x348>
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e10f      	b.n	8004ffc <UART_SetConfig+0x348>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e10c      	b.n	8004ffc <UART_SetConfig+0x348>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a68      	ldr	r2, [pc, #416]	; (8004f88 <UART_SetConfig+0x2d4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d120      	bne.n	8004e2e <UART_SetConfig+0x17a>
 8004dec:	4b64      	ldr	r3, [pc, #400]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004df6:	2b30      	cmp	r3, #48	; 0x30
 8004df8:	d013      	beq.n	8004e22 <UART_SetConfig+0x16e>
 8004dfa:	2b30      	cmp	r3, #48	; 0x30
 8004dfc:	d814      	bhi.n	8004e28 <UART_SetConfig+0x174>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d009      	beq.n	8004e16 <UART_SetConfig+0x162>
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d810      	bhi.n	8004e28 <UART_SetConfig+0x174>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <UART_SetConfig+0x15c>
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d006      	beq.n	8004e1c <UART_SetConfig+0x168>
 8004e0e:	e00b      	b.n	8004e28 <UART_SetConfig+0x174>
 8004e10:	2300      	movs	r3, #0
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e0f2      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e16:	2302      	movs	r3, #2
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e0ef      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e0ec      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e22:	2308      	movs	r3, #8
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e0e9      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e0e6      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a56      	ldr	r2, [pc, #344]	; (8004f8c <UART_SetConfig+0x2d8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d120      	bne.n	8004e7a <UART_SetConfig+0x1c6>
 8004e38:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e42:	2bc0      	cmp	r3, #192	; 0xc0
 8004e44:	d013      	beq.n	8004e6e <UART_SetConfig+0x1ba>
 8004e46:	2bc0      	cmp	r3, #192	; 0xc0
 8004e48:	d814      	bhi.n	8004e74 <UART_SetConfig+0x1c0>
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d009      	beq.n	8004e62 <UART_SetConfig+0x1ae>
 8004e4e:	2b80      	cmp	r3, #128	; 0x80
 8004e50:	d810      	bhi.n	8004e74 <UART_SetConfig+0x1c0>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <UART_SetConfig+0x1a8>
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d006      	beq.n	8004e68 <UART_SetConfig+0x1b4>
 8004e5a:	e00b      	b.n	8004e74 <UART_SetConfig+0x1c0>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e0cc      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e62:	2302      	movs	r3, #2
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e0c9      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e0c6      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e0c3      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e74:	2310      	movs	r3, #16
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e0c0      	b.n	8004ffc <UART_SetConfig+0x348>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a44      	ldr	r2, [pc, #272]	; (8004f90 <UART_SetConfig+0x2dc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d125      	bne.n	8004ed0 <UART_SetConfig+0x21c>
 8004e84:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d017      	beq.n	8004ec4 <UART_SetConfig+0x210>
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d817      	bhi.n	8004eca <UART_SetConfig+0x216>
 8004e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9e:	d00b      	beq.n	8004eb8 <UART_SetConfig+0x204>
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea4:	d811      	bhi.n	8004eca <UART_SetConfig+0x216>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <UART_SetConfig+0x1fe>
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d006      	beq.n	8004ebe <UART_SetConfig+0x20a>
 8004eb0:	e00b      	b.n	8004eca <UART_SetConfig+0x216>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e0a1      	b.n	8004ffc <UART_SetConfig+0x348>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e09e      	b.n	8004ffc <UART_SetConfig+0x348>
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e09b      	b.n	8004ffc <UART_SetConfig+0x348>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e098      	b.n	8004ffc <UART_SetConfig+0x348>
 8004eca:	2310      	movs	r3, #16
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e095      	b.n	8004ffc <UART_SetConfig+0x348>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <UART_SetConfig+0x2e0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d125      	bne.n	8004f26 <UART_SetConfig+0x272>
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee8:	d017      	beq.n	8004f1a <UART_SetConfig+0x266>
 8004eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eee:	d817      	bhi.n	8004f20 <UART_SetConfig+0x26c>
 8004ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef4:	d00b      	beq.n	8004f0e <UART_SetConfig+0x25a>
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efa:	d811      	bhi.n	8004f20 <UART_SetConfig+0x26c>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <UART_SetConfig+0x254>
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	d006      	beq.n	8004f14 <UART_SetConfig+0x260>
 8004f06:	e00b      	b.n	8004f20 <UART_SetConfig+0x26c>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e076      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e073      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f14:	2304      	movs	r3, #4
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e070      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e06d      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f20:	2310      	movs	r3, #16
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e06a      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <UART_SetConfig+0x2e4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d138      	bne.n	8004fa2 <UART_SetConfig+0x2ee>
 8004f30:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <UART_SetConfig+0x2cc>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f3e:	d017      	beq.n	8004f70 <UART_SetConfig+0x2bc>
 8004f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f44:	d82a      	bhi.n	8004f9c <UART_SetConfig+0x2e8>
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	d00b      	beq.n	8004f64 <UART_SetConfig+0x2b0>
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	d824      	bhi.n	8004f9c <UART_SetConfig+0x2e8>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <UART_SetConfig+0x2aa>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	d006      	beq.n	8004f6a <UART_SetConfig+0x2b6>
 8004f5c:	e01e      	b.n	8004f9c <UART_SetConfig+0x2e8>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e04b      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f64:	2302      	movs	r3, #2
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e048      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e045      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f70:	2308      	movs	r3, #8
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e042      	b.n	8004ffc <UART_SetConfig+0x348>
 8004f76:	bf00      	nop
 8004f78:	efff69f3 	.word	0xefff69f3
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40004400 	.word	0x40004400
 8004f88:	40004800 	.word	0x40004800
 8004f8c:	40004c00 	.word	0x40004c00
 8004f90:	40005000 	.word	0x40005000
 8004f94:	40011400 	.word	0x40011400
 8004f98:	40007800 	.word	0x40007800
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e02c      	b.n	8004ffc <UART_SetConfig+0x348>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a72      	ldr	r2, [pc, #456]	; (8005170 <UART_SetConfig+0x4bc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d125      	bne.n	8004ff8 <UART_SetConfig+0x344>
 8004fac:	4b71      	ldr	r3, [pc, #452]	; (8005174 <UART_SetConfig+0x4c0>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fba:	d017      	beq.n	8004fec <UART_SetConfig+0x338>
 8004fbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fc0:	d817      	bhi.n	8004ff2 <UART_SetConfig+0x33e>
 8004fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc6:	d00b      	beq.n	8004fe0 <UART_SetConfig+0x32c>
 8004fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fcc:	d811      	bhi.n	8004ff2 <UART_SetConfig+0x33e>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <UART_SetConfig+0x326>
 8004fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd6:	d006      	beq.n	8004fe6 <UART_SetConfig+0x332>
 8004fd8:	e00b      	b.n	8004ff2 <UART_SetConfig+0x33e>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e00d      	b.n	8004ffc <UART_SetConfig+0x348>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e00a      	b.n	8004ffc <UART_SetConfig+0x348>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e007      	b.n	8004ffc <UART_SetConfig+0x348>
 8004fec:	2308      	movs	r3, #8
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e004      	b.n	8004ffc <UART_SetConfig+0x348>
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e001      	b.n	8004ffc <UART_SetConfig+0x348>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005004:	d15b      	bne.n	80050be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005006:	7ffb      	ldrb	r3, [r7, #31]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d828      	bhi.n	800505e <UART_SetConfig+0x3aa>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x360>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	0800505f 	.word	0x0800505f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800505f 	.word	0x0800505f
 800502c:	0800505f 	.word	0x0800505f
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fd fde8 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 800503c:	61b8      	str	r0, [r7, #24]
        break;
 800503e:	e013      	b.n	8005068 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7fd fdf8 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8005044:	61b8      	str	r0, [r7, #24]
        break;
 8005046:	e00f      	b.n	8005068 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <UART_SetConfig+0x4c4>)
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e00c      	b.n	8005068 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7fd fccb 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8005052:	61b8      	str	r0, [r7, #24]
        break;
 8005054:	e008      	b.n	8005068 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505a:	61bb      	str	r3, [r7, #24]
        break;
 800505c:	e004      	b.n	8005068 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77bb      	strb	r3, [r7, #30]
        break;
 8005066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d074      	beq.n	8005158 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	005a      	lsls	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	d916      	bls.n	80050b8 <UART_SetConfig+0x404>
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d212      	bcs.n	80050b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f023 030f 	bic.w	r3, r3, #15
 800509a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	89fa      	ldrh	r2, [r7, #14]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	e04f      	b.n	8005158 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	77bb      	strb	r3, [r7, #30]
 80050bc:	e04c      	b.n	8005158 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d828      	bhi.n	8005116 <UART_SetConfig+0x462>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x418>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	08005117 	.word	0x08005117
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005117 	.word	0x08005117
 80050e4:	08005117 	.word	0x08005117
 80050e8:	08005117 	.word	0x08005117
 80050ec:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fd fd8c 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80050f4:	61b8      	str	r0, [r7, #24]
        break;
 80050f6:	e013      	b.n	8005120 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7fd fd9c 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 80050fc:	61b8      	str	r0, [r7, #24]
        break;
 80050fe:	e00f      	b.n	8005120 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <UART_SetConfig+0x4c4>)
 8005102:	61bb      	str	r3, [r7, #24]
        break;
 8005104:	e00c      	b.n	8005120 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7fd fc6f 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 800510a:	61b8      	str	r0, [r7, #24]
        break;
 800510c:	e008      	b.n	8005120 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e004      	b.n	8005120 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	77bb      	strb	r3, [r7, #30]
        break;
 800511e:	bf00      	nop
    }

    if (pclk != 0U)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	085a      	lsrs	r2, r3, #1
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b0f      	cmp	r3, #15
 800513e:	d909      	bls.n	8005154 <UART_SetConfig+0x4a0>
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005146:	d205      	bcs.n	8005154 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	b29a      	uxth	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	e001      	b.n	8005158 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005164:	7fbb      	ldrb	r3, [r7, #30]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40007c00 	.word	0x40007c00
 8005174:	40023800 	.word	0x40023800
 8005178:	00f42400 	.word	0x00f42400

0800517c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527a:	d10a      	bne.n	8005292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d0:	f7fb ff88 	bl	80011e4 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d10e      	bne.n	8005302 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f831 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e027      	b.n	8005352 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d10e      	bne.n	800532e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f81b 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e011      	b.n	8005352 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b09c      	sub	sp, #112	; 0x70
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	e0a7      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	f000 80a3 	beq.w	80054bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fb ff35 	bl	80011e4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
 8005386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005388:	2b00      	cmp	r3, #0
 800538a:	d13f      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e6      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053de:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e068      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d050      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005428:	d148      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005432:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
 8005454:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e6      	bne.n	8005434 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3308      	adds	r3, #8
 800546c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	613b      	str	r3, [r7, #16]
   return(result);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	66bb      	str	r3, [r7, #104]	; 0x68
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005486:	623a      	str	r2, [r7, #32]
 8005488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	69f9      	ldr	r1, [r7, #28]
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	61bb      	str	r3, [r7, #24]
   return(result);
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e5      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e010      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f43f af48 	beq.w	800536c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3770      	adds	r7, #112	; 0x70
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b097      	sub	sp, #92	; 0x5c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d10e      	bne.n	800553a <UART_Start_Receive_IT+0x52>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <UART_Start_Receive_IT+0x48>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f240 12ff 	movw	r2, #511	; 0x1ff
 800552a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552e:	e02d      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005538:	e028      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <UART_Start_Receive_IT+0x76>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <UART_Start_Receive_IT+0x6c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	22ff      	movs	r2, #255	; 0xff
 800554e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005552:	e01b      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	227f      	movs	r2, #127	; 0x7f
 8005558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800555c:	e016      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005566:	d10d      	bne.n	8005584 <UART_Start_Receive_IT+0x9c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <UART_Start_Receive_IT+0x92>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	227f      	movs	r2, #127	; 0x7f
 8005574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005578:	e008      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	223f      	movs	r2, #63	; 0x3f
 800557e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005582:	e003      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2222      	movs	r2, #34	; 0x22
 8005598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	657b      	str	r3, [r7, #84]	; 0x54
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80055be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d8:	d107      	bne.n	80055ea <UART_Start_Receive_IT+0x102>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a21      	ldr	r2, [pc, #132]	; (800566c <UART_Start_Receive_IT+0x184>)
 80055e6:	669a      	str	r2, [r3, #104]	; 0x68
 80055e8:	e002      	b.n	80055f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a20      	ldr	r2, [pc, #128]	; (8005670 <UART_Start_Receive_IT+0x188>)
 80055ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d019      	beq.n	800562c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800560c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
 8005618:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_Start_Receive_IT+0x110>
 800562a:	e018      	b.n	800565e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	61bb      	str	r3, [r7, #24]
   return(result);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	375c      	adds	r7, #92	; 0x5c
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	08005923 	.word	0x08005923
 8005670:	080057bd 	.word	0x080057bd

08005674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b095      	sub	sp, #84	; 0x54
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569a:	643b      	str	r3, [r7, #64]	; 0x40
 800569c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d118      	bne.n	800571c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6979      	ldr	r1, [r7, #20]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	613b      	str	r3, [r7, #16]
   return(result);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005730:	bf00      	nop
 8005732:	3754      	adds	r7, #84	; 0x54
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fa8a 	bl	8004c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	60bb      	str	r3, [r7, #8]
   return(result);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	613b      	str	r3, [r7, #16]
   return(result);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fa56 	bl	8004c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b4:	bf00      	nop
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b096      	sub	sp, #88	; 0x58
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d4:	2b22      	cmp	r3, #34	; 0x22
 80057d6:	f040 8098 	bne.w	800590a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057e8:	b2d9      	uxtb	r1, r3
 80057ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	400a      	ands	r2, r1
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d17b      	bne.n	800591a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005836:	653b      	str	r3, [r7, #80]	; 0x50
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005840:	647b      	str	r3, [r7, #68]	; 0x44
 8005842:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e6      	bne.n	8005822 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	623b      	str	r3, [r7, #32]
   return(result);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005874:	633a      	str	r2, [r7, #48]	; 0x30
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d12e      	bne.n	8005902 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	617b      	str	r3, [r7, #20]
   return(result);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d103      	bne.n	80058f2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff f9c4 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005900:	e00b      	b.n	800591a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fb f8b8 	bl	8000a78 <HAL_UART_RxCpltCallback>
}
 8005908:	e007      	b.n	800591a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0208 	orr.w	r2, r2, #8
 8005918:	619a      	str	r2, [r3, #24]
}
 800591a:	bf00      	nop
 800591c:	3758      	adds	r7, #88	; 0x58
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b096      	sub	sp, #88	; 0x58
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005930:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593a:	2b22      	cmp	r3, #34	; 0x22
 800593c:	f040 8098 	bne.w	8005a70 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005950:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005954:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005958:	4013      	ands	r3, r2
 800595a:	b29a      	uxth	r2, r3
 800595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d17b      	bne.n	8005a80 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	643b      	str	r3, [r7, #64]	; 0x40
 80059a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e6      	bne.n	8005988 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e5      	bne.n	80059ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d12e      	bne.n	8005a68 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f023 0310 	bic.w	r3, r3, #16
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e6      	bne.n	8005a10 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d103      	bne.n	8005a58 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2210      	movs	r2, #16
 8005a56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff f911 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a66:	e00b      	b.n	8005a80 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fb f805 	bl	8000a78 <HAL_UART_RxCpltCallback>
}
 8005a6e:	e007      	b.n	8005a80 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0208 	orr.w	r2, r2, #8
 8005a7e:	619a      	str	r2, [r3, #24]
}
 8005a80:	bf00      	nop
 8005a82:	3758      	adds	r7, #88	; 0x58
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a88:	b084      	sub	sp, #16
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	f107 001c 	add.w	r0, r7, #28
 8005a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d120      	bne.n	8005ae2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <USB_CoreInit+0xac>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d105      	bne.n	8005ad6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa96 	bl	8006008 <USB_CoreReset>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
 8005ae0:	e010      	b.n	8005b04 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa8a 	bl	8006008 <USB_CoreReset>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10b      	bne.n	8005b22 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f043 0206 	orr.w	r2, r3, #6
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2e:	b004      	add	sp, #16
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	ffbdffbf 	.word	0xffbdffbf

08005b38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 0201 	bic.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d115      	bne.n	8005ba8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f7fb fb37 	bl	80011fc <HAL_Delay>
      ms++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fa29 	bl	8005fec <USB_GetMode>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d01e      	beq.n	8005bde <USB_SetCurrentMode+0x84>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b31      	cmp	r3, #49	; 0x31
 8005ba4:	d9f0      	bls.n	8005b88 <USB_SetCurrentMode+0x2e>
 8005ba6:	e01a      	b.n	8005bde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d115      	bne.n	8005bda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bba:	2001      	movs	r0, #1
 8005bbc:	f7fb fb1e 	bl	80011fc <HAL_Delay>
      ms++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa10 	bl	8005fec <USB_GetMode>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <USB_SetCurrentMode+0x84>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b31      	cmp	r3, #49	; 0x31
 8005bd6:	d9f0      	bls.n	8005bba <USB_SetCurrentMode+0x60>
 8005bd8:	e001      	b.n	8005bde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e005      	b.n	8005bea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b32      	cmp	r3, #50	; 0x32
 8005be2:	d101      	bne.n	8005be8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e009      	b.n	8005c28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3340      	adds	r3, #64	; 0x40
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b0e      	cmp	r3, #14
 8005c2c:	d9f2      	bls.n	8005c14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11c      	bne.n	8005c6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c42:	f043 0302 	orr.w	r3, r3, #2
 8005c46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e005      	b.n	8005c7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c80:	461a      	mov	r2, r3
 8005c82:	2300      	movs	r3, #0
 8005c84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	461a      	mov	r2, r3
 8005c96:	680b      	ldr	r3, [r1, #0]
 8005c98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10c      	bne.n	8005cba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f965 	bl	8005f78 <USB_SetDevSpeed>
 8005cae:	e008      	b.n	8005cc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f960 	bl	8005f78 <USB_SetDevSpeed>
 8005cb8:	e003      	b.n	8005cc2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cba:	2103      	movs	r1, #3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f95b 	bl	8005f78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f8f3 	bl	8005eb0 <USB_FlushTxFifo>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f91f 	bl	8005f18 <USB_FlushRxFifo>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	461a      	mov	r2, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	e043      	b.n	8005d96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d24:	d118      	bne.n	8005d58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e013      	b.n	8005d6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e008      	b.n	8005d6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	461a      	mov	r2, r3
 8005d66:	2300      	movs	r3, #0
 8005d68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3301      	adds	r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d3b7      	bcc.n	8005d0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e043      	b.n	8005e2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dba:	d118      	bne.n	8005dee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e013      	b.n	8005e00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e008      	b.n	8005e00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d3b7      	bcc.n	8005da4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f043 0210 	orr.w	r2, r3, #16
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <USB_DevInit+0x2b4>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d105      	bne.n	8005e98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <USB_DevInit+0x2b8>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ea4:	b004      	add	sp, #16
 8005ea6:	4770      	bx	lr
 8005ea8:	803c3800 	.word	0x803c3800
 8005eac:	40000004 	.word	0x40000004

08005eb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <USB_FlushTxFifo+0x64>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d901      	bls.n	8005ed0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e01b      	b.n	8005f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	daf2      	bge.n	8005ebe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	019b      	lsls	r3, r3, #6
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <USB_FlushTxFifo+0x64>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e006      	b.n	8005f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d0f0      	beq.n	8005ee8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	00030d40 	.word	0x00030d40

08005f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <USB_FlushRxFifo+0x5c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e018      	b.n	8005f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	daf2      	bge.n	8005f24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2210      	movs	r2, #16
 8005f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <USB_FlushRxFifo+0x5c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e006      	b.n	8005f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d0f0      	beq.n	8005f48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	00030d40 	.word	0x00030d40

08005f78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fc4:	f023 0303 	bic.w	r3, r3, #3
 8005fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd8:	f043 0302 	orr.w	r3, r3, #2
 8005fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a13      	ldr	r2, [pc, #76]	; (800606c <USB_CoreReset+0x64>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e01b      	b.n	800605e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	daf2      	bge.n	8006014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <USB_CoreReset+0x64>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d901      	bls.n	8006050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e006      	b.n	800605e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d0f0      	beq.n	800603e <USB_CoreReset+0x36>

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	00030d40 	.word	0x00030d40

08006070 <memset>:
 8006070:	4402      	add	r2, r0
 8006072:	4603      	mov	r3, r0
 8006074:	4293      	cmp	r3, r2
 8006076:	d100      	bne.n	800607a <memset+0xa>
 8006078:	4770      	bx	lr
 800607a:	f803 1b01 	strb.w	r1, [r3], #1
 800607e:	e7f9      	b.n	8006074 <memset+0x4>

08006080 <__libc_init_array>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	4d0d      	ldr	r5, [pc, #52]	; (80060b8 <__libc_init_array+0x38>)
 8006084:	4c0d      	ldr	r4, [pc, #52]	; (80060bc <__libc_init_array+0x3c>)
 8006086:	1b64      	subs	r4, r4, r5
 8006088:	10a4      	asrs	r4, r4, #2
 800608a:	2600      	movs	r6, #0
 800608c:	42a6      	cmp	r6, r4
 800608e:	d109      	bne.n	80060a4 <__libc_init_array+0x24>
 8006090:	4d0b      	ldr	r5, [pc, #44]	; (80060c0 <__libc_init_array+0x40>)
 8006092:	4c0c      	ldr	r4, [pc, #48]	; (80060c4 <__libc_init_array+0x44>)
 8006094:	f000 f818 	bl	80060c8 <_init>
 8006098:	1b64      	subs	r4, r4, r5
 800609a:	10a4      	asrs	r4, r4, #2
 800609c:	2600      	movs	r6, #0
 800609e:	42a6      	cmp	r6, r4
 80060a0:	d105      	bne.n	80060ae <__libc_init_array+0x2e>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a8:	4798      	blx	r3
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7ee      	b.n	800608c <__libc_init_array+0xc>
 80060ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b2:	4798      	blx	r3
 80060b4:	3601      	adds	r6, #1
 80060b6:	e7f2      	b.n	800609e <__libc_init_array+0x1e>
 80060b8:	08006100 	.word	0x08006100
 80060bc:	08006100 	.word	0x08006100
 80060c0:	08006100 	.word	0x08006100
 80060c4:	08006104 	.word	0x08006104

080060c8 <_init>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr

080060d4 <_fini>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr
