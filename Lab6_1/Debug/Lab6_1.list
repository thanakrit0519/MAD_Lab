
Lab6_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005658  08005658  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  080056bc  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  0800575c  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000088c  2000019c  080057fc  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a28  080057fc  00020a28  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   00016b38  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002b21  00000000  00000000  00036d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012c8  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ead  00000000  00000000  0003ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029940  00000000  00000000  0003b9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00016392  00000000  00000000  0006531d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103fa3  00000000  00000000  0007b6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000556c  00000000  00000000  0017f654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  00184bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	080055e4 	.word	0x080055e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	080055e4 	.word	0x080055e4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fd7e 	bl	80010f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f829 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9e7 	bl	80009cc <MX_GPIO_Init>
  MX_ETH_Init();
 80005fe:	f000 f897 	bl	8000730 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f985 	bl	8000910 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 f9b3 	bl	8000970 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800060a:	f000 f8df 	bl	80007cc <MX_TIM1_Init>
  MX_TIM2_Init();
 800060e:	f000 f931 	bl	8000874 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint32_t n = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  	uint32_t sec = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  	uint32_t min = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
  	HAL_TIM_Base_Start_IT(&htim1);
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <main+0x54>)
 8000620:	f002 fee2 	bl	80033e8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <main+0x58>)
 8000626:	f002 fedf 	bl	80033e8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  displayNumber(count);
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <main+0x5c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fa6e 	bl	8000b10 <displayNumber>
	  HAL_Delay(400);
 8000634:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000638:	f000 fdb8 	bl	80011ac <HAL_Delay>
  {
 800063c:	e7f5      	b.n	800062a <main+0x3e>
 800063e:	bf00      	nop
 8000640:	200002a0 	.word	0x200002a0
 8000644:	200002ec 	.word	0x200002ec
 8000648:	200008c8 	.word	0x200008c8

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fb3e 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000670:	f001 fd06 	bl	8002080 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <SystemClock_Config+0xdc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <SystemClock_Config+0xdc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <SystemClock_Config+0xe0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <SystemClock_Config+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fd33 	bl	8002140 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 fa50 	bl	8000b84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e4:	f001 fcdc 	bl	80020a0 <HAL_PWREx_EnableOverDrive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ee:	f000 fa49 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f001 ffc4 	bl	800269c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071a:	f000 fa33 	bl	8000b84 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ETH_Init+0x84>)
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <MX_ETH_Init+0x88>)
 8000738:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ETH_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ETH_Init+0x8c>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ETH_Init+0x8c>)
 8000748:	22e1      	movs	r2, #225	; 0xe1
 800074a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ETH_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ETH_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_ETH_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ETH_Init+0x84>)
 8000760:	4a16      	ldr	r2, [pc, #88]	; (80007bc <MX_ETH_Init+0x8c>)
 8000762:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_ETH_Init+0x84>)
 8000766:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800076a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ETH_Init+0x84>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MX_ETH_Init+0x90>)
 8000770:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_ETH_Init+0x84>)
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_ETH_Init+0x94>)
 8000776:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_ETH_Init+0x84>)
 800077a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800077e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_ETH_Init+0x84>)
 8000782:	f000 fe49 	bl	8001418 <HAL_ETH_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 f9fa 	bl	8000b84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000790:	2238      	movs	r2, #56	; 0x38
 8000792:	2100      	movs	r1, #0
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x98>)
 8000796:	f004 faa1 	bl	8004cdc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_ETH_Init+0x98>)
 800079c:	2221      	movs	r2, #33	; 0x21
 800079e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_ETH_Init+0x98>)
 80007a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_ETH_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200001f0 	.word	0x200001f0
 80007b8:	40028000 	.word	0x40028000
 80007bc:	200008d0 	.word	0x200008d0
 80007c0:	200000fc 	.word	0x200000fc
 80007c4:	2000005c 	.word	0x2000005c
 80007c8:	200001b8 	.word	0x200001b8

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_TIM1_Init+0xa0>)
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <MX_TIM1_Init+0xa4>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1920;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM1_Init+0xa0>)
 80007f2:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80007f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_TIM1_Init+0xa0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM1_Init+0xa0>)
 8000800:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000804:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM1_Init+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_TIM1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_TIM1_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_TIM1_Init+0xa0>)
 800081a:	f002 fd8d 	bl	8003338 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 f9ae 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_TIM1_Init+0xa0>)
 8000836:	f002 ff6f 	bl	8003718 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000840:	f000 f9a0 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_TIM1_Init+0xa0>)
 8000856:	f003 f995 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000860:	f000 f990 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200002a0 	.word	0x200002a0
 8000870:	40010000 	.word	0x40010000

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM2_Init+0x94>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM2_Init+0x94>)
 800089c:	2260      	movs	r2, #96	; 0x60
 800089e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM2_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400000;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM2_Init+0x94>)
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_TIM2_Init+0x98>)
 80008aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM2_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM2_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM2_Init+0x94>)
 80008ba:	f002 fd3d 	bl	8003338 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f95e 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM2_Init+0x94>)
 80008d6:	f002 ff1f 	bl	8003718 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f950 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM2_Init+0x94>)
 80008f2:	f003 f947 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f942 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002ec 	.word	0x200002ec
 800090c:	00061a80 	.word	0x00061a80

08000910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART3_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000954:	f003 f9c2 	bl	8003cdc <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f911 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000338 	.word	0x20000338
 800096c:	40004800 	.word	0x40004800

08000970 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800097a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2206      	movs	r2, #6
 8000980:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2202      	movs	r2, #2
 8000986:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2202      	movs	r2, #2
 8000992:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2201      	movs	r2, #1
 8000998:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	f001 fa1b 	bl	8001dee <HAL_PCD_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f8e1 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200003c0 	.word	0x200003c0

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <MX_GPIO_Init+0x134>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a40      	ldr	r2, [pc, #256]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a3a      	ldr	r2, [pc, #232]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a34      	ldr	r2, [pc, #208]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0x134>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a78:	4822      	ldr	r0, [pc, #136]	; (8000b04 <MX_GPIO_Init+0x138>)
 8000a7a:	f001 f99f 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2140      	movs	r1, #64	; 0x40
 8000a82:	4821      	ldr	r0, [pc, #132]	; (8000b08 <MX_GPIO_Init+0x13c>)
 8000a84:	f001 f99a 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481b      	ldr	r0, [pc, #108]	; (8000b0c <MX_GPIO_Init+0x140>)
 8000aa0:	f000 ffe0 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aa4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_GPIO_Init+0x138>)
 8000abe:	f000 ffd1 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0x13c>)
 8000ada:	f000 ffc3 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_GPIO_Init+0x13c>)
 8000af2:	f000 ffb7 	bl	8001a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	; 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40020800 	.word	0x40020800

08000b10 <displayNumber>:

/* USER CODE BEGIN 4 */
void displayNumber(uint32_t num) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09c      	sub	sp, #112	; 0x70
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
char a[100];
sprintf(a, "%d", num);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4916      	ldr	r1, [pc, #88]	; (8000b78 <displayNumber+0x68>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 f8bb 	bl	8004c9c <siprintf>

while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000b26:	bf00      	nop
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <displayNumber+0x6c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	2b40      	cmp	r3, #64	; 0x40
 8000b34:	d1f8      	bne.n	8000b28 <displayNumber+0x18>
}
HAL_UART_Transmit(&huart3, (uint8_t*) a, strlen(a), 400);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb80 	bl	8000240 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f107 010c 	add.w	r1, r7, #12
 8000b48:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <displayNumber+0x6c>)
 8000b4e:	f003 f913 	bl	8003d78 <HAL_UART_Transmit>
while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000b52:	bf00      	nop
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <displayNumber+0x6c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	2b40      	cmp	r3, #64	; 0x40
 8000b60:	d1f8      	bne.n	8000b54 <displayNumber+0x44>
}
HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1, 400);
 8000b62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b66:	2201      	movs	r2, #1
 8000b68:	4905      	ldr	r1, [pc, #20]	; (8000b80 <displayNumber+0x70>)
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <displayNumber+0x6c>)
 8000b6c:	f003 f904 	bl	8003d78 <HAL_UART_Transmit>
}
 8000b70:	bf00      	nop
 8000b72:	3770      	adds	r7, #112	; 0x70
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	080055fc 	.word	0x080055fc
 8000b7c:	20000338 	.word	0x20000338
 8000b80:	08005600 	.word	0x08005600

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f000 fbe4 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a4e      	ldr	r2, [pc, #312]	; (8000d30 <HAL_ETH_MspInit+0x158>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	f040 8096 	bne.w	8000d28 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a4c      	ldr	r2, [pc, #304]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a46      	ldr	r2, [pc, #280]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	4b41      	ldr	r3, [pc, #260]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
 8000c38:	4b3e      	ldr	r3, [pc, #248]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a3a      	ldr	r2, [pc, #232]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <HAL_ETH_MspInit+0x15c>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca4:	2332      	movs	r3, #50	; 0x32
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <HAL_ETH_MspInit+0x160>)
 8000cc0:	f000 fed0 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc4:	2386      	movs	r3, #134	; 0x86
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <HAL_ETH_MspInit+0x164>)
 8000ce0:	f000 fec0 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <HAL_ETH_MspInit+0x168>)
 8000d02:	f000 feaf 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d18:	230b      	movs	r3, #11
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <HAL_ETH_MspInit+0x16c>)
 8000d24:	f000 fe9e 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3738      	adds	r7, #56	; 0x38
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40028000 	.word	0x40028000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40021800 	.word	0x40021800

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_TIM_Base_MspInit+0x78>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d114      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	2019      	movs	r0, #25
 8000d78:	f000 fb17 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d7c:	2019      	movs	r0, #25
 8000d7e:	f000 fb30 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d82:	e018      	b.n	8000db6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8c:	d113      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	201c      	movs	r0, #28
 8000dac:	f000 fafd 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db0:	201c      	movs	r0, #28
 8000db2:	f000 fb16 	bl	80013e2 <HAL_NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ae      	sub	sp, #184	; 0xb8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2290      	movs	r2, #144	; 0x90
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 ff77 	bl	8004cdc <memset>
  if(huart->Instance==USART3)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <HAL_UART_MspInit+0xb4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d13c      	bne.n	8000e72 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fe6e 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e12:	f7ff feb7 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0xb8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0xb8>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0xb8>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0xb8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <HAL_UART_MspInit+0xb8>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0xb8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e60:	2307      	movs	r3, #7
 8000e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_UART_MspInit+0xbc>)
 8000e6e:	f000 fdf9 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	37b8      	adds	r7, #184	; 0xb8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020c00 	.word	0x40020c00

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ae      	sub	sp, #184	; 0xb8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2290      	movs	r2, #144	; 0x90
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 ff17 	bl	8004cdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb6:	d159      	bne.n	8000f6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ebc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fe0d 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ed4:	f7ff fe56 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ef0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000f18:	f000 fda4 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4810      	ldr	r0, [pc, #64]	; (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000f38:	f000 fd94 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f46:	6353      	str	r3, [r2, #52]	; 0x34
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_PCD_MspInit+0xec>)
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	37b8      	adds	r7, #184	; 0xb8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8d0 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000fd6:	f002 fa7f 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a02      	ldr	r2, [pc, #8]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000fe2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200002a0 	.word	0x200002a0
 8000fec:	200008c8 	.word	0x200008c8

08000ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <TIM2_IRQHandler+0x18>)
 8000ff6:	f002 fa6f 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  count2++;
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <TIM2_IRQHandler+0x1c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a02      	ldr	r2, [pc, #8]	; (800100c <TIM2_IRQHandler+0x1c>)
 8001002:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002ec 	.word	0x200002ec
 800100c:	200008cc 	.word	0x200008cc

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f003 fe54 	bl	8004cec <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20080000 	.word	0x20080000
 8001070:	00000400 	.word	0x00000400
 8001074:	200008d8 	.word	0x200008d8
 8001078:	20000a28 	.word	0x20000a28

0800107c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f003 fe13 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fa8b 	bl	80005ec <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010e4:	08005660 	.word	0x08005660
  ldr r2, =_sbss
 80010e8:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80010ec:	20000a28 	.word	0x20000a28

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>

080010f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 f94c 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f805 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fd45 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f967 	bl	80013fe <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92f 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	200008dc 	.word	0x200008dc

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200008dc 	.word	0x200008dc

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__NVIC_SetPriorityGrouping+0x40>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	4313      	orrs	r3, r2
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x40>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	05fa0000 	.word	0x05fa0000

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06a      	b.n	8001500 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2223      	movs	r2, #35	; 0x23
 8001438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fbcb 	bl	8000bd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_ETH_Init+0xf0>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a30      	ldr	r2, [pc, #192]	; (8001508 <HAL_ETH_Init+0xf0>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_ETH_Init+0xf0>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <HAL_ETH_Init+0xf4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_ETH_Init+0xf4>)
 8001460:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001464:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_ETH_Init+0xf4>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <HAL_ETH_Init+0xf4>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_ETH_Init+0xf4>)
 8001476:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff fe80 	bl	8001194 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001496:	e011      	b.n	80014bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001498:	f7ff fe7c 	bl	8001194 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a6:	d909      	bls.n	80014bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	22e0      	movs	r2, #224	; 0xe0
 80014b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e021      	b.n	8001500 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e4      	bne.n	8001498 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f958 	bl	8001784 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f9ff 	bl	80018d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fa55 	bl	800198a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f9bd 	bl	8001868 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2210      	movs	r2, #16
 80014fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800

08001510 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <ETH_SetMACConfig+0x15c>)
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7c1b      	ldrb	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <ETH_SetMACConfig+0x28>
 8001532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001536:	e000      	b.n	800153a <ETH_SetMACConfig+0x2a>
 8001538:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7c5b      	ldrb	r3, [r3, #17]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <ETH_SetMACConfig+0x38>
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	e000      	b.n	800154a <ETH_SetMACConfig+0x3a>
 8001548:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800154a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7fdb      	ldrb	r3, [r3, #31]
 8001556:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001558:	431a      	orrs	r2, r3
                        macconf->Speed |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800155e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	7f92      	ldrb	r2, [r2, #30]
 8001564:	2a00      	cmp	r2, #0
 8001566:	d102      	bne.n	800156e <ETH_SetMACConfig+0x5e>
 8001568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156c:	e000      	b.n	8001570 <ETH_SetMACConfig+0x60>
 800156e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7f1b      	ldrb	r3, [r3, #28]
 8001576:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001578:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800157e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	791b      	ldrb	r3, [r3, #4]
 8001584:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001586:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800158e:	2a00      	cmp	r2, #0
 8001590:	d102      	bne.n	8001598 <ETH_SetMACConfig+0x88>
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	e000      	b.n	800159a <ETH_SetMACConfig+0x8a>
 8001598:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800159a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	7bdb      	ldrb	r3, [r3, #15]
 80015a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015b2:	4313      	orrs	r3, r2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fdee 	bl	80011ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d101      	bne.n	80015fe <ETH_SetMACConfig+0xee>
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	e000      	b.n	8001600 <ETH_SetMACConfig+0xf0>
 80015fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001600:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001606:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800160e:	2a01      	cmp	r2, #1
 8001610:	d101      	bne.n	8001616 <ETH_SetMACConfig+0x106>
 8001612:	2208      	movs	r2, #8
 8001614:	e000      	b.n	8001618 <ETH_SetMACConfig+0x108>
 8001616:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001618:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001620:	2a01      	cmp	r2, #1
 8001622:	d101      	bne.n	8001628 <ETH_SetMACConfig+0x118>
 8001624:	2204      	movs	r2, #4
 8001626:	e000      	b.n	800162a <ETH_SetMACConfig+0x11a>
 8001628:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800162a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001632:	2a01      	cmp	r2, #1
 8001634:	d101      	bne.n	800163a <ETH_SetMACConfig+0x12a>
 8001636:	2202      	movs	r2, #2
 8001638:	e000      	b.n	800163c <ETH_SetMACConfig+0x12c>
 800163a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800163c:	4313      	orrs	r3, r2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fda9 	bl	80011ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	ff20810f 	.word	0xff20810f

08001670 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <ETH_SetDMAConfig+0x110>)
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <ETH_SetDMAConfig+0x2c>
 8001696:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800169a:	e000      	b.n	800169e <ETH_SetDMAConfig+0x2e>
 800169c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7b5b      	ldrb	r3, [r3, #13]
 80016a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	7f52      	ldrb	r2, [r2, #29]
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d102      	bne.n	80016b4 <ETH_SetDMAConfig+0x44>
 80016ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016b2:	e000      	b.n	80016b6 <ETH_SetDMAConfig+0x46>
 80016b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	7b9b      	ldrb	r3, [r3, #14]
 80016bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	7f1b      	ldrb	r3, [r3, #28]
 80016ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7f9b      	ldrb	r3, [r3, #30]
 80016d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016e4:	4313      	orrs	r3, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fd50 	bl	80011ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001724:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800172a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001730:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001738:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800173a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001742:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001748:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001756:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fd21 	bl	80011ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	f8de3f23 	.word	0xf8de3f23

08001784 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0a6      	sub	sp, #152	; 0x98
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017c0:	2300      	movs	r3, #0
 80017c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe86 	bl	8001510 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001804:	2301      	movs	r3, #1
 8001806:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001838:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800183a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff08 	bl	8001670 <ETH_SetDMAConfig>
}
 8001860:	bf00      	nop
 8001862:	3798      	adds	r7, #152	; 0x98
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3305      	adds	r3, #5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	3204      	adds	r2, #4
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <ETH_MACAddressConfig+0x68>)
 800188a:	4413      	add	r3, r2
 800188c:	461a      	mov	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3303      	adds	r3, #3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3302      	adds	r3, #2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <ETH_MACAddressConfig+0x6c>)
 80018ba:	4413      	add	r3, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40028040 	.word	0x40028040
 80018d4:	40028044 	.word	0x40028044

080018d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e03e      	b.n	8001964 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68d9      	ldr	r1, [r3, #12]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	3206      	adds	r2, #6
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d80c      	bhi.n	8001948 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68d9      	ldr	r1, [r3, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	e004      	b.n	8001952 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d9bd      	bls.n	80018e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197c:	611a      	str	r2, [r3, #16]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e046      	b.n	8001a26 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	3212      	adds	r2, #18
 80019f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d80c      	bhi.n	8001a16 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	e004      	b.n	8001a20 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d9b5      	bls.n	8001998 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	60da      	str	r2, [r3, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e175      	b.n	8001d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8164 	bne.w	8001d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x56>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80be 	beq.w	8001d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c06:	4a61      	ldr	r2, [pc, #388]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d037      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d031      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x338>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_GPIO_Init+0x340>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x344>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x348>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	e012      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	e010      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae86 	bls.w	8001a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40022400 	.word	0x40022400
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df0:	b08f      	sub	sp, #60	; 0x3c
 8001df2:	af0a      	add	r7, sp, #40	; 0x28
 8001df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e116      	b.n	800202e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff f834 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 fc90 	bl	8004764 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 0410 	add.w	r4, r6, #16
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e62:	1d33      	adds	r3, r6, #4
 8001e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f002 fc24 	bl	80046b4 <USB_CoreInit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0d7      	b.n	800202e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fc7e 	bl	8004786 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e04a      	b.n	8001f26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333d      	adds	r3, #61	; 0x3d
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333c      	adds	r3, #60	; 0x3c
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3344      	adds	r3, #68	; 0x44
 8001ecc:	4602      	mov	r2, r0
 8001ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3340      	adds	r3, #64	; 0x40
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3348      	adds	r3, #72	; 0x48
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	334c      	adds	r3, #76	; 0x4c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3354      	adds	r3, #84	; 0x54
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3af      	bcc.n	8001e90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e044      	b.n	8001fc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3b5      	bcc.n	8001f36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	687e      	ldr	r6, [r7, #4]
 8001fd2:	466d      	mov	r5, sp
 8001fd4:	f106 0410 	add.w	r4, r6, #16
 8001fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe8:	1d33      	adds	r3, r6, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f002 fc17 	bl	8004820 <USB_DevInit>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e014      	b.n	800202e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f80b 	bl	8002038 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fdd5 	bl	8004bd6 <USB_DevDisconnect>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002038 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_PCDEx_ActivateLPM+0x44>)
 8002068:	4313      	orrs	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	10000003 	.word	0x10000003

08002080 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000

080020a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_PWREx_EnableOverDrive+0x98>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ce:	f7ff f861 	bl	8001194 <HAL_GetTick>
 80020d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020d4:	e009      	b.n	80020ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020d6:	f7ff f85d 	bl	8001194 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e4:	d901      	bls.n	80020ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e022      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d1ee      	bne.n	80020d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002104:	f7ff f846 	bl	8001194 <HAL_GetTick>
 8002108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800210a:	e009      	b.n	8002120 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210c:	f7ff f842 	bl	8001194 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211a:	d901      	bls.n	8002120 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e007      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800212c:	d1ee      	bne.n	800210c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e29b      	b.n	800268e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8087 	beq.w	8002272 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00c      	beq.n	800218a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002170:	4b93      	ldr	r3, [pc, #588]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d112      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62>
 800217c:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002188:	d10b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218a:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d06c      	beq.n	8002270 <HAL_RCC_OscConfig+0x130>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d168      	bne.n	8002270 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e275      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x7a>
 80021ac:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a83      	ldr	r2, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e02e      	b.n	8002218 <HAL_RCC_OscConfig+0xd8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x9c>
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xd8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0xc0>
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xd8>
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe ffb8 	bl	8001194 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe ffb4 	bl	8001194 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e229      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe ffa4 	bl	8001194 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe ffa0 	bl	8001194 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e215      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x110>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d069      	beq.n	8002352 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228a:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x190>
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x17a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1e9      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	493d      	ldr	r1, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e040      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe ff56 	bl	8001194 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe ff52 	bl	8001194 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1c7      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4929      	ldr	r1, [pc, #164]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
 800231e:	e018      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe ff32 	bl	8001194 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7fe ff2e 	bl	8001194 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1a3      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d038      	beq.n	80023d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe ff0f 	bl	8001194 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237a:	f7fe ff0b 	bl	8001194 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e180      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800238e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x23a>
 8002398:	e01a      	b.n	80023d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fef5 	bl	8001194 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe fef1 	bl	8001194 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d903      	bls.n	80023c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e166      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
 80023c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b92      	ldr	r3, [pc, #584]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ee      	bne.n	80023ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a4 	beq.w	8002526 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b8c      	ldr	r3, [pc, #560]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a88      	ldr	r2, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b86      	ldr	r3, [pc, #536]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002406:	4b83      	ldr	r3, [pc, #524]	; (8002614 <HAL_RCC_OscConfig+0x4d4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002412:	4b80      	ldr	r3, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x4d4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7f      	ldr	r2, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x4d4>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe feb9 	bl	8001194 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe feb5 	bl	8001194 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e12a      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002438:	4b76      	ldr	r3, [pc, #472]	; (8002614 <HAL_RCC_OscConfig+0x4d4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x31a>
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a6f      	ldr	r2, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x33c>
 8002462:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a67      	ldr	r2, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x35e>
 8002484:	4b62      	ldr	r3, [pc, #392]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a61      	ldr	r2, [pc, #388]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a5e      	ldr	r2, [pc, #376]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fe69 	bl	8001194 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fe65 	bl	8001194 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0d8      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x386>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fe53 	bl	8001194 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe fe4f 	bl	8001194 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0c2      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80ae 	beq.w	800268c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d06d      	beq.n	8002618 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d14b      	bne.n	80025dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a31      	ldr	r2, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 800254a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fe20 	bl	8001194 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fe1c 	bl	8001194 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e091      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	3b01      	subs	r3, #1
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	071b      	lsls	r3, r3, #28
 80025a2:	491b      	ldr	r1, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fdee 	bl	8001194 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fdea 	bl	8001194 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e05f      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x47c>
 80025da:	e057      	b.n	800268c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fdd4 	bl	8001194 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fdd0 	bl	8001194 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e045      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4b0>
 800260e:	e03d      	b.n	800268c <HAL_RCC_OscConfig+0x54c>
 8002610:	40023800 	.word	0x40023800
 8002614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_RCC_OscConfig+0x558>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d030      	beq.n	8002688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d129      	bne.n	8002688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d122      	bne.n	8002688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002650:	4293      	cmp	r3, r2
 8002652:	d119      	bne.n	8002688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d10f      	bne.n	8002688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0d0      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 020f 	bic.w	r2, r3, #15
 80026ca:	4965      	ldr	r1, [pc, #404]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800271e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d040      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e073      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4936      	ldr	r1, [pc, #216]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe fd00 	bl	8001194 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe fcfc 	bl	8001194 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e053      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020f 	bic.w	r2, r3, #15
 80027d6:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x1cc>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1d0>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fc5c 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00
 8002864:	40023800 	.word	0x40023800
 8002868:	08005604 	.word	0x08005604
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b094      	sub	sp, #80	; 0x50
 800287a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	647b      	str	r3, [r7, #68]	; 0x44
 8002880:	2300      	movs	r3, #0
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002884:	2300      	movs	r3, #0
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288c:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d00d      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002898:	2b08      	cmp	r3, #8
 800289a:	f200 80e1 	bhi.w	8002a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x34>
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x3a>
 80028a6:	e0db      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ac:	e0db      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ae:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80028b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b2:	e0d8      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b4:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028be:	4b6d      	ldr	r3, [pc, #436]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	2200      	movs	r2, #0
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 80028de:	2300      	movs	r3, #0
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028e6:	4622      	mov	r2, r4
 80028e8:	462b      	mov	r3, r5
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	0159      	lsls	r1, r3, #5
 80028f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f8:	0150      	lsls	r0, r2, #5
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4621      	mov	r1, r4
 8002900:	1a51      	subs	r1, r2, r1
 8002902:	6139      	str	r1, [r7, #16]
 8002904:	4629      	mov	r1, r5
 8002906:	eb63 0301 	sbc.w	r3, r3, r1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002918:	4659      	mov	r1, fp
 800291a:	018b      	lsls	r3, r1, #6
 800291c:	4651      	mov	r1, sl
 800291e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002922:	4651      	mov	r1, sl
 8002924:	018a      	lsls	r2, r1, #6
 8002926:	4651      	mov	r1, sl
 8002928:	ebb2 0801 	subs.w	r8, r2, r1
 800292c:	4659      	mov	r1, fp
 800292e:	eb63 0901 	sbc.w	r9, r3, r1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	4623      	mov	r3, r4
 800294c:	eb18 0303 	adds.w	r3, r8, r3
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	462b      	mov	r3, r5
 8002954:	eb49 0303 	adc.w	r3, r9, r3
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002966:	4629      	mov	r1, r5
 8002968:	024b      	lsls	r3, r1, #9
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002970:	4621      	mov	r1, r4
 8002972:	024a      	lsls	r2, r1, #9
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297a:	2200      	movs	r2, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
 800297e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002984:	f7fd fcb4 	bl	80002f0 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002990:	e058      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	2200      	movs	r2, #0
 800299a:	4618      	mov	r0, r3
 800299c:	4611      	mov	r1, r2
 800299e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	0159      	lsls	r1, r3, #5
 80029ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029be:	0150      	lsls	r0, r2, #5
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4641      	mov	r1, r8
 80029c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ca:	4649      	mov	r1, r9
 80029cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029e4:	ebb2 040a 	subs.w	r4, r2, sl
 80029e8:	eb63 050b 	sbc.w	r5, r3, fp
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	00eb      	lsls	r3, r5, #3
 80029f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fa:	00e2      	lsls	r2, r4, #3
 80029fc:	4614      	mov	r4, r2
 80029fe:	461d      	mov	r5, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	18e3      	adds	r3, r4, r3
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	464b      	mov	r3, r9
 8002a08:	eb45 0303 	adc.w	r3, r5, r3
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	028b      	lsls	r3, r1, #10
 8002a1e:	4621      	mov	r1, r4
 8002a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a24:	4621      	mov	r1, r4
 8002a26:	028a      	lsls	r2, r1, #10
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	61fa      	str	r2, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	f7fd fc5a 	bl	80002f0 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3750      	adds	r7, #80	; 0x50
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	00f42400 	.word	0x00f42400
 8002a7c:	007a1200 	.word	0x007a1200

08002a80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a9b      	lsrs	r3, r3, #10
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08005614 	.word	0x08005614

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffdc 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0b5b      	lsrs	r3, r3, #13
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08005614 	.word	0x08005614

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d012      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b10:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a68      	ldr	r2, [pc, #416]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b1a:	6093      	str	r3, [r2, #8]
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	4964      	ldr	r1, [pc, #400]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	4959      	ldr	r1, [pc, #356]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b60:	d101      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d017      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	494a      	ldr	r1, [pc, #296]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 808b 	beq.w	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a34      	ldr	r2, [pc, #208]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fad0 	bl	8001194 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fe facc 	bl	8001194 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e38f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d035      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d02e      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d114      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fa94 	bl	8001194 <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe fa90 	bl	8001194 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e351      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ee      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	4901      	ldr	r1, [pc, #4]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	0ffffcff 	.word	0x0ffffcff
 8002cc4:	4bac      	ldr	r3, [pc, #688]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4aab      	ldr	r2, [pc, #684]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cce:	6093      	str	r3, [r2, #8]
 8002cd0:	4ba9      	ldr	r3, [pc, #676]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	49a6      	ldr	r1, [pc, #664]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cee:	4ba2      	ldr	r3, [pc, #648]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf4:	4aa0      	ldr	r2, [pc, #640]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cfe:	4b9e      	ldr	r3, [pc, #632]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	499b      	ldr	r1, [pc, #620]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1c:	4b96      	ldr	r3, [pc, #600]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2a:	4993      	ldr	r1, [pc, #588]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3e:	4b8e      	ldr	r3, [pc, #568]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4c:	498a      	ldr	r1, [pc, #552]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d60:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	4982      	ldr	r1, [pc, #520]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d82:	4b7d      	ldr	r3, [pc, #500]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4979      	ldr	r1, [pc, #484]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4971      	ldr	r1, [pc, #452]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc6:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f023 020c 	bic.w	r2, r3, #12
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	4968      	ldr	r1, [pc, #416]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de8:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	4960      	ldr	r1, [pc, #384]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	4957      	ldr	r1, [pc, #348]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2c:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	494f      	ldr	r1, [pc, #316]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4946      	ldr	r1, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e70:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	493e      	ldr	r1, [pc, #248]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	492d      	ldr	r1, [pc, #180]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d011      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee4:	4924      	ldr	r1, [pc, #144]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ef4:	d101      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	4914      	ldr	r1, [pc, #80]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f48:	490b      	ldr	r1, [pc, #44]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	4902      	ldr	r1, [pc, #8]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f74:	e002      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f88:	4b8a      	ldr	r3, [pc, #552]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	4986      	ldr	r1, [pc, #536]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fac:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbc:	497d      	ldr	r1, [pc, #500]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d006      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d6 	beq.w	8003184 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fd8:	4b76      	ldr	r3, [pc, #472]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a75      	ldr	r2, [pc, #468]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f8d6 	bl	8001194 <HAL_GetTick>
 8002fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fec:	f7fe f8d2 	bl	8001194 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e195      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d021      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11d      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	0e1b      	lsrs	r3, r3, #24
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	019a      	lsls	r2, r3, #6
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	4958      	ldr	r1, [pc, #352]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02e      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003084:	d129      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003086:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003094:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	0f1b      	lsrs	r3, r3, #28
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	019a      	lsls	r2, r3, #6
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	071b      	lsls	r3, r3, #28
 80030ba:	493e      	ldr	r1, [pc, #248]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c8:	f023 021f 	bic.w	r2, r3, #31
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4938      	ldr	r1, [pc, #224]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01d      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030e6:	4b33      	ldr	r3, [pc, #204]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	0e1b      	lsrs	r3, r3, #24
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	0f1b      	lsrs	r3, r3, #28
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	071b      	lsls	r3, r3, #28
 800311a:	4926      	ldr	r1, [pc, #152]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d011      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	019a      	lsls	r2, r3, #6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	491a      	ldr	r1, [pc, #104]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003158:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800315c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315e:	f7fe f819 	bl	8001194 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003166:	f7fe f815 	bl	8001194 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	; 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0d8      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 80ce 	bne.w	8003328 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003198:	f7fd fffc 	bl	8001194 <HAL_GetTick>
 800319c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800319e:	e00b      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031a0:	f7fd fff8 	bl	8001194 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d904      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0bb      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c4:	d0ec      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02e      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d12a      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031fc:	4b4d      	ldr	r3, [pc, #308]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	0f1b      	lsrs	r3, r3, #28
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	019a      	lsls	r2, r3, #6
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	4944      	ldr	r1, [pc, #272]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800322a:	4b42      	ldr	r3, [pc, #264]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003230:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	493d      	ldr	r1, [pc, #244]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d022      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003258:	d11d      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	0f1b      	lsrs	r3, r3, #28
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	019a      	lsls	r2, r3, #6
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	4929      	ldr	r1, [pc, #164]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d028      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	0e1b      	lsrs	r3, r3, #24
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	019a      	lsls	r2, r3, #6
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	431a      	orrs	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	071b      	lsls	r3, r3, #28
 80032d6:	4917      	ldr	r1, [pc, #92]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4911      	ldr	r1, [pc, #68]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fd ff48 	bl	8001194 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003308:	f7fd ff44 	bl	8001194 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e007      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003326:	d1ef      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e049      	b.n	80033de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fcf2 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 faca 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d001      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e054      	b.n	80034aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d022      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d01d      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d018      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d009      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_TIM_Base_Start_IT+0xe4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d115      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_TIM_Base_Start_IT+0xec>)
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d015      	beq.n	80034a6 <HAL_TIM_Base_Start_IT+0xbe>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d011      	beq.n	80034a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e008      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e000      	b.n	80034a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40010400 	.word	0x40010400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40001800 	.word	0x40001800
 80034d4:	00010007 	.word	0x00010007

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9da 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9cc 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f9dd 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9b0 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9a2 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f9b3 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f986 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f978 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f989 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f95c 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f94e 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f95f 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f928 	bl	80038ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb16 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fb09 	bl	8003cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d10e      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f90d 	bl	80038fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d10e      	bne.n	800370e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d107      	bne.n	800370e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f06f 0220 	mvn.w	r2, #32
 8003706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fac9 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIM_ConfigClockSource+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e0b4      	b.n	800389e <HAL_TIM_ConfigClockSource+0x186>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_TIM_ConfigClockSource+0x190>)
 8003750:	4013      	ands	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d03e      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0xd4>
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	f200 8087 	bhi.w	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	f000 8086 	beq.w	800388a <HAL_TIM_ConfigClockSource+0x172>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d87f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b70      	cmp	r3, #112	; 0x70
 8003786:	d01a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xa6>
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d87b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b60      	cmp	r3, #96	; 0x60
 800378e:	d050      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x11a>
 8003790:	2b60      	cmp	r3, #96	; 0x60
 8003792:	d877      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b50      	cmp	r3, #80	; 0x50
 8003796:	d03c      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0xfa>
 8003798:	2b50      	cmp	r3, #80	; 0x50
 800379a:	d873      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d058      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x13a>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d86f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b30      	cmp	r3, #48	; 0x30
 80037a6:	d064      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037a8:	2b30      	cmp	r3, #48	; 0x30
 80037aa:	d86b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d060      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d867      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05c      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d05a      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	e062      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ce:	f000 f9b9 	bl	8003b44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
      break;
 80037ea:	e04f      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fc:	f000 f9a2 	bl	8003b44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800380e:	609a      	str	r2, [r3, #8]
      break;
 8003810:	e03c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	461a      	mov	r2, r3
 8003820:	f000 f916 	bl	8003a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2150      	movs	r1, #80	; 0x50
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f96f 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003830:	e02c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383e:	461a      	mov	r2, r3
 8003840:	f000 f935 	bl	8003aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2160      	movs	r1, #96	; 0x60
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f95f 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003850:	e01c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	461a      	mov	r2, r3
 8003860:	f000 f8f6 	bl	8003a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f94f 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003870:	e00c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 f946 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003882:	e003      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e000      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800388a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	fffeff88 	.word	0xfffeff88

080038ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d027      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d023      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <TIM_Base_SetConfig+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_Base_SetConfig+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <TIM_Base_SetConfig+0x13c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	40001800 	.word	0x40001800
 8003a48:	40001c00 	.word	0x40001c00
 8003a4c:	40002000 	.word	0x40002000

08003a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 030a 	bic.w	r3, r3, #10
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0210 	bic.w	r2, r3, #16
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	031b      	lsls	r3, r3, #12
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f043 0307 	orr.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e06d      	b.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d01d      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10c      	bne.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40010400 	.word	0x40010400
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e040      	b.n	8003d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd f862 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8b0 	bl	8003e80 <UART_SetConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fb08 	bl	8004348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb8f 	bl	800448c <UART_CheckIdleState>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d171      	bne.n	8003e74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Transmit+0x24>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e06a      	b.n	8003e76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2221      	movs	r2, #33	; 0x21
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dae:	f7fd f9f1 	bl	8001194 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Transmit+0x68>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003de8:	e02c      	b.n	8003e44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb96 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e038      	b.n	8003e76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e007      	b.n	8003e32 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1cc      	bne.n	8003dea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fb63 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e005      	b.n	8003e76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4ba6      	ldr	r3, [pc, #664]	; (8004144 <UART_SetConfig+0x2c4>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	6979      	ldr	r1, [r7, #20]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a94      	ldr	r2, [pc, #592]	; (8004148 <UART_SetConfig+0x2c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d120      	bne.n	8003f3e <UART_SetConfig+0xbe>
 8003efc:	4b93      	ldr	r3, [pc, #588]	; (800414c <UART_SetConfig+0x2cc>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d816      	bhi.n	8003f38 <UART_SetConfig+0xb8>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <UART_SetConfig+0x90>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f2d 	.word	0x08003f2d
 8003f18:	08003f27 	.word	0x08003f27
 8003f1c:	08003f33 	.word	0x08003f33
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e150      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f26:	2302      	movs	r3, #2
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e14d      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e14a      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f32:	2308      	movs	r3, #8
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e147      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e144      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a83      	ldr	r2, [pc, #524]	; (8004150 <UART_SetConfig+0x2d0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d132      	bne.n	8003fae <UART_SetConfig+0x12e>
 8003f48:	4b80      	ldr	r3, [pc, #512]	; (800414c <UART_SetConfig+0x2cc>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d828      	bhi.n	8003fa8 <UART_SetConfig+0x128>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0xdc>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08003fa9 	.word	0x08003fa9
 8003f64:	08003fa9 	.word	0x08003fa9
 8003f68:	08003fa9 	.word	0x08003fa9
 8003f6c:	08003f9d 	.word	0x08003f9d
 8003f70:	08003fa9 	.word	0x08003fa9
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fa9 	.word	0x08003fa9
 8003f7c:	08003f97 	.word	0x08003f97
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fa9 	.word	0x08003fa9
 8003f8c:	08003fa3 	.word	0x08003fa3
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e118      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f96:	2302      	movs	r3, #2
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e115      	b.n	80041c8 <UART_SetConfig+0x348>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e112      	b.n	80041c8 <UART_SetConfig+0x348>
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e10f      	b.n	80041c8 <UART_SetConfig+0x348>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e10c      	b.n	80041c8 <UART_SetConfig+0x348>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a68      	ldr	r2, [pc, #416]	; (8004154 <UART_SetConfig+0x2d4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d120      	bne.n	8003ffa <UART_SetConfig+0x17a>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	; (800414c <UART_SetConfig+0x2cc>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d013      	beq.n	8003fee <UART_SetConfig+0x16e>
 8003fc6:	2b30      	cmp	r3, #48	; 0x30
 8003fc8:	d814      	bhi.n	8003ff4 <UART_SetConfig+0x174>
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d009      	beq.n	8003fe2 <UART_SetConfig+0x162>
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d810      	bhi.n	8003ff4 <UART_SetConfig+0x174>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <UART_SetConfig+0x15c>
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d006      	beq.n	8003fe8 <UART_SetConfig+0x168>
 8003fda:	e00b      	b.n	8003ff4 <UART_SetConfig+0x174>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e0f2      	b.n	80041c8 <UART_SetConfig+0x348>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e0ef      	b.n	80041c8 <UART_SetConfig+0x348>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e0ec      	b.n	80041c8 <UART_SetConfig+0x348>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e0e9      	b.n	80041c8 <UART_SetConfig+0x348>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e0e6      	b.n	80041c8 <UART_SetConfig+0x348>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a56      	ldr	r2, [pc, #344]	; (8004158 <UART_SetConfig+0x2d8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d120      	bne.n	8004046 <UART_SetConfig+0x1c6>
 8004004:	4b51      	ldr	r3, [pc, #324]	; (800414c <UART_SetConfig+0x2cc>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800400e:	2bc0      	cmp	r3, #192	; 0xc0
 8004010:	d013      	beq.n	800403a <UART_SetConfig+0x1ba>
 8004012:	2bc0      	cmp	r3, #192	; 0xc0
 8004014:	d814      	bhi.n	8004040 <UART_SetConfig+0x1c0>
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d009      	beq.n	800402e <UART_SetConfig+0x1ae>
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d810      	bhi.n	8004040 <UART_SetConfig+0x1c0>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <UART_SetConfig+0x1a8>
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d006      	beq.n	8004034 <UART_SetConfig+0x1b4>
 8004026:	e00b      	b.n	8004040 <UART_SetConfig+0x1c0>
 8004028:	2300      	movs	r3, #0
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e0cc      	b.n	80041c8 <UART_SetConfig+0x348>
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e0c9      	b.n	80041c8 <UART_SetConfig+0x348>
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0c6      	b.n	80041c8 <UART_SetConfig+0x348>
 800403a:	2308      	movs	r3, #8
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e0c3      	b.n	80041c8 <UART_SetConfig+0x348>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e0c0      	b.n	80041c8 <UART_SetConfig+0x348>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a44      	ldr	r2, [pc, #272]	; (800415c <UART_SetConfig+0x2dc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d125      	bne.n	800409c <UART_SetConfig+0x21c>
 8004050:	4b3e      	ldr	r3, [pc, #248]	; (800414c <UART_SetConfig+0x2cc>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405e:	d017      	beq.n	8004090 <UART_SetConfig+0x210>
 8004060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004064:	d817      	bhi.n	8004096 <UART_SetConfig+0x216>
 8004066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406a:	d00b      	beq.n	8004084 <UART_SetConfig+0x204>
 800406c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004070:	d811      	bhi.n	8004096 <UART_SetConfig+0x216>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <UART_SetConfig+0x1fe>
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d006      	beq.n	800408a <UART_SetConfig+0x20a>
 800407c:	e00b      	b.n	8004096 <UART_SetConfig+0x216>
 800407e:	2300      	movs	r3, #0
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e0a1      	b.n	80041c8 <UART_SetConfig+0x348>
 8004084:	2302      	movs	r3, #2
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e09e      	b.n	80041c8 <UART_SetConfig+0x348>
 800408a:	2304      	movs	r3, #4
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e09b      	b.n	80041c8 <UART_SetConfig+0x348>
 8004090:	2308      	movs	r3, #8
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e098      	b.n	80041c8 <UART_SetConfig+0x348>
 8004096:	2310      	movs	r3, #16
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e095      	b.n	80041c8 <UART_SetConfig+0x348>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <UART_SetConfig+0x2e0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d125      	bne.n	80040f2 <UART_SetConfig+0x272>
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <UART_SetConfig+0x2cc>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040b4:	d017      	beq.n	80040e6 <UART_SetConfig+0x266>
 80040b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ba:	d817      	bhi.n	80040ec <UART_SetConfig+0x26c>
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c0:	d00b      	beq.n	80040da <UART_SetConfig+0x25a>
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c6:	d811      	bhi.n	80040ec <UART_SetConfig+0x26c>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <UART_SetConfig+0x254>
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d0:	d006      	beq.n	80040e0 <UART_SetConfig+0x260>
 80040d2:	e00b      	b.n	80040ec <UART_SetConfig+0x26c>
 80040d4:	2301      	movs	r3, #1
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e076      	b.n	80041c8 <UART_SetConfig+0x348>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e073      	b.n	80041c8 <UART_SetConfig+0x348>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e070      	b.n	80041c8 <UART_SetConfig+0x348>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e06d      	b.n	80041c8 <UART_SetConfig+0x348>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e06a      	b.n	80041c8 <UART_SetConfig+0x348>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <UART_SetConfig+0x2e4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d138      	bne.n	800416e <UART_SetConfig+0x2ee>
 80040fc:	4b13      	ldr	r3, [pc, #76]	; (800414c <UART_SetConfig+0x2cc>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004106:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800410a:	d017      	beq.n	800413c <UART_SetConfig+0x2bc>
 800410c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004110:	d82a      	bhi.n	8004168 <UART_SetConfig+0x2e8>
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004116:	d00b      	beq.n	8004130 <UART_SetConfig+0x2b0>
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d824      	bhi.n	8004168 <UART_SetConfig+0x2e8>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <UART_SetConfig+0x2aa>
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	d006      	beq.n	8004136 <UART_SetConfig+0x2b6>
 8004128:	e01e      	b.n	8004168 <UART_SetConfig+0x2e8>
 800412a:	2300      	movs	r3, #0
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e04b      	b.n	80041c8 <UART_SetConfig+0x348>
 8004130:	2302      	movs	r3, #2
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e048      	b.n	80041c8 <UART_SetConfig+0x348>
 8004136:	2304      	movs	r3, #4
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e045      	b.n	80041c8 <UART_SetConfig+0x348>
 800413c:	2308      	movs	r3, #8
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e042      	b.n	80041c8 <UART_SetConfig+0x348>
 8004142:	bf00      	nop
 8004144:	efff69f3 	.word	0xefff69f3
 8004148:	40011000 	.word	0x40011000
 800414c:	40023800 	.word	0x40023800
 8004150:	40004400 	.word	0x40004400
 8004154:	40004800 	.word	0x40004800
 8004158:	40004c00 	.word	0x40004c00
 800415c:	40005000 	.word	0x40005000
 8004160:	40011400 	.word	0x40011400
 8004164:	40007800 	.word	0x40007800
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e02c      	b.n	80041c8 <UART_SetConfig+0x348>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a72      	ldr	r2, [pc, #456]	; (800433c <UART_SetConfig+0x4bc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d125      	bne.n	80041c4 <UART_SetConfig+0x344>
 8004178:	4b71      	ldr	r3, [pc, #452]	; (8004340 <UART_SetConfig+0x4c0>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004182:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004186:	d017      	beq.n	80041b8 <UART_SetConfig+0x338>
 8004188:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800418c:	d817      	bhi.n	80041be <UART_SetConfig+0x33e>
 800418e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004192:	d00b      	beq.n	80041ac <UART_SetConfig+0x32c>
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	d811      	bhi.n	80041be <UART_SetConfig+0x33e>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <UART_SetConfig+0x326>
 800419e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a2:	d006      	beq.n	80041b2 <UART_SetConfig+0x332>
 80041a4:	e00b      	b.n	80041be <UART_SetConfig+0x33e>
 80041a6:	2300      	movs	r3, #0
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e00d      	b.n	80041c8 <UART_SetConfig+0x348>
 80041ac:	2302      	movs	r3, #2
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e00a      	b.n	80041c8 <UART_SetConfig+0x348>
 80041b2:	2304      	movs	r3, #4
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e007      	b.n	80041c8 <UART_SetConfig+0x348>
 80041b8:	2308      	movs	r3, #8
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e004      	b.n	80041c8 <UART_SetConfig+0x348>
 80041be:	2310      	movs	r3, #16
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e001      	b.n	80041c8 <UART_SetConfig+0x348>
 80041c4:	2310      	movs	r3, #16
 80041c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d15b      	bne.n	800428a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80041d2:	7ffb      	ldrb	r3, [r7, #31]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d828      	bhi.n	800422a <UART_SetConfig+0x3aa>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x360>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe fc48 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004208:	61b8      	str	r0, [r7, #24]
        break;
 800420a:	e013      	b.n	8004234 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe fc58 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004210:	61b8      	str	r0, [r7, #24]
        break;
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <UART_SetConfig+0x4c4>)
 8004216:	61bb      	str	r3, [r7, #24]
        break;
 8004218:	e00c      	b.n	8004234 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe fb2b 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 800421e:	61b8      	str	r0, [r7, #24]
        break;
 8004220:	e008      	b.n	8004234 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	61bb      	str	r3, [r7, #24]
        break;
 8004228:	e004      	b.n	8004234 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	77bb      	strb	r3, [r7, #30]
        break;
 8004232:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d074      	beq.n	8004324 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	005a      	lsls	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b0f      	cmp	r3, #15
 8004254:	d916      	bls.n	8004284 <UART_SetConfig+0x404>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d212      	bcs.n	8004284 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	b29b      	uxth	r3, r3
 8004262:	f023 030f 	bic.w	r3, r3, #15
 8004266:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	b29b      	uxth	r3, r3
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	b29a      	uxth	r2, r3
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	4313      	orrs	r3, r2
 8004278:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	89fa      	ldrh	r2, [r7, #14]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	e04f      	b.n	8004324 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	77bb      	strb	r3, [r7, #30]
 8004288:	e04c      	b.n	8004324 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800428a:	7ffb      	ldrb	r3, [r7, #31]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d828      	bhi.n	80042e2 <UART_SetConfig+0x462>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x418>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042e3 	.word	0x080042e3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042e3 	.word	0x080042e3
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7fe fbec 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80042c0:	61b8      	str	r0, [r7, #24]
        break;
 80042c2:	e013      	b.n	80042ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7fe fbfc 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 80042c8:	61b8      	str	r0, [r7, #24]
        break;
 80042ca:	e00f      	b.n	80042ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <UART_SetConfig+0x4c4>)
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e00c      	b.n	80042ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe facf 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 80042d6:	61b8      	str	r0, [r7, #24]
        break;
 80042d8:	e008      	b.n	80042ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	61bb      	str	r3, [r7, #24]
        break;
 80042e0:	e004      	b.n	80042ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ea:	bf00      	nop
    }

    if (pclk != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085a      	lsrs	r2, r3, #1
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d909      	bls.n	8004320 <UART_SetConfig+0x4a0>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004312:	d205      	bcs.n	8004320 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e001      	b.n	8004324 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004330:	7fbb      	ldrb	r3, [r7, #30]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40007c00 	.word	0x40007c00
 8004340:	40023800 	.word	0x40023800
 8004344:	00f42400 	.word	0x00f42400

08004348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01a      	beq.n	800445e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004446:	d10a      	bne.n	800445e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  }
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800449c:	f7fc fe7a 	bl	8001194 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d10e      	bne.n	80044ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f831 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e027      	b.n	800451e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d10e      	bne.n	80044fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f81b 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e011      	b.n	800451e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b09c      	sub	sp, #112	; 0x70
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	e0a7      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	f000 80a3 	beq.w	8004688 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7fc fe27 	bl	8001194 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <UART_WaitOnFlagUntilTimeout+0x32>
 8004552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004554:	2b00      	cmp	r3, #0
 8004556:	d13f      	bne.n	80045d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800456c:	667b      	str	r3, [r7, #100]	; 0x64
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004578:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800457c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e6      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	663b      	str	r3, [r7, #96]	; 0x60
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e068      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d050      	beq.n	8004688 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	d148      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
 8004620:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e6      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	613b      	str	r3, [r7, #16]
   return(result);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004652:	623a      	str	r2, [r7, #32]
 8004654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	69f9      	ldr	r1, [r7, #28]
 8004658:	6a3a      	ldr	r2, [r7, #32]
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e010      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	429a      	cmp	r2, r3
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	f43f af48 	beq.w	8004538 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3770      	adds	r7, #112	; 0x70
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b4:	b084      	sub	sp, #16
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	f107 001c 	add.w	r0, r7, #28
 80046c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d120      	bne.n	800470e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <USB_CoreInit+0xac>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa96 	bl	8004c34 <USB_CoreReset>
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e010      	b.n	8004730 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa8a 	bl	8004c34 <USB_CoreReset>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10b      	bne.n	800474e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f043 0206 	orr.w	r2, r3, #6
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800475a:	b004      	add	sp, #16
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	ffbdffbf 	.word	0xffbdffbf

08004764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 0201 	bic.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d115      	bne.n	80047d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fc fcf9 	bl	80011ac <HAL_Delay>
      ms++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa29 	bl	8004c18 <USB_GetMode>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d01e      	beq.n	800480a <USB_SetCurrentMode+0x84>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b31      	cmp	r3, #49	; 0x31
 80047d0:	d9f0      	bls.n	80047b4 <USB_SetCurrentMode+0x2e>
 80047d2:	e01a      	b.n	800480a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d115      	bne.n	8004806 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047e6:	2001      	movs	r0, #1
 80047e8:	f7fc fce0 	bl	80011ac <HAL_Delay>
      ms++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3301      	adds	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa10 	bl	8004c18 <USB_GetMode>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <USB_SetCurrentMode+0x84>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b31      	cmp	r3, #49	; 0x31
 8004802:	d9f0      	bls.n	80047e6 <USB_SetCurrentMode+0x60>
 8004804:	e001      	b.n	800480a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e005      	b.n	8004816 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b32      	cmp	r3, #50	; 0x32
 800480e:	d101      	bne.n	8004814 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004820:	b084      	sub	sp, #16
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800482e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e009      	b.n	8004854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3340      	adds	r3, #64	; 0x40
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0e      	cmp	r3, #14
 8004858:	d9f2      	bls.n	8004840 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800485a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11c      	bne.n	800489a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e005      	b.n	80048a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ac:	461a      	mov	r2, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b8:	4619      	mov	r1, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	461a      	mov	r2, r3
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10c      	bne.n	80048e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048d2:	2100      	movs	r1, #0
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f965 	bl	8004ba4 <USB_SetDevSpeed>
 80048da:	e008      	b.n	80048ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048dc:	2101      	movs	r1, #1
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f960 	bl	8004ba4 <USB_SetDevSpeed>
 80048e4:	e003      	b.n	80048ee <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048e6:	2103      	movs	r1, #3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f95b 	bl	8004ba4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048ee:	2110      	movs	r1, #16
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8f3 	bl	8004adc <USB_FlushTxFifo>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f91f 	bl	8004b44 <USB_FlushRxFifo>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	e043      	b.n	80049c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004950:	d118      	bne.n	8004984 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	461a      	mov	r2, r3
 8004966:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e013      	b.n	8004996 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	461a      	mov	r2, r3
 800497c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e008      	b.n	8004996 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	461a      	mov	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a2:	461a      	mov	r2, r3
 80049a4:	2300      	movs	r3, #0
 80049a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b4:	461a      	mov	r2, r3
 80049b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3301      	adds	r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3b7      	bcc.n	800493a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e043      	b.n	8004a58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e6:	d118      	bne.n	8004a1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	461a      	mov	r2, r3
 80049fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e013      	b.n	8004a2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e008      	b.n	8004a2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	461a      	mov	r2, r3
 8004a28:	2300      	movs	r3, #0
 8004a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3301      	adds	r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d3b7      	bcc.n	80049d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f043 0210 	orr.w	r2, r3, #16
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <USB_DevInit+0x2b4>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f043 0208 	orr.w	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <USB_DevInit+0x2b8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ad0:	b004      	add	sp, #16
 8004ad2:	4770      	bx	lr
 8004ad4:	803c3800 	.word	0x803c3800
 8004ad8:	40000004 	.word	0x40000004

08004adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <USB_FlushTxFifo+0x64>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e01b      	b.n	8004b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	daf2      	bge.n	8004aea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	019b      	lsls	r3, r3, #6
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <USB_FlushTxFifo+0x64>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e006      	b.n	8004b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d0f0      	beq.n	8004b14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	00030d40 	.word	0x00030d40

08004b44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <USB_FlushRxFifo+0x5c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e018      	b.n	8004b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	daf2      	bge.n	8004b50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2210      	movs	r2, #16
 8004b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <USB_FlushRxFifo+0x5c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e006      	b.n	8004b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d0f0      	beq.n	8004b74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	00030d40 	.word	0x00030d40

08004ba4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c04:	f043 0302 	orr.w	r3, r3, #2
 8004c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0301 	and.w	r3, r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <USB_CoreReset+0x64>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e01b      	b.n	8004c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	daf2      	bge.n	8004c40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <USB_CoreReset+0x64>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d901      	bls.n	8004c7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e006      	b.n	8004c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d0f0      	beq.n	8004c6a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	00030d40 	.word	0x00030d40

08004c9c <siprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b500      	push	{lr}
 8004ca0:	b09c      	sub	sp, #112	; 0x70
 8004ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	9006      	str	r0, [sp, #24]
 8004ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cac:	4809      	ldr	r0, [pc, #36]	; (8004cd4 <siprintf+0x38>)
 8004cae:	9107      	str	r1, [sp, #28]
 8004cb0:	9104      	str	r1, [sp, #16]
 8004cb2:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <siprintf+0x3c>)
 8004cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb8:	9105      	str	r1, [sp, #20]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	a902      	add	r1, sp, #8
 8004cc0:	f000 f992 	bl	8004fe8 <_svfiprintf_r>
 8004cc4:	9b02      	ldr	r3, [sp, #8]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	b01c      	add	sp, #112	; 0x70
 8004ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd0:	b003      	add	sp, #12
 8004cd2:	4770      	bx	lr
 8004cd4:	20000058 	.word	0x20000058
 8004cd8:	ffff0208 	.word	0xffff0208

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__errno>:
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <__errno+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000058 	.word	0x20000058

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4d0d      	ldr	r5, [pc, #52]	; (8004d30 <__libc_init_array+0x38>)
 8004cfc:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	2600      	movs	r6, #0
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	4d0b      	ldr	r5, [pc, #44]	; (8004d38 <__libc_init_array+0x40>)
 8004d0a:	4c0c      	ldr	r4, [pc, #48]	; (8004d3c <__libc_init_array+0x44>)
 8004d0c:	f000 fc6a 	bl	80055e4 <_init>
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	2600      	movs	r6, #0
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	08005658 	.word	0x08005658
 8004d34:	08005658 	.word	0x08005658
 8004d38:	08005658 	.word	0x08005658
 8004d3c:	0800565c 	.word	0x0800565c

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <_free_r>:
 8004d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d044      	beq.n	8004dd4 <_free_r+0x90>
 8004d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4e:	9001      	str	r0, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f1a1 0404 	sub.w	r4, r1, #4
 8004d56:	bfb8      	it	lt
 8004d58:	18e4      	addlt	r4, r4, r3
 8004d5a:	f000 f8df 	bl	8004f1c <__malloc_lock>
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <_free_r+0x94>)
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	b933      	cbnz	r3, 8004d74 <_free_r+0x30>
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6014      	str	r4, [r2, #0]
 8004d6a:	b003      	add	sp, #12
 8004d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d70:	f000 b8da 	b.w	8004f28 <__malloc_unlock>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d908      	bls.n	8004d8a <_free_r+0x46>
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf01      	itttt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	e7ed      	b.n	8004d66 <_free_r+0x22>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x50>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x46>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1855      	adds	r5, r2, r1
 8004d98:	42a5      	cmp	r5, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x70>
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	4421      	add	r1, r4
 8004da0:	1854      	adds	r4, r2, r1
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1e0      	bne.n	8004d6a <_free_r+0x26>
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	440c      	add	r4, r1
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	e7da      	b.n	8004d6a <_free_r+0x26>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x78>
 8004db6:	230c      	movs	r3, #12
 8004db8:	6003      	str	r3, [r0, #0]
 8004dba:	e7d6      	b.n	8004d6a <_free_r+0x26>
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1961      	adds	r1, r4, r5
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf04      	itt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	bf04      	itt	eq
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	6054      	str	r4, [r2, #4]
 8004dd2:	e7ca      	b.n	8004d6a <_free_r+0x26>
 8004dd4:	b003      	add	sp, #12
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	20000a20 	.word	0x20000a20

08004ddc <sbrk_aligned>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4e0e      	ldr	r6, [pc, #56]	; (8004e18 <sbrk_aligned+0x3c>)
 8004de0:	460c      	mov	r4, r1
 8004de2:	6831      	ldr	r1, [r6, #0]
 8004de4:	4605      	mov	r5, r0
 8004de6:	b911      	cbnz	r1, 8004dee <sbrk_aligned+0x12>
 8004de8:	f000 fba6 	bl	8005538 <_sbrk_r>
 8004dec:	6030      	str	r0, [r6, #0]
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fba1 	bl	8005538 <_sbrk_r>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d00a      	beq.n	8004e10 <sbrk_aligned+0x34>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d007      	beq.n	8004e14 <sbrk_aligned+0x38>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 fb96 	bl	8005538 <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d101      	bne.n	8004e14 <sbrk_aligned+0x38>
 8004e10:	f04f 34ff 	mov.w	r4, #4294967295
 8004e14:	4620      	mov	r0, r4
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	20000a24 	.word	0x20000a24

08004e1c <_malloc_r>:
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	1ccd      	adds	r5, r1, #3
 8004e22:	f025 0503 	bic.w	r5, r5, #3
 8004e26:	3508      	adds	r5, #8
 8004e28:	2d0c      	cmp	r5, #12
 8004e2a:	bf38      	it	cc
 8004e2c:	250c      	movcc	r5, #12
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	4607      	mov	r7, r0
 8004e32:	db01      	blt.n	8004e38 <_malloc_r+0x1c>
 8004e34:	42a9      	cmp	r1, r5
 8004e36:	d905      	bls.n	8004e44 <_malloc_r+0x28>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	4630      	mov	r0, r6
 8004e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f18 <_malloc_r+0xfc>
 8004e48:	f000 f868 	bl	8004f1c <__malloc_lock>
 8004e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e50:	461c      	mov	r4, r3
 8004e52:	bb5c      	cbnz	r4, 8004eac <_malloc_r+0x90>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ffc0 	bl	8004ddc <sbrk_aligned>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	4604      	mov	r4, r0
 8004e60:	d155      	bne.n	8004f0e <_malloc_r+0xf2>
 8004e62:	f8d8 4000 	ldr.w	r4, [r8]
 8004e66:	4626      	mov	r6, r4
 8004e68:	2e00      	cmp	r6, #0
 8004e6a:	d145      	bne.n	8004ef8 <_malloc_r+0xdc>
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	d048      	beq.n	8004f02 <_malloc_r+0xe6>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	4631      	mov	r1, r6
 8004e74:	4638      	mov	r0, r7
 8004e76:	eb04 0903 	add.w	r9, r4, r3
 8004e7a:	f000 fb5d 	bl	8005538 <_sbrk_r>
 8004e7e:	4581      	cmp	r9, r0
 8004e80:	d13f      	bne.n	8004f02 <_malloc_r+0xe6>
 8004e82:	6821      	ldr	r1, [r4, #0]
 8004e84:	1a6d      	subs	r5, r5, r1
 8004e86:	4629      	mov	r1, r5
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff ffa7 	bl	8004ddc <sbrk_aligned>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d037      	beq.n	8004f02 <_malloc_r+0xe6>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	442b      	add	r3, r5
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d038      	beq.n	8004f12 <_malloc_r+0xf6>
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	42a2      	cmp	r2, r4
 8004ea4:	d12b      	bne.n	8004efe <_malloc_r+0xe2>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e00f      	b.n	8004ecc <_malloc_r+0xb0>
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	1b52      	subs	r2, r2, r5
 8004eb0:	d41f      	bmi.n	8004ef2 <_malloc_r+0xd6>
 8004eb2:	2a0b      	cmp	r2, #11
 8004eb4:	d917      	bls.n	8004ee6 <_malloc_r+0xca>
 8004eb6:	1961      	adds	r1, r4, r5
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	6025      	str	r5, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	6059      	strne	r1, [r3, #4]
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	bf08      	it	eq
 8004ec4:	f8c8 1000 	streq.w	r1, [r8]
 8004ec8:	5162      	str	r2, [r4, r5]
 8004eca:	604b      	str	r3, [r1, #4]
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f104 060b 	add.w	r6, r4, #11
 8004ed2:	f000 f829 	bl	8004f28 <__malloc_unlock>
 8004ed6:	f026 0607 	bic.w	r6, r6, #7
 8004eda:	1d23      	adds	r3, r4, #4
 8004edc:	1af2      	subs	r2, r6, r3
 8004ede:	d0ae      	beq.n	8004e3e <_malloc_r+0x22>
 8004ee0:	1b9b      	subs	r3, r3, r6
 8004ee2:	50a3      	str	r3, [r4, r2]
 8004ee4:	e7ab      	b.n	8004e3e <_malloc_r+0x22>
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	6862      	ldr	r2, [r4, #4]
 8004eea:	d1dd      	bne.n	8004ea8 <_malloc_r+0x8c>
 8004eec:	f8c8 2000 	str.w	r2, [r8]
 8004ef0:	e7ec      	b.n	8004ecc <_malloc_r+0xb0>
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	6864      	ldr	r4, [r4, #4]
 8004ef6:	e7ac      	b.n	8004e52 <_malloc_r+0x36>
 8004ef8:	4634      	mov	r4, r6
 8004efa:	6876      	ldr	r6, [r6, #4]
 8004efc:	e7b4      	b.n	8004e68 <_malloc_r+0x4c>
 8004efe:	4613      	mov	r3, r2
 8004f00:	e7cc      	b.n	8004e9c <_malloc_r+0x80>
 8004f02:	230c      	movs	r3, #12
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4638      	mov	r0, r7
 8004f08:	f000 f80e 	bl	8004f28 <__malloc_unlock>
 8004f0c:	e797      	b.n	8004e3e <_malloc_r+0x22>
 8004f0e:	6025      	str	r5, [r4, #0]
 8004f10:	e7dc      	b.n	8004ecc <_malloc_r+0xb0>
 8004f12:	605b      	str	r3, [r3, #4]
 8004f14:	deff      	udf	#255	; 0xff
 8004f16:	bf00      	nop
 8004f18:	20000a20 	.word	0x20000a20

08004f1c <__malloc_lock>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__malloc_lock+0x8>)
 8004f1e:	f7ff bf0f 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	20000a1c 	.word	0x20000a1c

08004f28 <__malloc_unlock>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__malloc_unlock+0x8>)
 8004f2a:	f7ff bf0a 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	20000a1c 	.word	0x20000a1c

08004f34 <__ssputs_r>:
 8004f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	688e      	ldr	r6, [r1, #8]
 8004f3a:	461f      	mov	r7, r3
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	680b      	ldr	r3, [r1, #0]
 8004f40:	4682      	mov	sl, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	4690      	mov	r8, r2
 8004f46:	d82c      	bhi.n	8004fa2 <__ssputs_r+0x6e>
 8004f48:	898a      	ldrh	r2, [r1, #12]
 8004f4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f4e:	d026      	beq.n	8004f9e <__ssputs_r+0x6a>
 8004f50:	6965      	ldr	r5, [r4, #20]
 8004f52:	6909      	ldr	r1, [r1, #16]
 8004f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f58:	eba3 0901 	sub.w	r9, r3, r1
 8004f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f60:	1c7b      	adds	r3, r7, #1
 8004f62:	444b      	add	r3, r9
 8004f64:	106d      	asrs	r5, r5, #1
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf38      	it	cc
 8004f6a:	461d      	movcc	r5, r3
 8004f6c:	0553      	lsls	r3, r2, #21
 8004f6e:	d527      	bpl.n	8004fc0 <__ssputs_r+0x8c>
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7ff ff53 	bl	8004e1c <_malloc_r>
 8004f76:	4606      	mov	r6, r0
 8004f78:	b360      	cbz	r0, 8004fd4 <__ssputs_r+0xa0>
 8004f7a:	6921      	ldr	r1, [r4, #16]
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	f000 faeb 	bl	8005558 <memcpy>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	6126      	str	r6, [r4, #16]
 8004f90:	6165      	str	r5, [r4, #20]
 8004f92:	444e      	add	r6, r9
 8004f94:	eba5 0509 	sub.w	r5, r5, r9
 8004f98:	6026      	str	r6, [r4, #0]
 8004f9a:	60a5      	str	r5, [r4, #8]
 8004f9c:	463e      	mov	r6, r7
 8004f9e:	42be      	cmp	r6, r7
 8004fa0:	d900      	bls.n	8004fa4 <__ssputs_r+0x70>
 8004fa2:	463e      	mov	r6, r7
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4641      	mov	r1, r8
 8004faa:	f000 faab 	bl	8005504 <memmove>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	60a3      	str	r3, [r4, #8]
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	4433      	add	r3, r6
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	f000 fad7 	bl	8005574 <_realloc_r>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d1e0      	bne.n	8004f8e <__ssputs_r+0x5a>
 8004fcc:	6921      	ldr	r1, [r4, #16]
 8004fce:	4650      	mov	r0, sl
 8004fd0:	f7ff feb8 	bl	8004d44 <_free_r>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	f8ca 3000 	str.w	r3, [sl]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	e7e9      	b.n	8004fbc <__ssputs_r+0x88>

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4698      	mov	r8, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	d50e      	bpl.n	800501a <_svfiprintf_r+0x32>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b963      	cbnz	r3, 800501a <_svfiprintf_r+0x32>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f7ff ff0b 	bl	8004e1c <_malloc_r>
 8005006:	6028      	str	r0, [r5, #0]
 8005008:	6128      	str	r0, [r5, #16]
 800500a:	b920      	cbnz	r0, 8005016 <_svfiprintf_r+0x2e>
 800500c:	230c      	movs	r3, #12
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e0d0      	b.n	80051b8 <_svfiprintf_r+0x1d0>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	616b      	str	r3, [r5, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	2320      	movs	r3, #32
 8005020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005024:	f8cd 800c 	str.w	r8, [sp, #12]
 8005028:	2330      	movs	r3, #48	; 0x30
 800502a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051d0 <_svfiprintf_r+0x1e8>
 800502e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005032:	f04f 0901 	mov.w	r9, #1
 8005036:	4623      	mov	r3, r4
 8005038:	469a      	mov	sl, r3
 800503a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503e:	b10a      	cbz	r2, 8005044 <_svfiprintf_r+0x5c>
 8005040:	2a25      	cmp	r2, #37	; 0x25
 8005042:	d1f9      	bne.n	8005038 <_svfiprintf_r+0x50>
 8005044:	ebba 0b04 	subs.w	fp, sl, r4
 8005048:	d00b      	beq.n	8005062 <_svfiprintf_r+0x7a>
 800504a:	465b      	mov	r3, fp
 800504c:	4622      	mov	r2, r4
 800504e:	4629      	mov	r1, r5
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff6f 	bl	8004f34 <__ssputs_r>
 8005056:	3001      	adds	r0, #1
 8005058:	f000 80a9 	beq.w	80051ae <_svfiprintf_r+0x1c6>
 800505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505e:	445a      	add	r2, fp
 8005060:	9209      	str	r2, [sp, #36]	; 0x24
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a1 	beq.w	80051ae <_svfiprintf_r+0x1c6>
 800506c:	2300      	movs	r3, #0
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005076:	f10a 0a01 	add.w	sl, sl, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005082:	931a      	str	r3, [sp, #104]	; 0x68
 8005084:	4654      	mov	r4, sl
 8005086:	2205      	movs	r2, #5
 8005088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508c:	4850      	ldr	r0, [pc, #320]	; (80051d0 <_svfiprintf_r+0x1e8>)
 800508e:	f7fb f8df 	bl	8000250 <memchr>
 8005092:	9a04      	ldr	r2, [sp, #16]
 8005094:	b9d8      	cbnz	r0, 80050ce <_svfiprintf_r+0xe6>
 8005096:	06d0      	lsls	r0, r2, #27
 8005098:	bf44      	itt	mi
 800509a:	2320      	movmi	r3, #32
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a0:	0711      	lsls	r1, r2, #28
 80050a2:	bf44      	itt	mi
 80050a4:	232b      	movmi	r3, #43	; 0x2b
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	f89a 3000 	ldrb.w	r3, [sl]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d015      	beq.n	80050de <_svfiprintf_r+0xf6>
 80050b2:	9a07      	ldr	r2, [sp, #28]
 80050b4:	4654      	mov	r4, sl
 80050b6:	2000      	movs	r0, #0
 80050b8:	f04f 0c0a 	mov.w	ip, #10
 80050bc:	4621      	mov	r1, r4
 80050be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d94d      	bls.n	8005164 <_svfiprintf_r+0x17c>
 80050c8:	b1b0      	cbz	r0, 80050f8 <_svfiprintf_r+0x110>
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	e014      	b.n	80050f8 <_svfiprintf_r+0x110>
 80050ce:	eba0 0308 	sub.w	r3, r0, r8
 80050d2:	fa09 f303 	lsl.w	r3, r9, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	46a2      	mov	sl, r4
 80050dc:	e7d2      	b.n	8005084 <_svfiprintf_r+0x9c>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9103      	str	r1, [sp, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfbb      	ittet	lt
 80050ea:	425b      	neglt	r3, r3
 80050ec:	f042 0202 	orrlt.w	r2, r2, #2
 80050f0:	9307      	strge	r3, [sp, #28]
 80050f2:	9307      	strlt	r3, [sp, #28]
 80050f4:	bfb8      	it	lt
 80050f6:	9204      	strlt	r2, [sp, #16]
 80050f8:	7823      	ldrb	r3, [r4, #0]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d10c      	bne.n	8005118 <_svfiprintf_r+0x130>
 80050fe:	7863      	ldrb	r3, [r4, #1]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d134      	bne.n	800516e <_svfiprintf_r+0x186>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb8      	it	lt
 8005110:	f04f 33ff 	movlt.w	r3, #4294967295
 8005114:	3402      	adds	r4, #2
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051e0 <_svfiprintf_r+0x1f8>
 800511c:	7821      	ldrb	r1, [r4, #0]
 800511e:	2203      	movs	r2, #3
 8005120:	4650      	mov	r0, sl
 8005122:	f7fb f895 	bl	8000250 <memchr>
 8005126:	b138      	cbz	r0, 8005138 <_svfiprintf_r+0x150>
 8005128:	9b04      	ldr	r3, [sp, #16]
 800512a:	eba0 000a 	sub.w	r0, r0, sl
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	4082      	lsls	r2, r0
 8005132:	4313      	orrs	r3, r2
 8005134:	3401      	adds	r4, #1
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	4825      	ldr	r0, [pc, #148]	; (80051d4 <_svfiprintf_r+0x1ec>)
 800513e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005142:	2206      	movs	r2, #6
 8005144:	f7fb f884 	bl	8000250 <memchr>
 8005148:	2800      	cmp	r0, #0
 800514a:	d038      	beq.n	80051be <_svfiprintf_r+0x1d6>
 800514c:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <_svfiprintf_r+0x1f0>)
 800514e:	bb1b      	cbnz	r3, 8005198 <_svfiprintf_r+0x1b0>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	3307      	adds	r3, #7
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	3308      	adds	r3, #8
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515e:	4433      	add	r3, r6
 8005160:	9309      	str	r3, [sp, #36]	; 0x24
 8005162:	e768      	b.n	8005036 <_svfiprintf_r+0x4e>
 8005164:	fb0c 3202 	mla	r2, ip, r2, r3
 8005168:	460c      	mov	r4, r1
 800516a:	2001      	movs	r0, #1
 800516c:	e7a6      	b.n	80050bc <_svfiprintf_r+0xd4>
 800516e:	2300      	movs	r3, #0
 8005170:	3401      	adds	r4, #1
 8005172:	9305      	str	r3, [sp, #20]
 8005174:	4619      	mov	r1, r3
 8005176:	f04f 0c0a 	mov.w	ip, #10
 800517a:	4620      	mov	r0, r4
 800517c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005180:	3a30      	subs	r2, #48	; 0x30
 8005182:	2a09      	cmp	r2, #9
 8005184:	d903      	bls.n	800518e <_svfiprintf_r+0x1a6>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0c6      	beq.n	8005118 <_svfiprintf_r+0x130>
 800518a:	9105      	str	r1, [sp, #20]
 800518c:	e7c4      	b.n	8005118 <_svfiprintf_r+0x130>
 800518e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005192:	4604      	mov	r4, r0
 8005194:	2301      	movs	r3, #1
 8005196:	e7f0      	b.n	800517a <_svfiprintf_r+0x192>
 8005198:	ab03      	add	r3, sp, #12
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	462a      	mov	r2, r5
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <_svfiprintf_r+0x1f4>)
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	4638      	mov	r0, r7
 80051a4:	f3af 8000 	nop.w
 80051a8:	1c42      	adds	r2, r0, #1
 80051aa:	4606      	mov	r6, r0
 80051ac:	d1d6      	bne.n	800515c <_svfiprintf_r+0x174>
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	065b      	lsls	r3, r3, #25
 80051b2:	f53f af2d 	bmi.w	8005010 <_svfiprintf_r+0x28>
 80051b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051b8:	b01d      	add	sp, #116	; 0x74
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	ab03      	add	r3, sp, #12
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	462a      	mov	r2, r5
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <_svfiprintf_r+0x1f4>)
 80051c6:	a904      	add	r1, sp, #16
 80051c8:	4638      	mov	r0, r7
 80051ca:	f000 f879 	bl	80052c0 <_printf_i>
 80051ce:	e7eb      	b.n	80051a8 <_svfiprintf_r+0x1c0>
 80051d0:	0800561c 	.word	0x0800561c
 80051d4:	08005626 	.word	0x08005626
 80051d8:	00000000 	.word	0x00000000
 80051dc:	08004f35 	.word	0x08004f35
 80051e0:	08005622 	.word	0x08005622

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf02      	ittt	eq
 8005256:	68e5      	ldreq	r5, [r4, #12]
 8005258:	6833      	ldreq	r3, [r6, #0]
 800525a:	1aed      	subeq	r5, r5, r3
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4649      	mov	r1, r9
 8005280:	4638      	mov	r0, r7
 8005282:	47c0      	blx	r8
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d4 	beq.w	800548a <_printf_i+0x1ca>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80c0 	beq.w	8005468 <_printf_i+0x1a8>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005471 	.word	0x08005471
 8005330:	08005399 	.word	0x08005399
 8005334:	0800542b 	.word	0x0800542b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	08005493 	.word	0x08005493
 8005344:	080052e9 	.word	0x080052e9
 8005348:	08005399 	.word	0x08005399
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005433 	.word	0x08005433
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e09f      	b.n	80054ac <_printf_i+0x1ec>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	0607      	lsls	r7, r0, #24
 8005372:	f103 0104 	add.w	r1, r3, #4
 8005376:	6029      	str	r1, [r5, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0xbe>
 800537a:	681e      	ldr	r6, [r3, #0]
 800537c:	e003      	b.n	8005386 <_printf_i+0xc6>
 800537e:	0646      	lsls	r6, r0, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0xba>
 8005382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005386:	2e00      	cmp	r6, #0
 8005388:	da03      	bge.n	8005392 <_printf_i+0xd2>
 800538a:	232d      	movs	r3, #45	; 0x2d
 800538c:	4276      	negs	r6, r6
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	485a      	ldr	r0, [pc, #360]	; (80054fc <_printf_i+0x23c>)
 8005394:	230a      	movs	r3, #10
 8005396:	e012      	b.n	80053be <_printf_i+0xfe>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6029      	str	r1, [r5, #0]
 80053a0:	0605      	lsls	r5, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xe8>
 80053a4:	681e      	ldr	r6, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0xee>
 80053a8:	0641      	lsls	r1, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xe4>
 80053ac:	881e      	ldrh	r6, [r3, #0]
 80053ae:	4853      	ldr	r0, [pc, #332]	; (80054fc <_printf_i+0x23c>)
 80053b0:	2f6f      	cmp	r7, #111	; 0x6f
 80053b2:	bf0c      	ite	eq
 80053b4:	2308      	moveq	r3, #8
 80053b6:	230a      	movne	r3, #10
 80053b8:	2100      	movs	r1, #0
 80053ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053be:	6865      	ldr	r5, [r4, #4]
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	bfa2      	ittt	ge
 80053c6:	6821      	ldrge	r1, [r4, #0]
 80053c8:	f021 0104 	bicge.w	r1, r1, #4
 80053cc:	6021      	strge	r1, [r4, #0]
 80053ce:	b90e      	cbnz	r6, 80053d4 <_printf_i+0x114>
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d04b      	beq.n	800546c <_printf_i+0x1ac>
 80053d4:	4615      	mov	r5, r2
 80053d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053da:	fb03 6711 	mls	r7, r3, r1, r6
 80053de:	5dc7      	ldrb	r7, [r0, r7]
 80053e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e4:	4637      	mov	r7, r6
 80053e6:	42bb      	cmp	r3, r7
 80053e8:	460e      	mov	r6, r1
 80053ea:	d9f4      	bls.n	80053d6 <_printf_i+0x116>
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10b      	bne.n	8005408 <_printf_i+0x148>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	07de      	lsls	r6, r3, #31
 80053f4:	d508      	bpl.n	8005408 <_printf_i+0x148>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	4299      	cmp	r1, r3
 80053fc:	bfde      	ittt	le
 80053fe:	2330      	movle	r3, #48	; 0x30
 8005400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005408:	1b52      	subs	r2, r2, r5
 800540a:	6122      	str	r2, [r4, #16]
 800540c:	f8cd a000 	str.w	sl, [sp]
 8005410:	464b      	mov	r3, r9
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fee4 	bl	80051e4 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14a      	bne.n	80054b6 <_printf_i+0x1f6>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b004      	add	sp, #16
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 0320 	orr.w	r3, r3, #32
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	4833      	ldr	r0, [pc, #204]	; (8005500 <_printf_i+0x240>)
 8005434:	2778      	movs	r7, #120	; 0x78
 8005436:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	061f      	lsls	r7, r3, #24
 8005440:	f851 6b04 	ldr.w	r6, [r1], #4
 8005444:	d402      	bmi.n	800544c <_printf_i+0x18c>
 8005446:	065f      	lsls	r7, r3, #25
 8005448:	bf48      	it	mi
 800544a:	b2b6      	uxthmi	r6, r6
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	bf48      	it	mi
 8005450:	f043 0320 	orrmi.w	r3, r3, #32
 8005454:	6029      	str	r1, [r5, #0]
 8005456:	bf48      	it	mi
 8005458:	6023      	strmi	r3, [r4, #0]
 800545a:	b91e      	cbnz	r6, 8005464 <_printf_i+0x1a4>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	2310      	movs	r3, #16
 8005466:	e7a7      	b.n	80053b8 <_printf_i+0xf8>
 8005468:	4824      	ldr	r0, [pc, #144]	; (80054fc <_printf_i+0x23c>)
 800546a:	e7e4      	b.n	8005436 <_printf_i+0x176>
 800546c:	4615      	mov	r5, r2
 800546e:	e7bd      	b.n	80053ec <_printf_i+0x12c>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6826      	ldr	r6, [r4, #0]
 8005474:	6961      	ldr	r1, [r4, #20]
 8005476:	1d18      	adds	r0, r3, #4
 8005478:	6028      	str	r0, [r5, #0]
 800547a:	0635      	lsls	r5, r6, #24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	d501      	bpl.n	8005484 <_printf_i+0x1c4>
 8005480:	6019      	str	r1, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0x1ca>
 8005484:	0670      	lsls	r0, r6, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0x1c0>
 8005488:	8019      	strh	r1, [r3, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	4615      	mov	r5, r2
 8005490:	e7bc      	b.n	800540c <_printf_i+0x14c>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	602a      	str	r2, [r5, #0]
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	2100      	movs	r1, #0
 800549e:	4628      	mov	r0, r5
 80054a0:	f7fa fed6 	bl	8000250 <memchr>
 80054a4:	b108      	cbz	r0, 80054aa <_printf_i+0x1ea>
 80054a6:	1b40      	subs	r0, r0, r5
 80054a8:	6060      	str	r0, [r4, #4]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	2300      	movs	r3, #0
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b4:	e7aa      	b.n	800540c <_printf_i+0x14c>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	462a      	mov	r2, r5
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	47d0      	blx	sl
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0ad      	beq.n	8005420 <_printf_i+0x160>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d413      	bmi.n	80054f2 <_printf_i+0x232>
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	4298      	cmp	r0, r3
 80054d0:	bfb8      	it	lt
 80054d2:	4618      	movlt	r0, r3
 80054d4:	e7a6      	b.n	8005424 <_printf_i+0x164>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4632      	mov	r2, r6
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	47d0      	blx	sl
 80054e0:	3001      	adds	r0, #1
 80054e2:	d09d      	beq.n	8005420 <_printf_i+0x160>
 80054e4:	3501      	adds	r5, #1
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	9903      	ldr	r1, [sp, #12]
 80054ea:	1a5b      	subs	r3, r3, r1
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dcf2      	bgt.n	80054d6 <_printf_i+0x216>
 80054f0:	e7eb      	b.n	80054ca <_printf_i+0x20a>
 80054f2:	2500      	movs	r5, #0
 80054f4:	f104 0619 	add.w	r6, r4, #25
 80054f8:	e7f5      	b.n	80054e6 <_printf_i+0x226>
 80054fa:	bf00      	nop
 80054fc:	0800562d 	.word	0x0800562d
 8005500:	0800563e 	.word	0x0800563e

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0402 	add.w	r4, r1, r2
 800550c:	d902      	bls.n	8005514 <memmove+0x10>
 800550e:	4284      	cmp	r4, r0
 8005510:	4623      	mov	r3, r4
 8005512:	d807      	bhi.n	8005524 <memmove+0x20>
 8005514:	1e43      	subs	r3, r0, #1
 8005516:	42a1      	cmp	r1, r4
 8005518:	d008      	beq.n	800552c <memmove+0x28>
 800551a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005522:	e7f8      	b.n	8005516 <memmove+0x12>
 8005524:	4402      	add	r2, r0
 8005526:	4601      	mov	r1, r0
 8005528:	428a      	cmp	r2, r1
 800552a:	d100      	bne.n	800552e <memmove+0x2a>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005536:	e7f7      	b.n	8005528 <memmove+0x24>

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fd64 	bl	8001010 <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000a18 	.word	0x20000a18

08005558 <memcpy>:
 8005558:	440a      	add	r2, r1
 800555a:	4291      	cmp	r1, r2
 800555c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005560:	d100      	bne.n	8005564 <memcpy+0xc>
 8005562:	4770      	bx	lr
 8005564:	b510      	push	{r4, lr}
 8005566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556e:	4291      	cmp	r1, r2
 8005570:	d1f9      	bne.n	8005566 <memcpy+0xe>
 8005572:	bd10      	pop	{r4, pc}

08005574 <_realloc_r>:
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	4680      	mov	r8, r0
 800557a:	4614      	mov	r4, r2
 800557c:	460e      	mov	r6, r1
 800557e:	b921      	cbnz	r1, 800558a <_realloc_r+0x16>
 8005580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005584:	4611      	mov	r1, r2
 8005586:	f7ff bc49 	b.w	8004e1c <_malloc_r>
 800558a:	b92a      	cbnz	r2, 8005598 <_realloc_r+0x24>
 800558c:	f7ff fbda 	bl	8004d44 <_free_r>
 8005590:	4625      	mov	r5, r4
 8005592:	4628      	mov	r0, r5
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	f000 f81b 	bl	80055d2 <_malloc_usable_size_r>
 800559c:	4284      	cmp	r4, r0
 800559e:	4607      	mov	r7, r0
 80055a0:	d802      	bhi.n	80055a8 <_realloc_r+0x34>
 80055a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055a6:	d812      	bhi.n	80055ce <_realloc_r+0x5a>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f7ff fc36 	bl	8004e1c <_malloc_r>
 80055b0:	4605      	mov	r5, r0
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0ed      	beq.n	8005592 <_realloc_r+0x1e>
 80055b6:	42bc      	cmp	r4, r7
 80055b8:	4622      	mov	r2, r4
 80055ba:	4631      	mov	r1, r6
 80055bc:	bf28      	it	cs
 80055be:	463a      	movcs	r2, r7
 80055c0:	f7ff ffca 	bl	8005558 <memcpy>
 80055c4:	4631      	mov	r1, r6
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff fbbc 	bl	8004d44 <_free_r>
 80055cc:	e7e1      	b.n	8005592 <_realloc_r+0x1e>
 80055ce:	4635      	mov	r5, r6
 80055d0:	e7df      	b.n	8005592 <_realloc_r+0x1e>

080055d2 <_malloc_usable_size_r>:
 80055d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d6:	1f18      	subs	r0, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfbc      	itt	lt
 80055dc:	580b      	ldrlt	r3, [r1, r0]
 80055de:	18c0      	addlt	r0, r0, r3
 80055e0:	4770      	bx	lr
	...

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
